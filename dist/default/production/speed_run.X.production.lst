

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 15:52:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2553 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _PORTB	set	3969
    55  0000                     _PORTA	set	3968
    56  0000                     _TRISC	set	3988
    57  0000                     _TRISB	set	3987
    58  0000                     _TRISA	set	3986
    59  0000                     _ADCON1	set	4033
    60  0000                     _PORTC	set	3970
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63                           
    64                           ; #config settings
    65                           
    66                           	psect	cinit
    67  002008                     __pcinit:
    68                           	opt stack 0
    69  002008                     start_initialization:
    70                           	opt stack 0
    71  002008                     __initialization:
    72                           	opt stack 0
    73  002008                     end_of_initialization:
    74                           	opt stack 0
    75  002008                     __end_of__initialization:
    76                           	opt stack 0
    77  002008  0E00               	movlw	low (__Lmediumconst shr (0+16))
    78  00200A  6EF8               	movwf	tblptru,c
    79  00200C  0100               	movlb	0
    80  00200E  EFA7  F03E         	goto	_main	;jump to C main() function
    81                           tblptru	equ	0xFF8
    82                           
    83                           	psect	cstackCOMRAM
    84  000001                     __pcstackCOMRAM:
    85                           	opt stack 0
    86  000001                     wait00@k:
    87                           	opt stack 0
    88  000001                     getRoadState@a:
    89                           	opt stack 0
    90                           
    91                           ; 2 bytes @ 0x0
    92  000001                     	ds	2
    93  000003                     ??_wait00:
    94  000003                     getRoadState@b:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x2
    98  000003                     	ds	1
    99  000004                     wait00@j:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x3
   103  000004                     	ds	1
   104  000005                     getRoadState@c:
   105                           	opt stack 0
   106                           
   107                           ; 2 bytes @ 0x4
   108  000005                     	ds	1
   109  000006                     wait00@i:
   110                           	opt stack 0
   111                           
   112                           ; 2 bytes @ 0x5
   113  000006                     	ds	1
   114  000007                     getRoadState@d:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x6
   118  000007                     	ds	1
   119  000008                     
   120                           ; 1 bytes @ 0x7
   121  000008                     	ds	1
   122  000009                     getRoadState@e:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x8
   126  000009                     	ds	2
   127  00000B                     ??_main:
   128                           
   129                           ; 1 bytes @ 0xA
   130  00000B                     	ds	5
   131  000010                     main@previous_road_state:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0xF
   135  000010                     	ds	1
   136  000011                     main@road_state:
   137                           	opt stack 0
   138                           
   139                           ; 1 bytes @ 0x10
   140  000011                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           
   143 ;;
   144 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   145 ;;
   146 ;; *************** function _main *****************
   147 ;; Defined at:
   148 ;;		line 157 in file "main.c"
   149 ;; Parameters:    Size  Location     Type
   150 ;;		None
   151 ;; Auto vars:     Size  Location     Type
   152 ;;  road_state      1   16[COMRAM] enum E3329
   153 ;;  previous_roa    1   15[COMRAM] enum E3329
   154 ;; Return value:  Size  Location     Type
   155 ;;                  2   72[None  ] int 
   156 ;; Registers used:
   157 ;;		wreg, status,2, status,0, cstack
   158 ;; Tracked objects:
   159 ;;		On entry : 0/0
   160 ;;		On exit  : 0/0
   161 ;;		Unchanged: 0/0
   162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   163 ;;      Params:         0       0       0       0       0       0       0       0       0
   164 ;;      Locals:         2       0       0       0       0       0       0       0       0
   165 ;;      Temps:          5       0       0       0       0       0       0       0       0
   166 ;;      Totals:         7       0       0       0       0       0       0       0       0
   167 ;;Total ram usage:        7 bytes
   168 ;; Hardware stack levels required when called:    2
   169 ;; This function calls:
   170 ;;		_accelerate
   171 ;;		_getRoadState
   172 ;;		_led_sens
   173 ;;		_straight
   174 ;;		_turnLeft
   175 ;;		_turnLeftSmall
   176 ;;		_turnRight
   177 ;;		_turnRightSmall
   178 ;; This function is called by:
   179 ;;		Startup code after reset
   180 ;; This function uses a non-reentrant model
   181 ;;
   182                           
   183                           	psect	text0
   184  007D4E                     __ptext0:
   185                           	opt stack 0
   186  007D4E                     _main:
   187                           	opt stack 29
   188                           
   189                           ;main.c: 160: ADCON1 = 0x0F;
   190                           
   191                           ;incstack = 0
   192  007D4E  0E0F               	movlw	15
   193  007D50  6EC1               	movwf	4033,c	;volatile
   194                           
   195                           ;main.c: 163: TRISA = 0x20;
   196  007D52  0E20               	movlw	32
   197  007D54  6E92               	movwf	3986,c	;volatile
   198                           
   199                           ;main.c: 164: TRISB = 0xFF;
   200  007D56  6893               	setf	3987,c	;volatile
   201                           
   202                           ;main.c: 165: TRISC = 0x00;
   203  007D58  0E00               	movlw	0
   204  007D5A  6E94               	movwf	3988,c	;volatile
   205                           
   206                           ;main.c: 168: PORTA = 0x00;
   207  007D5C  0E00               	movlw	0
   208  007D5E  6E80               	movwf	3968,c	;volatile
   209                           
   210                           ;main.c: 169: PORTB = 0x00;
   211  007D60  0E00               	movlw	0
   212  007D62  6E81               	movwf	3969,c	;volatile
   213                           
   214                           ;main.c: 170: PORTC = 0x00;
   215  007D64  0E00               	movlw	0
   216  007D66  6E82               	movwf	3970,c	;volatile
   217                           
   218                           ;main.c: 173: while(PORTAbits.RA5==1){
   219  007D68  D002               	goto	l73
   220  007D6A                     
   221                           ;main.c: 174: led_sens();
   222  007D6A  EC6C  F03E         	call	_led_sens	;wreg free
   223  007D6E                     l73:
   224  007D6E  BA80               	btfsc	3968,5,c	;volatile
   225  007D70  D7FC               	goto	l74
   226                           
   227                           ;main.c: 175: }
   228                           ;main.c: 177: enum road_state_codes road_state = on_track;
   229  007D72  0E00               	movlw	0
   230  007D74  6E11               	movwf	main@road_state,c
   231  007D76                     
   232                           ;main.c: 182: led_sens();
   233  007D76  EC6C  F03E         	call	_led_sens	;wreg free
   234                           
   235                           ;main.c: 184: previous_road_state = road_state;
   236  007D7A  C011  F010         	movff	main@road_state,main@previous_road_state
   237                           
   238                           ;main.c: 185: road_state = getRoadState(
   239                           ;main.c: 186: PORTBbits.RB0, PORTBbits.RB1, PORTBbits.RB2,
   240                           ;main.c: 187: PORTBbits.RB3, PORTBbits.RB4
   241                           ;main.c: 188: );
   242  007D7E  A081               	btfss	3969,0,c	;volatile
   243  007D80  D003               	goto	u1210
   244  007D82  6A0B               	clrf	??_main& (0+255),c
   245  007D84  2A0B               	incf	??_main& (0+255),f,c
   246  007D86  D001               	goto	u1218
   247  007D88                     u1210:
   248  007D88  6A0B               	clrf	??_main& (0+255),c
   249  007D8A                     u1218:
   250  007D8A  500B               	movf	??_main,w,c
   251  007D8C  6E01               	movwf	getRoadState@a,c
   252  007D8E  6A02               	clrf	getRoadState@a+1,c
   253  007D90  A281               	btfss	3969,1,c	;volatile
   254  007D92  D003               	goto	u1220
   255  007D94  6A0C               	clrf	(??_main+1)& (0+255),c
   256  007D96  2A0C               	incf	(??_main+1)& (0+255),f,c
   257  007D98  D001               	goto	u1228
   258  007D9A                     u1220:
   259  007D9A  6A0C               	clrf	(??_main+1)& (0+255),c
   260  007D9C                     u1228:
   261  007D9C  500C               	movf	??_main+1,w,c
   262  007D9E  6E03               	movwf	getRoadState@b,c
   263  007DA0  6A04               	clrf	getRoadState@b+1,c
   264  007DA2  A481               	btfss	3969,2,c	;volatile
   265  007DA4  D003               	goto	u1230
   266  007DA6  6A0D               	clrf	(??_main+2)& (0+255),c
   267  007DA8  2A0D               	incf	(??_main+2)& (0+255),f,c
   268  007DAA  D001               	goto	u1238
   269  007DAC                     u1230:
   270  007DAC  6A0D               	clrf	(??_main+2)& (0+255),c
   271  007DAE                     u1238:
   272  007DAE  500D               	movf	??_main+2,w,c
   273  007DB0  6E05               	movwf	getRoadState@c,c
   274  007DB2  6A06               	clrf	getRoadState@c+1,c
   275  007DB4  A681               	btfss	3969,3,c	;volatile
   276  007DB6  D003               	goto	u1240
   277  007DB8  6A0E               	clrf	(??_main+3)& (0+255),c
   278  007DBA  2A0E               	incf	(??_main+3)& (0+255),f,c
   279  007DBC  D001               	goto	u1248
   280  007DBE                     u1240:
   281  007DBE  6A0E               	clrf	(??_main+3)& (0+255),c
   282  007DC0                     u1248:
   283  007DC0  500E               	movf	??_main+3,w,c
   284  007DC2  6E07               	movwf	getRoadState@d,c
   285  007DC4  6A08               	clrf	getRoadState@d+1,c
   286  007DC6  A881               	btfss	3969,4,c	;volatile
   287  007DC8  D003               	goto	u1250
   288  007DCA  6A0F               	clrf	(??_main+4)& (0+255),c
   289  007DCC  2A0F               	incf	(??_main+4)& (0+255),f,c
   290  007DCE  D001               	goto	u1258
   291  007DD0                     u1250:
   292  007DD0  6A0F               	clrf	(??_main+4)& (0+255),c
   293  007DD2                     u1258:
   294  007DD2  500F               	movf	??_main+4,w,c
   295  007DD4  6E09               	movwf	getRoadState@e,c
   296  007DD6  6A0A               	clrf	getRoadState@e+1,c
   297  007DD8  EC22  F03F         	call	_getRoadState	;wreg free
   298  007DDC  6E11               	movwf	main@road_state,c
   299                           
   300                           ;main.c: 190: if (road_state == off_track)
   301  007DDE  0411               	decf	main@road_state,w,c
   302  007DE0  A4D8               	btfss	status,2,c
   303  007DE2  D01C               	goto	l78
   304                           
   305                           ;main.c: 191: road_state = previous_road_state;
   306  007DE4  C010  F011         	movff	main@previous_road_state,main@road_state
   307                           
   308                           ;main.c: 193: switch (road_state) {
   309  007DE8  D019               	goto	l78
   310  007DEA                     
   311                           ;main.c: 195: if (previous_road_state == straight_line)
   312  007DEA  0E02               	movlw	2
   313  007DEC  1810               	xorwf	main@previous_road_state,w,c
   314  007DEE  A4D8               	btfss	status,2,c
   315  007DF0  D003               	goto	l80
   316                           
   317                           ;main.c: 196: accelerate();
   318  007DF2  ECD6  F03D         	call	_accelerate	;wreg free
   319  007DF6  D7BF               	goto	l76
   320  007DF8                     l80:
   321                           
   322                           ;main.c: 197: else
   323                           ;main.c: 198: straight();
   324  007DF8  ECEF  F03D         	call	_straight	;wreg free
   325                           
   326                           ;main.c: 199: break;
   327  007DFC  D7BC               	goto	l76
   328  007DFE                     
   329                           ;main.c: 201: turnRightSmall();
   330  007DFE  EC53  F03E         	call	_turnRightSmall	;wreg free
   331                           
   332                           ;main.c: 202: break;
   333  007E02  D7B9               	goto	l76
   334  007E04                     
   335                           ;main.c: 204: turnLeftSmall();
   336  007E04  EC21  F03E         	call	_turnLeftSmall	;wreg free
   337                           
   338                           ;main.c: 205: break;
   339  007E08  D7B6               	goto	l76
   340  007E0A                     
   341                           ;main.c: 207: turnRight();
   342  007E0A  EC3A  F03E         	call	_turnRight	;wreg free
   343                           
   344                           ;main.c: 208: break;
   345  007E0E  D7B3               	goto	l76
   346  007E10                     
   347                           ;main.c: 210: turnLeft();
   348  007E10  EC08  F03E         	call	_turnLeft	;wreg free
   349                           
   350                           ;main.c: 211: break;
   351  007E14  D7B0               	goto	l76
   352  007E16                     
   353                           ;main.c: 213: straight();
   354  007E16  ECEF  F03D         	call	_straight	;wreg free
   355                           
   356                           ;main.c: 215: }
   357                           
   358                           ;main.c: 214: break;
   359  007E1A  D7AD               	goto	l76
   360  007E1C                     l78:
   361  007E1C  5011               	movf	main@road_state,w,c
   362                           
   363                           ; Switch size 1, requested type "space"
   364                           ; Number of cases is 6, Range of values is 0 to 6
   365                           ; switch strategies available:
   366                           ; Name         Instructions Cycles
   367                           ; simple_byte           19    10 (average)
   368                           ;	Chosen strategy is simple_byte
   369  007E1E  0A00               	xorlw	0	; case 0
   370  007E20  B4D8               	btfsc	status,2,c
   371  007E22  D7F9               	goto	l87
   372  007E24  0A02               	xorlw	2	; case 2
   373  007E26  B4D8               	btfsc	status,2,c
   374  007E28  D7E0               	goto	l79
   375  007E2A  0A01               	xorlw	1	; case 3
   376  007E2C  B4D8               	btfsc	status,2,c
   377  007E2E  D7EA               	goto	l84
   378  007E30  0A07               	xorlw	7	; case 4
   379  007E32  B4D8               	btfsc	status,2,c
   380  007E34  D7ED               	goto	l86
   381  007E36  0A01               	xorlw	1	; case 5
   382  007E38  B4D8               	btfsc	status,2,c
   383  007E3A  D7E1               	goto	l83
   384  007E3C  0A03               	xorlw	3	; case 6
   385  007E3E  B4D8               	btfsc	status,2,c
   386  007E40  D7E4               	goto	l85
   387  007E42  D799               	goto	l76
   388  007E44                     __end_of_main:
   389                           	opt stack 0
   390                           tblptru	equ	0xFF8
   391                           status	equ	0xFD8
   392                           
   393 ;; *************** function _turnRightSmall *****************
   394 ;; Defined at:
   395 ;;		line 127 in file "main.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;		None
   398 ;; Auto vars:     Size  Location     Type
   399 ;;		None
   400 ;; Return value:  Size  Location     Type
   401 ;;                  2   61[None  ] int 
   402 ;; Registers used:
   403 ;;		wreg, status,2, status,0, cstack
   404 ;; Tracked objects:
   405 ;;		On entry : 0/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   409 ;;      Params:         0       0       0       0       0       0       0       0       0
   410 ;;      Locals:         0       0       0       0       0       0       0       0       0
   411 ;;      Temps:          0       0       0       0       0       0       0       0       0
   412 ;;      Totals:         0       0       0       0       0       0       0       0       0
   413 ;;Total ram usage:        0 bytes
   414 ;; Hardware stack levels used:    1
   415 ;; Hardware stack levels required when called:    1
   416 ;; This function calls:
   417 ;;		_wait00
   418 ;; This function is called by:
   419 ;;		_main
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           	psect	text1
   424  007CA6                     __ptext1:
   425                           	opt stack 0
   426  007CA6                     _turnRightSmall:
   427                           	opt stack 29
   428                           
   429                           ;main.c: 129: PORTC=0x03;
   430                           
   431                           ;incstack = 0
   432  007CA6  0E03               	movlw	3
   433  007CA8  6E82               	movwf	3970,c	;volatile
   434                           
   435                           ;main.c: 130: wait00(8);
   436  007CAA  0E00               	movlw	0
   437  007CAC  6E02               	movwf	wait00@k+1,c
   438  007CAE  0E08               	movlw	8
   439  007CB0  6E01               	movwf	wait00@k,c
   440  007CB2  EC86  F03E         	call	_wait00	;wreg free
   441                           
   442                           ;main.c: 131: PORTC=0x01;
   443  007CB6  0E01               	movlw	1
   444  007CB8  6E82               	movwf	3970,c	;volatile
   445                           
   446                           ;main.c: 132: wait00(32);
   447  007CBA  0E00               	movlw	0
   448  007CBC  6E02               	movwf	wait00@k+1,c
   449  007CBE  0E20               	movlw	32
   450  007CC0  6E01               	movwf	wait00@k,c
   451  007CC2  EC86  F03E         	call	_wait00	;wreg free
   452                           
   453                           ;main.c: 133: PORTC = 0x00;
   454  007CC6  0E00               	movlw	0
   455  007CC8  6E82               	movwf	3970,c	;volatile
   456                           
   457                           ;main.c: 134: wait00(50);
   458  007CCA  0E00               	movlw	0
   459  007CCC  6E02               	movwf	wait00@k+1,c
   460  007CCE  0E32               	movlw	50
   461  007CD0  6E01               	movwf	wait00@k,c
   462  007CD2  EC86  F03E         	call	_wait00	;wreg free
   463  007CD6  0012               	return		;funcret
   464  007CD8                     __end_of_turnRightSmall:
   465                           	opt stack 0
   466                           tblptru	equ	0xFF8
   467                           status	equ	0xFD8
   468                           
   469 ;; *************** function _turnRight *****************
   470 ;; Defined at:
   471 ;;		line 107 in file "main.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;                  2   55[None  ] int 
   478 ;; Registers used:
   479 ;;		wreg, status,2, status,0, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   485 ;;      Params:         0       0       0       0       0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0       0       0
   488 ;;      Totals:         0       0       0       0       0       0       0       0       0
   489 ;;Total ram usage:        0 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; Hardware stack levels required when called:    1
   492 ;; This function calls:
   493 ;;		_wait00
   494 ;; This function is called by:
   495 ;;		_main
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text2
   500  007C74                     __ptext2:
   501                           	opt stack 0
   502  007C74                     _turnRight:
   503                           	opt stack 29
   504                           
   505                           ;main.c: 108: PORTC=0x03;
   506                           
   507                           ;incstack = 0
   508  007C74  0E03               	movlw	3
   509  007C76  6E82               	movwf	3970,c	;volatile
   510                           
   511                           ;main.c: 109: wait00(1);
   512  007C78  0E00               	movlw	0
   513  007C7A  6E02               	movwf	wait00@k+1,c
   514  007C7C  0E01               	movlw	1
   515  007C7E  6E01               	movwf	wait00@k,c
   516  007C80  EC86  F03E         	call	_wait00	;wreg free
   517                           
   518                           ;main.c: 110: PORTC=0x01;
   519  007C84  0E01               	movlw	1
   520  007C86  6E82               	movwf	3970,c	;volatile
   521                           
   522                           ;main.c: 111: wait00(40);
   523  007C88  0E00               	movlw	0
   524  007C8A  6E02               	movwf	wait00@k+1,c
   525  007C8C  0E28               	movlw	40
   526  007C8E  6E01               	movwf	wait00@k,c
   527  007C90  EC86  F03E         	call	_wait00	;wreg free
   528                           
   529                           ;main.c: 112: PORTC = 0x00;
   530  007C94  0E00               	movlw	0
   531  007C96  6E82               	movwf	3970,c	;volatile
   532                           
   533                           ;main.c: 113: wait00(50);
   534  007C98  0E00               	movlw	0
   535  007C9A  6E02               	movwf	wait00@k+1,c
   536  007C9C  0E32               	movlw	50
   537  007C9E  6E01               	movwf	wait00@k,c
   538  007CA0  EC86  F03E         	call	_wait00	;wreg free
   539  007CA4  0012               	return		;funcret
   540  007CA6                     __end_of_turnRight:
   541                           	opt stack 0
   542                           tblptru	equ	0xFF8
   543                           status	equ	0xFD8
   544                           
   545 ;; *************** function _turnLeftSmall *****************
   546 ;; Defined at:
   547 ;;		line 117 in file "main.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  2   58[None  ] int 
   554 ;; Registers used:
   555 ;;		wreg, status,2, status,0, cstack
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   561 ;;      Params:         0       0       0       0       0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0       0       0       0       0
   564 ;;      Totals:         0       0       0       0       0       0       0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; Hardware stack levels required when called:    1
   568 ;; This function calls:
   569 ;;		_wait00
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text3
   576  007C42                     __ptext3:
   577                           	opt stack 0
   578  007C42                     _turnLeftSmall:
   579                           	opt stack 29
   580                           
   581                           ;main.c: 119: PORTC=0x03;
   582                           
   583                           ;incstack = 0
   584  007C42  0E03               	movlw	3
   585  007C44  6E82               	movwf	3970,c	;volatile
   586                           
   587                           ;main.c: 120: wait00(8);
   588  007C46  0E00               	movlw	0
   589  007C48  6E02               	movwf	wait00@k+1,c
   590  007C4A  0E08               	movlw	8
   591  007C4C  6E01               	movwf	wait00@k,c
   592  007C4E  EC86  F03E         	call	_wait00	;wreg free
   593                           
   594                           ;main.c: 121: PORTC=0x02;
   595  007C52  0E02               	movlw	2
   596  007C54  6E82               	movwf	3970,c	;volatile
   597                           
   598                           ;main.c: 122: wait00(40);
   599  007C56  0E00               	movlw	0
   600  007C58  6E02               	movwf	wait00@k+1,c
   601  007C5A  0E28               	movlw	40
   602  007C5C  6E01               	movwf	wait00@k,c
   603  007C5E  EC86  F03E         	call	_wait00	;wreg free
   604                           
   605                           ;main.c: 123: PORTC = 0x00;
   606  007C62  0E00               	movlw	0
   607  007C64  6E82               	movwf	3970,c	;volatile
   608                           
   609                           ;main.c: 124: wait00(50);
   610  007C66  0E00               	movlw	0
   611  007C68  6E02               	movwf	wait00@k+1,c
   612  007C6A  0E32               	movlw	50
   613  007C6C  6E01               	movwf	wait00@k,c
   614  007C6E  EC86  F03E         	call	_wait00	;wreg free
   615  007C72  0012               	return		;funcret
   616  007C74                     __end_of_turnLeftSmall:
   617                           	opt stack 0
   618                           tblptru	equ	0xFF8
   619                           status	equ	0xFD8
   620                           
   621 ;; *************** function _turnLeft *****************
   622 ;; Defined at:
   623 ;;		line 98 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  2   52[None  ] int 
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   637 ;;      Params:         0       0       0       0       0       0       0       0       0
   638 ;;      Locals:         0       0       0       0       0       0       0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0
   640 ;;      Totals:         0       0       0       0       0       0       0       0       0
   641 ;;Total ram usage:        0 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    1
   644 ;; This function calls:
   645 ;;		_wait00
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           	psect	text4
   652  007C10                     __ptext4:
   653                           	opt stack 0
   654  007C10                     _turnLeft:
   655                           	opt stack 29
   656                           
   657                           ;main.c: 99: PORTC=0x03;
   658                           
   659                           ;incstack = 0
   660  007C10  0E03               	movlw	3
   661  007C12  6E82               	movwf	3970,c	;volatile
   662                           
   663                           ;main.c: 100: wait00(1);
   664  007C14  0E00               	movlw	0
   665  007C16  6E02               	movwf	wait00@k+1,c
   666  007C18  0E01               	movlw	1
   667  007C1A  6E01               	movwf	wait00@k,c
   668  007C1C  EC86  F03E         	call	_wait00	;wreg free
   669                           
   670                           ;main.c: 101: PORTC=0x02;
   671  007C20  0E02               	movlw	2
   672  007C22  6E82               	movwf	3970,c	;volatile
   673                           
   674                           ;main.c: 102: wait00(50);
   675  007C24  0E00               	movlw	0
   676  007C26  6E02               	movwf	wait00@k+1,c
   677  007C28  0E32               	movlw	50
   678  007C2A  6E01               	movwf	wait00@k,c
   679  007C2C  EC86  F03E         	call	_wait00	;wreg free
   680                           
   681                           ;main.c: 103: PORTC = 0x00;
   682  007C30  0E00               	movlw	0
   683  007C32  6E82               	movwf	3970,c	;volatile
   684                           
   685                           ;main.c: 104: wait00(50);
   686  007C34  0E00               	movlw	0
   687  007C36  6E02               	movwf	wait00@k+1,c
   688  007C38  0E32               	movlw	50
   689  007C3A  6E01               	movwf	wait00@k,c
   690  007C3C  EC86  F03E         	call	_wait00	;wreg free
   691  007C40  0012               	return		;funcret
   692  007C42                     __end_of_turnLeft:
   693                           	opt stack 0
   694                           tblptru	equ	0xFF8
   695                           status	equ	0xFD8
   696                           
   697 ;; *************** function _straight *****************
   698 ;; Defined at:
   699 ;;		line 138 in file "main.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;                  2   64[None  ] int 
   706 ;; Registers used:
   707 ;;		wreg, status,2, status,0, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   713 ;;      Params:         0       0       0       0       0       0       0       0       0
   714 ;;      Locals:         0       0       0       0       0       0       0       0       0
   715 ;;      Temps:          0       0       0       0       0       0       0       0       0
   716 ;;      Totals:         0       0       0       0       0       0       0       0       0
   717 ;;Total ram usage:        0 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; Hardware stack levels required when called:    1
   720 ;; This function calls:
   721 ;;		_wait00
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text5
   728  007BDE                     __ptext5:
   729                           	opt stack 0
   730  007BDE                     _straight:
   731                           	opt stack 29
   732                           
   733                           ;main.c: 139: PORTC=0x03;
   734                           
   735                           ;incstack = 0
   736  007BDE  0E03               	movlw	3
   737  007BE0  6E82               	movwf	3970,c	;volatile
   738                           
   739                           ;main.c: 140: wait00(30);
   740  007BE2  0E00               	movlw	0
   741  007BE4  6E02               	movwf	wait00@k+1,c
   742  007BE6  0E1E               	movlw	30
   743  007BE8  6E01               	movwf	wait00@k,c
   744  007BEA  EC86  F03E         	call	_wait00	;wreg free
   745                           
   746                           ;main.c: 141: PORTC=0x02;
   747  007BEE  0E02               	movlw	2
   748  007BF0  6E82               	movwf	3970,c	;volatile
   749                           
   750                           ;main.c: 142: wait00(3);
   751  007BF2  0E00               	movlw	0
   752  007BF4  6E02               	movwf	wait00@k+1,c
   753  007BF6  0E03               	movlw	3
   754  007BF8  6E01               	movwf	wait00@k,c
   755  007BFA  EC86  F03E         	call	_wait00	;wreg free
   756                           
   757                           ;main.c: 143: PORTC=0x00;
   758  007BFE  0E00               	movlw	0
   759  007C00  6E82               	movwf	3970,c	;volatile
   760                           
   761                           ;main.c: 144: wait00(80);
   762  007C02  0E00               	movlw	0
   763  007C04  6E02               	movwf	wait00@k+1,c
   764  007C06  0E50               	movlw	80
   765  007C08  6E01               	movwf	wait00@k,c
   766  007C0A  EC86  F03E         	call	_wait00	;wreg free
   767  007C0E  0012               	return		;funcret
   768  007C10                     __end_of_straight:
   769                           	opt stack 0
   770                           tblptru	equ	0xFF8
   771                           status	equ	0xFD8
   772                           
   773 ;; *************** function _led_sens *****************
   774 ;; Defined at:
   775 ;;		line 21 in file "main.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;		None
   778 ;; Auto vars:     Size  Location     Type
   779 ;;		None
   780 ;; Return value:  Size  Location     Type
   781 ;;                  2   28[None  ] int 
   782 ;; Registers used:
   783 ;;		None
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   789 ;;      Params:         0       0       0       0       0       0       0       0       0
   790 ;;      Locals:         0       0       0       0       0       0       0       0       0
   791 ;;      Temps:          0       0       0       0       0       0       0       0       0
   792 ;;      Totals:         0       0       0       0       0       0       0       0       0
   793 ;;Total ram usage:        0 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_main
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text6
   803  007CD8                     __ptext6:
   804                           	opt stack 0
   805  007CD8                     _led_sens:
   806                           	opt stack 30
   807                           
   808                           ;main.c: 23: PORTAbits.RA0 = PORTBbits.RB0;
   809                           
   810                           ;incstack = 0
   811  007CD8  A081               	btfss	3969,0,c	;volatile
   812  007CDA  D002               	bra	u45
   813  007CDC  8080               	bsf	3968,0,c	;volatile
   814  007CDE  D001               	bra	u47
   815  007CE0                     u45:
   816  007CE0  9080               	bcf	3968,0,c	;volatile
   817  007CE2                     u47:
   818                           
   819                           ;main.c: 24: PORTAbits.RA1 = PORTBbits.RB1;
   820  007CE2  A281               	btfss	3969,1,c	;volatile
   821  007CE4  D002               	bra	u55
   822  007CE6  8280               	bsf	3968,1,c	;volatile
   823  007CE8  D001               	bra	u57
   824  007CEA                     u55:
   825  007CEA  9280               	bcf	3968,1,c	;volatile
   826  007CEC                     u57:
   827                           
   828                           ;main.c: 25: PORTAbits.RA2 = PORTBbits.RB2;
   829  007CEC  A481               	btfss	3969,2,c	;volatile
   830  007CEE  D002               	bra	u65
   831  007CF0  8480               	bsf	3968,2,c	;volatile
   832  007CF2  D001               	bra	u67
   833  007CF4                     u65:
   834  007CF4  9480               	bcf	3968,2,c	;volatile
   835  007CF6                     u67:
   836                           
   837                           ;main.c: 26: PORTAbits.RA3 = PORTBbits.RB3;
   838  007CF6  A681               	btfss	3969,3,c	;volatile
   839  007CF8  D002               	bra	u75
   840  007CFA  8680               	bsf	3968,3,c	;volatile
   841  007CFC  D001               	bra	u77
   842  007CFE                     u75:
   843  007CFE  9680               	bcf	3968,3,c	;volatile
   844  007D00                     u77:
   845                           
   846                           ;main.c: 27: PORTAbits.RA4 = PORTBbits.RB4;
   847  007D00  A881               	btfss	3969,4,c	;volatile
   848  007D02  D002               	bra	u85
   849  007D04  8880               	bsf	3968,4,c	;volatile
   850  007D06  D001               	bra	u87
   851  007D08                     u85:
   852  007D08  9880               	bcf	3968,4,c	;volatile
   853  007D0A                     u87:
   854  007D0A  0012               	return		;funcret
   855  007D0C                     __end_of_led_sens:
   856                           	opt stack 0
   857                           tblptru	equ	0xFF8
   858                           status	equ	0xFD8
   859                           
   860 ;; *************** function _getRoadState *****************
   861 ;; Defined at:
   862 ;;		line 41 in file "main.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;  a               2    0[COMRAM] short 
   865 ;;  b               2    2[COMRAM] short 
   866 ;;  c               2    4[COMRAM] short 
   867 ;;  d               2    6[COMRAM] short 
   868 ;;  e               2    8[COMRAM] short 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      enum E3329
   873 ;; Registers used:
   874 ;;		wreg, status,2, status,0
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   880 ;;      Params:        10       0       0       0       0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0       0       0       0       0
   883 ;;      Totals:        10       0       0       0       0       0       0       0       0
   884 ;;Total ram usage:       10 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text7
   894  007E44                     __ptext7:
   895                           	opt stack 0
   896  007E44                     _getRoadState:
   897                           	opt stack 30
   898                           
   899                           ;main.c: 42: if ( (a == 1 && b == 1 && c == 1
   900                           ;main.c: 43: && d == 1 && e == 1)
   901                           ;main.c: 44: || (a == 0 && b == 0 && c == 0
   902                           ;main.c: 45: && d == 0 && e == 0)) {
   903                           
   904                           ;incstack = 0
   905  007E44  0401               	decf	getRoadState@a,w,c
   906  007E46  1002               	iorwf	getRoadState@a+1,w,c
   907  007E48  A4D8               	btfss	status,2,c
   908  007E4A  D010               	goto	u740
   909  007E4C  0403               	decf	getRoadState@b,w,c
   910  007E4E  1004               	iorwf	getRoadState@b+1,w,c
   911  007E50  A4D8               	btfss	status,2,c
   912  007E52  D00C               	goto	u740
   913  007E54  0405               	decf	getRoadState@c,w,c
   914  007E56  1006               	iorwf	getRoadState@c+1,w,c
   915  007E58  A4D8               	btfss	status,2,c
   916  007E5A  D008               	goto	u740
   917  007E5C  0407               	decf	getRoadState@d,w,c
   918  007E5E  1008               	iorwf	getRoadState@d+1,w,c
   919  007E60  A4D8               	btfss	status,2,c
   920  007E62  D004               	goto	u740
   921  007E64  0409               	decf	getRoadState@e,w,c
   922  007E66  100A               	iorwf	getRoadState@e+1,w,c
   923  007E68  B4D8               	btfsc	status,2,c
   924  007E6A  D014               	goto	u790
   925  007E6C                     u740:
   926  007E6C  5001               	movf	getRoadState@a,w,c
   927  007E6E  1002               	iorwf	getRoadState@a+1,w,c
   928  007E70  A4D8               	btfss	status,2,c
   929  007E72  D012               	goto	l32
   930  007E74  5003               	movf	getRoadState@b,w,c
   931  007E76  1004               	iorwf	getRoadState@b+1,w,c
   932  007E78  A4D8               	btfss	status,2,c
   933  007E7A  D00E               	goto	l32
   934  007E7C  5005               	movf	getRoadState@c,w,c
   935  007E7E  1006               	iorwf	getRoadState@c+1,w,c
   936  007E80  A4D8               	btfss	status,2,c
   937  007E82  D00A               	goto	l32
   938  007E84  5007               	movf	getRoadState@d,w,c
   939  007E86  1008               	iorwf	getRoadState@d+1,w,c
   940  007E88  A4D8               	btfss	status,2,c
   941  007E8A  D006               	goto	l32
   942  007E8C  5009               	movf	getRoadState@e,w,c
   943  007E8E  100A               	iorwf	getRoadState@e+1,w,c
   944  007E90  A4D8               	btfss	status,2,c
   945  007E92  D002               	goto	l32
   946  007E94                     u790:
   947                           
   948                           ;main.c: 46: return off_track;
   949  007E94  0E01               	movlw	1
   950  007E96  0012               	return	
   951  007E98                     l32:
   952                           
   953                           ;main.c: 47: }
   954                           ;main.c: 49: if ( (c == 0
   955                           ;main.c: 50: && a == 1 && b == 1
   956                           ;main.c: 51: && d == 1 && e == 1)
   957                           ;main.c: 52: || (c == 1
   958                           ;main.c: 53: && a == 0 && b == 0
   959                           ;main.c: 54: && d == 0 && e == 0)) {
   960  007E98  5005               	movf	getRoadState@c,w,c
   961  007E9A  1006               	iorwf	getRoadState@c+1,w,c
   962  007E9C  A4D8               	btfss	status,2,c
   963  007E9E  D010               	goto	u840
   964  007EA0  0401               	decf	getRoadState@a,w,c
   965  007EA2  1002               	iorwf	getRoadState@a+1,w,c
   966  007EA4  A4D8               	btfss	status,2,c
   967  007EA6  D00C               	goto	u840
   968  007EA8  0403               	decf	getRoadState@b,w,c
   969  007EAA  1004               	iorwf	getRoadState@b+1,w,c
   970  007EAC  A4D8               	btfss	status,2,c
   971  007EAE  D008               	goto	u840
   972  007EB0  0407               	decf	getRoadState@d,w,c
   973  007EB2  1008               	iorwf	getRoadState@d+1,w,c
   974  007EB4  A4D8               	btfss	status,2,c
   975  007EB6  D004               	goto	u840
   976  007EB8  0409               	decf	getRoadState@e,w,c
   977  007EBA  100A               	iorwf	getRoadState@e+1,w,c
   978  007EBC  B4D8               	btfsc	status,2,c
   979  007EBE  D014               	goto	u890
   980  007EC0                     u840:
   981  007EC0  0405               	decf	getRoadState@c,w,c
   982  007EC2  1006               	iorwf	getRoadState@c+1,w,c
   983  007EC4  A4D8               	btfss	status,2,c
   984  007EC6  D012               	goto	l38
   985  007EC8  5001               	movf	getRoadState@a,w,c
   986  007ECA  1002               	iorwf	getRoadState@a+1,w,c
   987  007ECC  A4D8               	btfss	status,2,c
   988  007ECE  D00E               	goto	l38
   989  007ED0  5003               	movf	getRoadState@b,w,c
   990  007ED2  1004               	iorwf	getRoadState@b+1,w,c
   991  007ED4  A4D8               	btfss	status,2,c
   992  007ED6  D00A               	goto	l38
   993  007ED8  5007               	movf	getRoadState@d,w,c
   994  007EDA  1008               	iorwf	getRoadState@d+1,w,c
   995  007EDC  A4D8               	btfss	status,2,c
   996  007EDE  D006               	goto	l38
   997  007EE0  5009               	movf	getRoadState@e,w,c
   998  007EE2  100A               	iorwf	getRoadState@e+1,w,c
   999  007EE4  A4D8               	btfss	status,2,c
  1000  007EE6  D002               	goto	l38
  1001  007EE8                     u890:
  1002                           
  1003                           ;main.c: 55: return straight_line;
  1004  007EE8  0E02               	movlw	2
  1005  007EEA  0012               	return	
  1006  007EEC                     l38:
  1007                           
  1008                           ;main.c: 56: }
  1009                           ;main.c: 59: if (a == 1 && b == 0 && c == 1
  1010                           ;main.c: 60: && d == 1 && e == 1) {
  1011  007EEC  0401               	decf	getRoadState@a,w,c
  1012  007EEE  1002               	iorwf	getRoadState@a+1,w,c
  1013  007EF0  A4D8               	btfss	status,2,c
  1014  007EF2  D012               	goto	l43
  1015  007EF4  5003               	movf	getRoadState@b,w,c
  1016  007EF6  1004               	iorwf	getRoadState@b+1,w,c
  1017  007EF8  A4D8               	btfss	status,2,c
  1018  007EFA  D00E               	goto	l43
  1019  007EFC  0405               	decf	getRoadState@c,w,c
  1020  007EFE  1006               	iorwf	getRoadState@c+1,w,c
  1021  007F00  A4D8               	btfss	status,2,c
  1022  007F02  D00A               	goto	l43
  1023  007F04  0407               	decf	getRoadState@d,w,c
  1024  007F06  1008               	iorwf	getRoadState@d+1,w,c
  1025  007F08  A4D8               	btfss	status,2,c
  1026  007F0A  D006               	goto	l43
  1027  007F0C  0409               	decf	getRoadState@e,w,c
  1028  007F0E  100A               	iorwf	getRoadState@e+1,w,c
  1029  007F10  A4D8               	btfss	status,2,c
  1030  007F12  D002               	goto	l43
  1031                           
  1032                           ;main.c: 61: return off_right_little;
  1033  007F14  0E03               	movlw	3
  1034  007F16  0012               	return	
  1035  007F18                     l43:
  1036                           
  1037                           ;main.c: 62: }
  1038                           ;main.c: 63: if (a == 1 && b == 1 && c == 1
  1039                           ;main.c: 64: && d == 0 && e == 1) {
  1040  007F18  0401               	decf	getRoadState@a,w,c
  1041  007F1A  1002               	iorwf	getRoadState@a+1,w,c
  1042  007F1C  A4D8               	btfss	status,2,c
  1043  007F1E  D012               	goto	l44
  1044  007F20  0403               	decf	getRoadState@b,w,c
  1045  007F22  1004               	iorwf	getRoadState@b+1,w,c
  1046  007F24  A4D8               	btfss	status,2,c
  1047  007F26  D00E               	goto	l44
  1048  007F28  0405               	decf	getRoadState@c,w,c
  1049  007F2A  1006               	iorwf	getRoadState@c+1,w,c
  1050  007F2C  A4D8               	btfss	status,2,c
  1051  007F2E  D00A               	goto	l44
  1052  007F30  5007               	movf	getRoadState@d,w,c
  1053  007F32  1008               	iorwf	getRoadState@d+1,w,c
  1054  007F34  A4D8               	btfss	status,2,c
  1055  007F36  D006               	goto	l44
  1056  007F38  0409               	decf	getRoadState@e,w,c
  1057  007F3A  100A               	iorwf	getRoadState@e+1,w,c
  1058  007F3C  A4D8               	btfss	status,2,c
  1059  007F3E  D002               	goto	l44
  1060                           
  1061                           ;main.c: 65: return off_left_little;
  1062  007F40  0E05               	movlw	5
  1063  007F42  0012               	return	
  1064  007F44                     l44:
  1065                           
  1066                           ;main.c: 66: }
  1067                           ;main.c: 67: if (a == 0 && c == 1 && e == 1) {
  1068  007F44  5001               	movf	getRoadState@a,w,c
  1069  007F46  1002               	iorwf	getRoadState@a+1,w,c
  1070  007F48  A4D8               	btfss	status,2,c
  1071  007F4A  D00A               	goto	l45
  1072  007F4C  0405               	decf	getRoadState@c,w,c
  1073  007F4E  1006               	iorwf	getRoadState@c+1,w,c
  1074  007F50  A4D8               	btfss	status,2,c
  1075  007F52  D006               	goto	l45
  1076  007F54  0409               	decf	getRoadState@e,w,c
  1077  007F56  100A               	iorwf	getRoadState@e+1,w,c
  1078  007F58  A4D8               	btfss	status,2,c
  1079  007F5A  D002               	goto	l45
  1080                           
  1081                           ;main.c: 68: return off_right;
  1082  007F5C  0E04               	movlw	4
  1083  007F5E  0012               	return	
  1084  007F60                     l45:
  1085                           
  1086                           ;main.c: 69: }
  1087                           ;main.c: 70: if (a == 1 && c == 1 && e == 0) {
  1088  007F60  0401               	decf	getRoadState@a,w,c
  1089  007F62  1002               	iorwf	getRoadState@a+1,w,c
  1090  007F64  A4D8               	btfss	status,2,c
  1091  007F66  D00A               	goto	l46
  1092  007F68  0405               	decf	getRoadState@c,w,c
  1093  007F6A  1006               	iorwf	getRoadState@c+1,w,c
  1094  007F6C  A4D8               	btfss	status,2,c
  1095  007F6E  D006               	goto	l46
  1096  007F70  5009               	movf	getRoadState@e,w,c
  1097  007F72  100A               	iorwf	getRoadState@e+1,w,c
  1098  007F74  A4D8               	btfss	status,2,c
  1099  007F76  D002               	goto	l46
  1100                           
  1101                           ;main.c: 71: return off_left;
  1102  007F78  0E06               	movlw	6
  1103  007F7A  0012               	return	
  1104  007F7C                     l46:
  1105                           
  1106                           ;main.c: 72: }
  1107                           ;main.c: 75: if (a == 0 && b == 1
  1108                           ;main.c: 76: && d == 0 && e == 0) {
  1109  007F7C  5001               	movf	getRoadState@a,w,c
  1110  007F7E  1002               	iorwf	getRoadState@a+1,w,c
  1111  007F80  A4D8               	btfss	status,2,c
  1112  007F82  D00E               	goto	l47
  1113  007F84  0403               	decf	getRoadState@b,w,c
  1114  007F86  1004               	iorwf	getRoadState@b+1,w,c
  1115  007F88  A4D8               	btfss	status,2,c
  1116  007F8A  D00A               	goto	l47
  1117  007F8C  5007               	movf	getRoadState@d,w,c
  1118  007F8E  1008               	iorwf	getRoadState@d+1,w,c
  1119  007F90  A4D8               	btfss	status,2,c
  1120  007F92  D006               	goto	l47
  1121  007F94  5009               	movf	getRoadState@e,w,c
  1122  007F96  100A               	iorwf	getRoadState@e+1,w,c
  1123  007F98  A4D8               	btfss	status,2,c
  1124  007F9A  D002               	goto	l47
  1125                           
  1126                           ;main.c: 77: return off_right_little;
  1127  007F9C  0E03               	movlw	3
  1128  007F9E  0012               	return	
  1129  007FA0                     l47:
  1130                           
  1131                           ;main.c: 78: }
  1132                           ;main.c: 79: if (a == 0 && b == 0
  1133                           ;main.c: 80: && d == 1 && e == 0) {
  1134  007FA0  5001               	movf	getRoadState@a,w,c
  1135  007FA2  1002               	iorwf	getRoadState@a+1,w,c
  1136  007FA4  A4D8               	btfss	status,2,c
  1137  007FA6  D00E               	goto	l48
  1138  007FA8  5003               	movf	getRoadState@b,w,c
  1139  007FAA  1004               	iorwf	getRoadState@b+1,w,c
  1140  007FAC  A4D8               	btfss	status,2,c
  1141  007FAE  D00A               	goto	l48
  1142  007FB0  0407               	decf	getRoadState@d,w,c
  1143  007FB2  1008               	iorwf	getRoadState@d+1,w,c
  1144  007FB4  A4D8               	btfss	status,2,c
  1145  007FB6  D006               	goto	l48
  1146  007FB8  5009               	movf	getRoadState@e,w,c
  1147  007FBA  100A               	iorwf	getRoadState@e+1,w,c
  1148  007FBC  A4D8               	btfss	status,2,c
  1149  007FBE  D002               	goto	l48
  1150                           
  1151                           ;main.c: 81: return off_left_little;
  1152  007FC0  0E05               	movlw	5
  1153  007FC2  0012               	return	
  1154  007FC4                     l48:
  1155                           
  1156                           ;main.c: 82: }
  1157                           ;main.c: 83: if (a == 1 && c == 0 && e == 0) {
  1158  007FC4  0401               	decf	getRoadState@a,w,c
  1159  007FC6  1002               	iorwf	getRoadState@a+1,w,c
  1160  007FC8  A4D8               	btfss	status,2,c
  1161  007FCA  D00A               	goto	l49
  1162  007FCC  5005               	movf	getRoadState@c,w,c
  1163  007FCE  1006               	iorwf	getRoadState@c+1,w,c
  1164  007FD0  A4D8               	btfss	status,2,c
  1165  007FD2  D006               	goto	l49
  1166  007FD4  5009               	movf	getRoadState@e,w,c
  1167  007FD6  100A               	iorwf	getRoadState@e+1,w,c
  1168  007FD8  A4D8               	btfss	status,2,c
  1169  007FDA  D002               	goto	l49
  1170                           
  1171                           ;main.c: 84: return off_right;
  1172  007FDC  0E04               	movlw	4
  1173  007FDE  0012               	return	
  1174  007FE0                     l49:
  1175                           
  1176                           ;main.c: 85: }
  1177                           ;main.c: 86: if (a == 0 && c == 0 && e == 1) {
  1178  007FE0  5001               	movf	getRoadState@a,w,c
  1179  007FE2  1002               	iorwf	getRoadState@a+1,w,c
  1180  007FE4  A4D8               	btfss	status,2,c
  1181  007FE6  D00A               	goto	l50
  1182  007FE8  5005               	movf	getRoadState@c,w,c
  1183  007FEA  1006               	iorwf	getRoadState@c+1,w,c
  1184  007FEC  A4D8               	btfss	status,2,c
  1185  007FEE  D006               	goto	l50
  1186  007FF0  0409               	decf	getRoadState@e,w,c
  1187  007FF2  100A               	iorwf	getRoadState@e+1,w,c
  1188  007FF4  A4D8               	btfss	status,2,c
  1189  007FF6  D002               	goto	l50
  1190                           
  1191                           ;main.c: 87: return off_left;
  1192  007FF8  0E06               	movlw	6
  1193  007FFA  0012               	return	
  1194  007FFC                     l50:
  1195                           
  1196                           ;main.c: 88: }
  1197                           ;main.c: 90: return on_track;
  1198  007FFC  0E00               	movlw	0
  1199  007FFE  0012               	return	
  1200  008000                     __end_of_getRoadState:
  1201                           	opt stack 0
  1202                           tblptru	equ	0xFF8
  1203                           status	equ	0xFD8
  1204                           
  1205 ;; *************** function _accelerate *****************
  1206 ;; Defined at:
  1207 ;;		line 147 in file "main.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  2   67[None  ] int 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1224 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    1
  1228 ;; This function calls:
  1229 ;;		_wait00
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text8
  1236  007BAC                     __ptext8:
  1237                           	opt stack 0
  1238  007BAC                     _accelerate:
  1239                           	opt stack 29
  1240                           
  1241                           ;main.c: 148: PORTC=0x03;
  1242                           
  1243                           ;incstack = 0
  1244  007BAC  0E03               	movlw	3
  1245  007BAE  6E82               	movwf	3970,c	;volatile
  1246                           
  1247                           ;main.c: 149: wait00(60);
  1248  007BB0  0E00               	movlw	0
  1249  007BB2  6E02               	movwf	wait00@k+1,c
  1250  007BB4  0E3C               	movlw	60
  1251  007BB6  6E01               	movwf	wait00@k,c
  1252  007BB8  EC86  F03E         	call	_wait00	;wreg free
  1253                           
  1254                           ;main.c: 150: PORTC=0x02;
  1255  007BBC  0E02               	movlw	2
  1256  007BBE  6E82               	movwf	3970,c	;volatile
  1257                           
  1258                           ;main.c: 151: wait00(6);
  1259  007BC0  0E00               	movlw	0
  1260  007BC2  6E02               	movwf	wait00@k+1,c
  1261  007BC4  0E06               	movlw	6
  1262  007BC6  6E01               	movwf	wait00@k,c
  1263  007BC8  EC86  F03E         	call	_wait00	;wreg free
  1264                           
  1265                           ;main.c: 152: PORTC=0x00;
  1266  007BCC  0E00               	movlw	0
  1267  007BCE  6E82               	movwf	3970,c	;volatile
  1268                           
  1269                           ;main.c: 153: wait00(60);
  1270  007BD0  0E00               	movlw	0
  1271  007BD2  6E02               	movwf	wait00@k+1,c
  1272  007BD4  0E3C               	movlw	60
  1273  007BD6  6E01               	movwf	wait00@k,c
  1274  007BD8  EC86  F03E         	call	_wait00	;wreg free
  1275  007BDC  0012               	return		;funcret
  1276  007BDE                     __end_of_accelerate:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           status	equ	0xFD8
  1280                           
  1281 ;; *************** function _wait00 *****************
  1282 ;; Defined at:
  1283 ;;		line 10 in file "main.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;  k               2    0[COMRAM] short 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  i               2    5[COMRAM] short 
  1288 ;;  j               2    3[COMRAM] short 
  1289 ;; Return value:  Size  Location     Type
  1290 ;;                  2    0[COMRAM] int 
  1291 ;; Registers used:
  1292 ;;		wreg, status,2, status,0
  1293 ;; Tracked objects:
  1294 ;;		On entry : 0/0
  1295 ;;		On exit  : 0/0
  1296 ;;		Unchanged: 0/0
  1297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1298 ;;      Params:         2       0       0       0       0       0       0       0       0
  1299 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1300 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1301 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1302 ;;Total ram usage:        7 bytes
  1303 ;; Hardware stack levels used:    1
  1304 ;; This function calls:
  1305 ;;		Nothing
  1306 ;; This function is called by:
  1307 ;;		_turnLeft
  1308 ;;		_turnRight
  1309 ;;		_turnLeftSmall
  1310 ;;		_turnRightSmall
  1311 ;;		_straight
  1312 ;;		_accelerate
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text9
  1317  007D0C                     __ptext9:
  1318                           	opt stack 0
  1319  007D0C                     _wait00:
  1320                           	opt stack 29
  1321                           
  1322                           ;main.c: 13: short i;
  1323                           ;main.c: 14: short j;
  1324                           ;main.c: 15: for(j=0;j<k;j++){
  1325                           
  1326                           ;incstack = 0
  1327  007D0C  0E00               	movlw	0
  1328  007D0E  6E05               	movwf	wait00@j+1,c
  1329  007D10  0E00               	movlw	0
  1330  007D12  6E04               	movwf	wait00@j,c
  1331  007D14  D011               	goto	l21
  1332  007D16                     
  1333                           ;main.c: 16: for(i=0;i<300;i++){
  1334  007D16  0E00               	movlw	0
  1335  007D18  6E07               	movwf	wait00@i+1,c
  1336  007D1A  0E00               	movlw	0
  1337  007D1C  6E06               	movwf	wait00@i,c
  1338  007D1E                     l978:
  1339  007D1E  BE07               	btfsc	wait00@i+1,7,c
  1340  007D20  D006               	goto	l23
  1341  007D22  0E2C               	movlw	44
  1342  007D24  5C06               	subwf	wait00@i,w,c
  1343  007D26  0E01               	movlw	1
  1344  007D28  5807               	subwfb	wait00@i+1,w,c
  1345  007D2A  B0D8               	btfsc	status,0,c
  1346  007D2C  D003               	goto	u680
  1347  007D2E                     l23:
  1348  007D2E  4A06               	infsnz	wait00@i,f,c
  1349  007D30  2A07               	incf	wait00@i+1,f,c
  1350  007D32  D7F5               	goto	l978
  1351  007D34                     u680:
  1352  007D34  4A04               	infsnz	wait00@j,f,c
  1353  007D36  2A05               	incf	wait00@j+1,f,c
  1354  007D38                     l21:
  1355  007D38  5001               	movf	wait00@k,w,c
  1356  007D3A  5C04               	subwf	wait00@j,w,c
  1357  007D3C  5005               	movf	wait00@j+1,w,c
  1358  007D3E  0A80               	xorlw	128
  1359  007D40  6E03               	movwf	??_wait00& (0+255),c
  1360  007D42  5002               	movf	wait00@k+1,w,c
  1361  007D44  0A80               	xorlw	128
  1362  007D46  5803               	subwfb	??_wait00& (0+255),w,c
  1363  007D48  B0D8               	btfsc	status,0,c
  1364  007D4A  0012               	return	
  1365  007D4C  D7E4               	goto	l22
  1366  007D4E                     __end_of_wait00:
  1367                           	opt stack 0
  1368  0000                     tblptru	equ	0xFF8
  1369                           status	equ	0xFD8
  1370                           tblptru	equ	0xFF8
  1371                           status	equ	0xFD8
  1372                           
  1373                           	psect	rparam
  1374  0000                     tblptru	equ	0xFF8
  1375                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_getRoadState
    _turnRightSmall->_wait00
    _turnRight->_wait00
    _turnLeftSmall->_wait00
    _turnLeft->_wait00
    _straight->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   10354
                                             10 COMRAM     7     7      0
                         _accelerate
                       _getRoadState
                           _led_sens
                           _straight
                           _turnLeft
                      _turnLeftSmall
                          _turnRight
                     _turnRightSmall
 ---------------------------------------------------------------------------------
 (1) _turnRightSmall                                       0     0      0    1460
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            0     0      0    1460
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeftSmall                                        0     0      0    1460
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             0     0      0    1460
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1460
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getRoadState                                        10     0     10    1480
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1460
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1460
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _accelerate
     _wait00
   _getRoadState
   _led_sens
   _straight
     _wait00
   _turnLeft
     _wait00
   _turnLeftSmall
     _wait00
   _turnRight
     _wait00
   _turnRightSmall
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 15:52:08 2018

                     l21 7D38                       l22 7D16                       l23 7D2E  
                     l32 7E98                       l50 7FFC                       l43 7F18  
                     l44 7F44                       l45 7F60                       l46 7F7C  
                     l38 7EEC                       l47 7FA0                       l48 7FC4  
                     l80 7DF8                       l49 7FE0                       l73 7D6E  
                     l74 7D6A                       l83 7DFE                       l84 7E04  
                     l76 7D76                       l85 7E0A                       l78 7E1C  
                     l86 7E10                       l87 7E16                       l79 7DEA  
                     u45 7CE0                       u55 7CEA                       u47 7CE2  
                     u65 7CF4                       u57 7CEC                       u75 7CFE  
                     u67 7CF6                       u85 7D08                       u77 7D00  
                     u87 7D0A                      l978 7D1E                      u740 7E6C  
                    u680 7D34                      u840 7EC0                      u790 7E94  
                    u890 7EE8         ??_turnRightSmall 0008                     u1210 7D88  
                   u1220 7D9A                     u1230 7DAC                     u1240 7DBE  
                   u1250 7DD0                     u1218 7D8A                     u1228 7D9C  
                   u1238 7DAE                     u1248 7DC0                     u1258 7DD2  
                   _main 7D4E                     start 2000             ___param_bank 000000  
                  ?_main 0001                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    status 000FD8          __initialization 2008  
           __end_of_main 7E44                   ??_main 000B            __activetblptr 000002  
   __end_of_getRoadState 8000                   _ADCON1 000FC1   __size_of_turnLeftSmall 0032  
       __end_of_led_sens 7D0C                   _wait00 7D0C                   tblptru 000FF8  
       __end_of_straight 7C10         __end_of_turnLeft 7C42               __accesstop 0060  
__end_of__initialization 2008            ___rparam_used 000001           __pcstackCOMRAM 0001  
             _accelerate 7BAC            _turnLeftSmall 7C42                  ?_wait00 0001  
  __size_of_getRoadState 01BC           ?_turnLeftSmall 0001                ?_led_sens 0001  
     __size_of_turnRight 0032                  __Hparam 0000                  __Lparam 0000  
           _getRoadState 7E44              ?_accelerate 0001                ?_straight 0001  
                __pcinit 2008                  __ramtop 0800          __size_of_wait00 0042  
              ?_turnLeft 0001                  __ptext0 7D4E                  __ptext1 7CA6  
                __ptext2 7C74                  __ptext3 7C42                  __ptext4 7C10  
                __ptext5 7BDE                  __ptext6 7CD8                  __ptext7 7E44  
                __ptext8 7BAC                  __ptext9 7D0C           main@road_state 0011  
   end_of_initialization 2008               ??_led_sens 0001            __Lmediumconst 0000  
                wait00@i 0006                  wait00@j 0004                  wait00@k 0001  
__size_of_turnRightSmall 0032               ??_straight 0008               ??_turnLeft 0008  
        ??_turnLeftSmall 0008                _PORTAbits 000F80                _PORTBbits 000F81  
      __end_of_turnRight 7CA6      __size_of_accelerate 0032           __end_of_wait00 7D4E  
    start_initialization 2008  main@previous_road_state 0010                 ??_wait00 0003  
      __size_of_led_sens 0034           _turnRightSmall 7CA6             ??_accelerate 0008  
      __size_of_straight 0032        __size_of_turnLeft 0032       __end_of_accelerate 7BDE  
 __end_of_turnRightSmall 7CD8                _turnRight 7C74          ?_turnRightSmall 0001  
               __Hrparam 0000                 __Lrparam 0000    __end_of_turnLeftSmall 7C74  
             ?_turnRight 0001                 _led_sens 7CD8            __size_of_main 00F6  
          getRoadState@a 0001            getRoadState@b 0003            getRoadState@c 0005  
          getRoadState@d 0007            getRoadState@e 0009                 _straight 7BDE  
               _turnLeft 7C10            ?_getRoadState 0001              ??_turnRight 0008  
         ??_getRoadState 000B  
