

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 21:40:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2553 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _PORTB	set	3969
    55  0000                     _PORTA	set	3968
    56  0000                     _TRISC	set	3988
    57  0000                     _TRISB	set	3987
    58  0000                     _TRISA	set	3986
    59  0000                     _ADCON1	set	4033
    60  0000                     _PORTC	set	3970
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63                           
    64                           ; #config settings
    65                           
    66                           	psect	cinit
    67  002008                     __pcinit:
    68                           	opt stack 0
    69  002008                     start_initialization:
    70                           	opt stack 0
    71  002008                     __initialization:
    72                           	opt stack 0
    73  002008                     end_of_initialization:
    74                           	opt stack 0
    75  002008                     __end_of__initialization:
    76                           	opt stack 0
    77  002008  0E00               	movlw	low (__Lmediumconst shr (0+16))
    78  00200A  6EF8               	movwf	tblptru,c
    79  00200C  0100               	movlb	0
    80  00200E  EFA7  F03E         	goto	_main	;jump to C main() function
    81                           tblptru	equ	0xFF8
    82                           
    83                           	psect	cstackCOMRAM
    84  000001                     __pcstackCOMRAM:
    85                           	opt stack 0
    86  000001                     wait00@k:
    87                           	opt stack 0
    88  000001                     getRoadState@a:
    89                           	opt stack 0
    90                           
    91                           ; 2 bytes @ 0x0
    92  000001                     	ds	2
    93  000003                     ??_wait00:
    94  000003                     getRoadState@b:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x2
    98  000003                     	ds	1
    99  000004                     wait00@j:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x3
   103  000004                     	ds	1
   104  000005                     getRoadState@c:
   105                           	opt stack 0
   106                           
   107                           ; 2 bytes @ 0x4
   108  000005                     	ds	1
   109  000006                     wait00@i:
   110                           	opt stack 0
   111                           
   112                           ; 2 bytes @ 0x5
   113  000006                     	ds	1
   114  000007                     getRoadState@d:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x6
   118  000007                     	ds	1
   119  000008                     
   120                           ; 1 bytes @ 0x7
   121  000008                     	ds	1
   122  000009                     getRoadState@e:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x8
   126  000009                     	ds	2
   127  00000B                     ??_main:
   128                           
   129                           ; 1 bytes @ 0xA
   130  00000B                     	ds	5
   131  000010                     main@previous_road_state:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0xF
   135  000010                     	ds	1
   136  000011                     main@road_state:
   137                           	opt stack 0
   138                           
   139                           ; 1 bytes @ 0x10
   140  000011                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           
   143 ;;
   144 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   145 ;;
   146 ;; *************** function _main *****************
   147 ;; Defined at:
   148 ;;		line 154 in file "main.c"
   149 ;; Parameters:    Size  Location     Type
   150 ;;		None
   151 ;; Auto vars:     Size  Location     Type
   152 ;;  road_state      1   16[COMRAM] enum E3329
   153 ;;  previous_roa    1   15[COMRAM] enum E3329
   154 ;; Return value:  Size  Location     Type
   155 ;;                  2   72[None  ] int 
   156 ;; Registers used:
   157 ;;		wreg, status,2, status,0, cstack
   158 ;; Tracked objects:
   159 ;;		On entry : 0/0
   160 ;;		On exit  : 0/0
   161 ;;		Unchanged: 0/0
   162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   163 ;;      Params:         0       0       0       0       0       0       0       0       0
   164 ;;      Locals:         2       0       0       0       0       0       0       0       0
   165 ;;      Temps:          5       0       0       0       0       0       0       0       0
   166 ;;      Totals:         7       0       0       0       0       0       0       0       0
   167 ;;Total ram usage:        7 bytes
   168 ;; Hardware stack levels required when called:    2
   169 ;; This function calls:
   170 ;;		_accelerate
   171 ;;		_getRoadState
   172 ;;		_led_sens
   173 ;;		_straight
   174 ;;		_turnLeft
   175 ;;		_turnLeftSmall
   176 ;;		_turnRight
   177 ;;		_turnRightSmall
   178 ;; This function is called by:
   179 ;;		Startup code after reset
   180 ;; This function uses a non-reentrant model
   181 ;;
   182                           
   183                           	psect	text0
   184  007D4E                     __ptext0:
   185                           	opt stack 0
   186  007D4E                     _main:
   187                           	opt stack 29
   188                           
   189                           ;main.c: 157: ADCON1 = 0x0F;
   190                           
   191                           ;incstack = 0
   192  007D4E  0E0F               	movlw	15
   193  007D50  6EC1               	movwf	4033,c	;volatile
   194                           
   195                           ;main.c: 160: TRISA = 0x20;
   196  007D52  0E20               	movlw	32
   197  007D54  6E92               	movwf	3986,c	;volatile
   198                           
   199                           ;main.c: 161: TRISB = 0xFF;
   200  007D56  6893               	setf	3987,c	;volatile
   201                           
   202                           ;main.c: 162: TRISC = 0x00;
   203  007D58  0E00               	movlw	0
   204  007D5A  6E94               	movwf	3988,c	;volatile
   205                           
   206                           ;main.c: 165: PORTA = 0x00;
   207  007D5C  0E00               	movlw	0
   208  007D5E  6E80               	movwf	3968,c	;volatile
   209                           
   210                           ;main.c: 166: PORTB = 0x00;
   211  007D60  0E00               	movlw	0
   212  007D62  6E81               	movwf	3969,c	;volatile
   213                           
   214                           ;main.c: 167: PORTC = 0x00;
   215  007D64  0E00               	movlw	0
   216  007D66  6E82               	movwf	3970,c	;volatile
   217                           
   218                           ;main.c: 170: while(PORTAbits.RA5==1){
   219  007D68  D002               	goto	l73
   220  007D6A                     
   221                           ;main.c: 171: led_sens();
   222  007D6A  EC6C  F03E         	call	_led_sens	;wreg free
   223  007D6E                     l73:
   224  007D6E  BA80               	btfsc	3968,5,c	;volatile
   225  007D70  D7FC               	goto	l74
   226                           
   227                           ;main.c: 172: }
   228                           ;main.c: 174: enum road_state_codes road_state = on_track;
   229  007D72  0E00               	movlw	0
   230  007D74  6E11               	movwf	main@road_state,c
   231  007D76                     
   232                           ;main.c: 179: led_sens();
   233  007D76  EC6C  F03E         	call	_led_sens	;wreg free
   234                           
   235                           ;main.c: 181: previous_road_state = road_state;
   236  007D7A  C011  F010         	movff	main@road_state,main@previous_road_state
   237                           
   238                           ;main.c: 182: road_state = getRoadState(
   239                           ;main.c: 183: PORTBbits.RB0, PORTBbits.RB1, PORTBbits.RB2,
   240                           ;main.c: 184: PORTBbits.RB3, PORTBbits.RB4
   241                           ;main.c: 185: );
   242  007D7E  A081               	btfss	3969,0,c	;volatile
   243  007D80  D003               	goto	u1210
   244  007D82  6A0B               	clrf	??_main& (0+255),c
   245  007D84  2A0B               	incf	??_main& (0+255),f,c
   246  007D86  D001               	goto	u1218
   247  007D88                     u1210:
   248  007D88  6A0B               	clrf	??_main& (0+255),c
   249  007D8A                     u1218:
   250  007D8A  500B               	movf	??_main,w,c
   251  007D8C  6E01               	movwf	getRoadState@a,c
   252  007D8E  6A02               	clrf	getRoadState@a+1,c
   253  007D90  A281               	btfss	3969,1,c	;volatile
   254  007D92  D003               	goto	u1220
   255  007D94  6A0C               	clrf	(??_main+1)& (0+255),c
   256  007D96  2A0C               	incf	(??_main+1)& (0+255),f,c
   257  007D98  D001               	goto	u1228
   258  007D9A                     u1220:
   259  007D9A  6A0C               	clrf	(??_main+1)& (0+255),c
   260  007D9C                     u1228:
   261  007D9C  500C               	movf	??_main+1,w,c
   262  007D9E  6E03               	movwf	getRoadState@b,c
   263  007DA0  6A04               	clrf	getRoadState@b+1,c
   264  007DA2  A481               	btfss	3969,2,c	;volatile
   265  007DA4  D003               	goto	u1230
   266  007DA6  6A0D               	clrf	(??_main+2)& (0+255),c
   267  007DA8  2A0D               	incf	(??_main+2)& (0+255),f,c
   268  007DAA  D001               	goto	u1238
   269  007DAC                     u1230:
   270  007DAC  6A0D               	clrf	(??_main+2)& (0+255),c
   271  007DAE                     u1238:
   272  007DAE  500D               	movf	??_main+2,w,c
   273  007DB0  6E05               	movwf	getRoadState@c,c
   274  007DB2  6A06               	clrf	getRoadState@c+1,c
   275  007DB4  A681               	btfss	3969,3,c	;volatile
   276  007DB6  D003               	goto	u1240
   277  007DB8  6A0E               	clrf	(??_main+3)& (0+255),c
   278  007DBA  2A0E               	incf	(??_main+3)& (0+255),f,c
   279  007DBC  D001               	goto	u1248
   280  007DBE                     u1240:
   281  007DBE  6A0E               	clrf	(??_main+3)& (0+255),c
   282  007DC0                     u1248:
   283  007DC0  500E               	movf	??_main+3,w,c
   284  007DC2  6E07               	movwf	getRoadState@d,c
   285  007DC4  6A08               	clrf	getRoadState@d+1,c
   286  007DC6  A881               	btfss	3969,4,c	;volatile
   287  007DC8  D003               	goto	u1250
   288  007DCA  6A0F               	clrf	(??_main+4)& (0+255),c
   289  007DCC  2A0F               	incf	(??_main+4)& (0+255),f,c
   290  007DCE  D001               	goto	u1258
   291  007DD0                     u1250:
   292  007DD0  6A0F               	clrf	(??_main+4)& (0+255),c
   293  007DD2                     u1258:
   294  007DD2  500F               	movf	??_main+4,w,c
   295  007DD4  6E09               	movwf	getRoadState@e,c
   296  007DD6  6A0A               	clrf	getRoadState@e+1,c
   297  007DD8  EC22  F03F         	call	_getRoadState	;wreg free
   298  007DDC  6E11               	movwf	main@road_state,c
   299                           
   300                           ;main.c: 187: if (road_state == off_track)
   301  007DDE  0411               	decf	main@road_state,w,c
   302  007DE0  A4D8               	btfss	status,2,c
   303  007DE2  D01C               	goto	l78
   304                           
   305                           ;main.c: 188: road_state = previous_road_state;
   306  007DE4  C010  F011         	movff	main@previous_road_state,main@road_state
   307                           
   308                           ;main.c: 190: switch (road_state) {
   309  007DE8  D019               	goto	l78
   310  007DEA                     
   311                           ;main.c: 192: if (previous_road_state == straight_line)
   312  007DEA  0E02               	movlw	2
   313  007DEC  1810               	xorwf	main@previous_road_state,w,c
   314  007DEE  A4D8               	btfss	status,2,c
   315  007DF0  D003               	goto	l80
   316                           
   317                           ;main.c: 193: accelerate();
   318  007DF2  EC08  F03E         	call	_accelerate	;wreg free
   319  007DF6  D7BF               	goto	l76
   320  007DF8                     l80:
   321                           
   322                           ;main.c: 194: else
   323                           ;main.c: 195: straight();
   324  007DF8  EC21  F03E         	call	_straight	;wreg free
   325                           
   326                           ;main.c: 196: break;
   327  007DFC  D7BC               	goto	l76
   328  007DFE                     
   329                           ;main.c: 198: turnRightSmall();
   330  007DFE  EC53  F03E         	call	_turnRightSmall	;wreg free
   331                           
   332                           ;main.c: 199: break;
   333  007E02  D7B9               	goto	l76
   334  007E04                     
   335                           ;main.c: 201: turnLeftSmall();
   336  007E04  EC3A  F03E         	call	_turnLeftSmall	;wreg free
   337                           
   338                           ;main.c: 202: break;
   339  007E08  D7B6               	goto	l76
   340  007E0A                     
   341                           ;main.c: 204: turnRight();
   342  007E0A  ECF7  F03D         	call	_turnRight	;wreg free
   343                           
   344                           ;main.c: 205: break;
   345  007E0E  D7B3               	goto	l76
   346  007E10                     
   347                           ;main.c: 207: turnLeft();
   348  007E10  ECE6  F03D         	call	_turnLeft	;wreg free
   349                           
   350                           ;main.c: 208: break;
   351  007E14  D7B0               	goto	l76
   352  007E16                     
   353                           ;main.c: 210: straight();
   354  007E16  EC21  F03E         	call	_straight	;wreg free
   355                           
   356                           ;main.c: 212: }
   357                           
   358                           ;main.c: 211: break;
   359  007E1A  D7AD               	goto	l76
   360  007E1C                     l78:
   361  007E1C  5011               	movf	main@road_state,w,c
   362                           
   363                           ; Switch size 1, requested type "space"
   364                           ; Number of cases is 6, Range of values is 0 to 6
   365                           ; switch strategies available:
   366                           ; Name         Instructions Cycles
   367                           ; simple_byte           19    10 (average)
   368                           ;	Chosen strategy is simple_byte
   369  007E1E  0A00               	xorlw	0	; case 0
   370  007E20  B4D8               	btfsc	status,2,c
   371  007E22  D7F9               	goto	l87
   372  007E24  0A02               	xorlw	2	; case 2
   373  007E26  B4D8               	btfsc	status,2,c
   374  007E28  D7E0               	goto	l79
   375  007E2A  0A01               	xorlw	1	; case 3
   376  007E2C  B4D8               	btfsc	status,2,c
   377  007E2E  D7EA               	goto	l84
   378  007E30  0A07               	xorlw	7	; case 4
   379  007E32  B4D8               	btfsc	status,2,c
   380  007E34  D7ED               	goto	l86
   381  007E36  0A01               	xorlw	1	; case 5
   382  007E38  B4D8               	btfsc	status,2,c
   383  007E3A  D7E1               	goto	l83
   384  007E3C  0A03               	xorlw	3	; case 6
   385  007E3E  B4D8               	btfsc	status,2,c
   386  007E40  D7E4               	goto	l85
   387  007E42  D799               	goto	l76
   388  007E44                     __end_of_main:
   389                           	opt stack 0
   390                           tblptru	equ	0xFF8
   391                           status	equ	0xFD8
   392                           
   393 ;; *************** function _turnRightSmall *****************
   394 ;; Defined at:
   395 ;;		line 125 in file "main.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;		None
   398 ;; Auto vars:     Size  Location     Type
   399 ;;		None
   400 ;; Return value:  Size  Location     Type
   401 ;;                  2   61[None  ] int 
   402 ;; Registers used:
   403 ;;		wreg, status,2, status,0, cstack
   404 ;; Tracked objects:
   405 ;;		On entry : 0/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   409 ;;      Params:         0       0       0       0       0       0       0       0       0
   410 ;;      Locals:         0       0       0       0       0       0       0       0       0
   411 ;;      Temps:          0       0       0       0       0       0       0       0       0
   412 ;;      Totals:         0       0       0       0       0       0       0       0       0
   413 ;;Total ram usage:        0 bytes
   414 ;; Hardware stack levels used:    1
   415 ;; Hardware stack levels required when called:    1
   416 ;; This function calls:
   417 ;;		_wait00
   418 ;; This function is called by:
   419 ;;		_main
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           	psect	text1
   424  007CA6                     __ptext1:
   425                           	opt stack 0
   426  007CA6                     _turnRightSmall:
   427                           	opt stack 29
   428                           
   429                           ;main.c: 126: PORTC=0x03;
   430                           
   431                           ;incstack = 0
   432  007CA6  0E03               	movlw	3
   433  007CA8  6E82               	movwf	3970,c	;volatile
   434                           
   435                           ;main.c: 127: wait00(5);
   436  007CAA  0E00               	movlw	0
   437  007CAC  6E02               	movwf	wait00@k+1,c
   438  007CAE  0E05               	movlw	5
   439  007CB0  6E01               	movwf	wait00@k,c
   440  007CB2  EC86  F03E         	call	_wait00	;wreg free
   441                           
   442                           ;main.c: 128: PORTC=0x01;
   443  007CB6  0E01               	movlw	1
   444  007CB8  6E82               	movwf	3970,c	;volatile
   445                           
   446                           ;main.c: 129: wait00(40);
   447  007CBA  0E00               	movlw	0
   448  007CBC  6E02               	movwf	wait00@k+1,c
   449  007CBE  0E28               	movlw	40
   450  007CC0  6E01               	movwf	wait00@k,c
   451  007CC2  EC86  F03E         	call	_wait00	;wreg free
   452                           
   453                           ;main.c: 130: PORTC = 0x00;
   454  007CC6  0E00               	movlw	0
   455  007CC8  6E82               	movwf	3970,c	;volatile
   456                           
   457                           ;main.c: 131: wait00(30);
   458  007CCA  0E00               	movlw	0
   459  007CCC  6E02               	movwf	wait00@k+1,c
   460  007CCE  0E1E               	movlw	30
   461  007CD0  6E01               	movwf	wait00@k,c
   462  007CD2  EC86  F03E         	call	_wait00	;wreg free
   463  007CD6  0012               	return		;funcret
   464  007CD8                     __end_of_turnRightSmall:
   465                           	opt stack 0
   466                           tblptru	equ	0xFF8
   467                           status	equ	0xFD8
   468                           
   469 ;; *************** function _turnRight *****************
   470 ;; Defined at:
   471 ;;		line 108 in file "main.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;                  2   55[None  ] int 
   478 ;; Registers used:
   479 ;;		wreg, status,2, status,0, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   485 ;;      Params:         0       0       0       0       0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0       0       0
   488 ;;      Totals:         0       0       0       0       0       0       0       0       0
   489 ;;Total ram usage:        0 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; Hardware stack levels required when called:    1
   492 ;; This function calls:
   493 ;;		_wait00
   494 ;; This function is called by:
   495 ;;		_main
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text2
   500  007BEE                     __ptext2:
   501                           	opt stack 0
   502  007BEE                     _turnRight:
   503                           	opt stack 29
   504                           
   505                           ;main.c: 109: PORTC=0x01;
   506                           
   507                           ;incstack = 0
   508  007BEE  0E01               	movlw	1
   509  007BF0  6E82               	movwf	3970,c	;volatile
   510                           
   511                           ;main.c: 110: wait00(40);
   512  007BF2  0E00               	movlw	0
   513  007BF4  6E02               	movwf	wait00@k+1,c
   514  007BF6  0E28               	movlw	40
   515  007BF8  6E01               	movwf	wait00@k,c
   516  007BFA  EC86  F03E         	call	_wait00	;wreg free
   517                           
   518                           ;main.c: 111: PORTC = 0x00;
   519  007BFE  0E00               	movlw	0
   520  007C00  6E82               	movwf	3970,c	;volatile
   521                           
   522                           ;main.c: 112: wait00(55);
   523  007C02  0E00               	movlw	0
   524  007C04  6E02               	movwf	wait00@k+1,c
   525  007C06  0E37               	movlw	55
   526  007C08  6E01               	movwf	wait00@k,c
   527  007C0A  EC86  F03E         	call	_wait00	;wreg free
   528  007C0E  0012               	return		;funcret
   529  007C10                     __end_of_turnRight:
   530                           	opt stack 0
   531                           tblptru	equ	0xFF8
   532                           status	equ	0xFD8
   533                           
   534 ;; *************** function _turnLeftSmall *****************
   535 ;; Defined at:
   536 ;;		line 116 in file "main.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  2   58[None  ] int 
   543 ;; Registers used:
   544 ;;		wreg, status,2, status,0, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   550 ;;      Params:         0       0       0       0       0       0       0       0       0
   551 ;;      Locals:         0       0       0       0       0       0       0       0       0
   552 ;;      Temps:          0       0       0       0       0       0       0       0       0
   553 ;;      Totals:         0       0       0       0       0       0       0       0       0
   554 ;;Total ram usage:        0 bytes
   555 ;; Hardware stack levels used:    1
   556 ;; Hardware stack levels required when called:    1
   557 ;; This function calls:
   558 ;;		_wait00
   559 ;; This function is called by:
   560 ;;		_main
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text3
   565  007C74                     __ptext3:
   566                           	opt stack 0
   567  007C74                     _turnLeftSmall:
   568                           	opt stack 29
   569                           
   570                           ;main.c: 117: PORTC=0x03;
   571                           
   572                           ;incstack = 0
   573  007C74  0E03               	movlw	3
   574  007C76  6E82               	movwf	3970,c	;volatile
   575                           
   576                           ;main.c: 118: wait00(5);
   577  007C78  0E00               	movlw	0
   578  007C7A  6E02               	movwf	wait00@k+1,c
   579  007C7C  0E05               	movlw	5
   580  007C7E  6E01               	movwf	wait00@k,c
   581  007C80  EC86  F03E         	call	_wait00	;wreg free
   582                           
   583                           ;main.c: 119: PORTC=0x02;
   584  007C84  0E02               	movlw	2
   585  007C86  6E82               	movwf	3970,c	;volatile
   586                           
   587                           ;main.c: 120: wait00(50);
   588  007C88  0E00               	movlw	0
   589  007C8A  6E02               	movwf	wait00@k+1,c
   590  007C8C  0E32               	movlw	50
   591  007C8E  6E01               	movwf	wait00@k,c
   592  007C90  EC86  F03E         	call	_wait00	;wreg free
   593                           
   594                           ;main.c: 121: PORTC = 0x00;
   595  007C94  0E00               	movlw	0
   596  007C96  6E82               	movwf	3970,c	;volatile
   597                           
   598                           ;main.c: 122: wait00(30);
   599  007C98  0E00               	movlw	0
   600  007C9A  6E02               	movwf	wait00@k+1,c
   601  007C9C  0E1E               	movlw	30
   602  007C9E  6E01               	movwf	wait00@k,c
   603  007CA0  EC86  F03E         	call	_wait00	;wreg free
   604  007CA4  0012               	return		;funcret
   605  007CA6                     __end_of_turnLeftSmall:
   606                           	opt stack 0
   607                           tblptru	equ	0xFF8
   608                           status	equ	0xFD8
   609                           
   610 ;; *************** function _turnLeft *****************
   611 ;; Defined at:
   612 ;;		line 101 in file "main.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;                  2   52[None  ] int 
   619 ;; Registers used:
   620 ;;		wreg, status,2, status,0, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   626 ;;      Params:         0       0       0       0       0       0       0       0       0
   627 ;;      Locals:         0       0       0       0       0       0       0       0       0
   628 ;;      Temps:          0       0       0       0       0       0       0       0       0
   629 ;;      Totals:         0       0       0       0       0       0       0       0       0
   630 ;;Total ram usage:        0 bytes
   631 ;; Hardware stack levels used:    1
   632 ;; Hardware stack levels required when called:    1
   633 ;; This function calls:
   634 ;;		_wait00
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text4
   641  007BCC                     __ptext4:
   642                           	opt stack 0
   643  007BCC                     _turnLeft:
   644                           	opt stack 29
   645                           
   646                           ;main.c: 102: PORTC=0x02;
   647                           
   648                           ;incstack = 0
   649  007BCC  0E02               	movlw	2
   650  007BCE  6E82               	movwf	3970,c	;volatile
   651                           
   652                           ;main.c: 103: wait00(50);
   653  007BD0  0E00               	movlw	0
   654  007BD2  6E02               	movwf	wait00@k+1,c
   655  007BD4  0E32               	movlw	50
   656  007BD6  6E01               	movwf	wait00@k,c
   657  007BD8  EC86  F03E         	call	_wait00	;wreg free
   658                           
   659                           ;main.c: 104: PORTC = 0x00;
   660  007BDC  0E00               	movlw	0
   661  007BDE  6E82               	movwf	3970,c	;volatile
   662                           
   663                           ;main.c: 105: wait00(50);
   664  007BE0  0E00               	movlw	0
   665  007BE2  6E02               	movwf	wait00@k+1,c
   666  007BE4  0E32               	movlw	50
   667  007BE6  6E01               	movwf	wait00@k,c
   668  007BE8  EC86  F03E         	call	_wait00	;wreg free
   669  007BEC  0012               	return		;funcret
   670  007BEE                     __end_of_turnLeft:
   671                           	opt stack 0
   672                           tblptru	equ	0xFF8
   673                           status	equ	0xFD8
   674                           
   675 ;; *************** function _straight *****************
   676 ;; Defined at:
   677 ;;		line 135 in file "main.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;		None
   682 ;; Return value:  Size  Location     Type
   683 ;;                  2   64[None  ] int 
   684 ;; Registers used:
   685 ;;		wreg, status,2, status,0, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : 0/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   691 ;;      Params:         0       0       0       0       0       0       0       0       0
   692 ;;      Locals:         0       0       0       0       0       0       0       0       0
   693 ;;      Temps:          0       0       0       0       0       0       0       0       0
   694 ;;      Totals:         0       0       0       0       0       0       0       0       0
   695 ;;Total ram usage:        0 bytes
   696 ;; Hardware stack levels used:    1
   697 ;; Hardware stack levels required when called:    1
   698 ;; This function calls:
   699 ;;		_wait00
   700 ;; This function is called by:
   701 ;;		_main
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text5
   706  007C42                     __ptext5:
   707                           	opt stack 0
   708  007C42                     _straight:
   709                           	opt stack 29
   710                           
   711                           ;main.c: 136: PORTC=0x03;
   712                           
   713                           ;incstack = 0
   714  007C42  0E03               	movlw	3
   715  007C44  6E82               	movwf	3970,c	;volatile
   716                           
   717                           ;main.c: 137: wait00(48);
   718  007C46  0E00               	movlw	0
   719  007C48  6E02               	movwf	wait00@k+1,c
   720  007C4A  0E30               	movlw	48
   721  007C4C  6E01               	movwf	wait00@k,c
   722  007C4E  EC86  F03E         	call	_wait00	;wreg free
   723                           
   724                           ;main.c: 138: PORTC=0x02;
   725  007C52  0E02               	movlw	2
   726  007C54  6E82               	movwf	3970,c	;volatile
   727                           
   728                           ;main.c: 139: wait00(4);
   729  007C56  0E00               	movlw	0
   730  007C58  6E02               	movwf	wait00@k+1,c
   731  007C5A  0E04               	movlw	4
   732  007C5C  6E01               	movwf	wait00@k,c
   733  007C5E  EC86  F03E         	call	_wait00	;wreg free
   734                           
   735                           ;main.c: 140: PORTC=0x00;
   736  007C62  0E00               	movlw	0
   737  007C64  6E82               	movwf	3970,c	;volatile
   738                           
   739                           ;main.c: 141: wait00(60);
   740  007C66  0E00               	movlw	0
   741  007C68  6E02               	movwf	wait00@k+1,c
   742  007C6A  0E3C               	movlw	60
   743  007C6C  6E01               	movwf	wait00@k,c
   744  007C6E  EC86  F03E         	call	_wait00	;wreg free
   745  007C72  0012               	return		;funcret
   746  007C74                     __end_of_straight:
   747                           	opt stack 0
   748                           tblptru	equ	0xFF8
   749                           status	equ	0xFD8
   750                           
   751 ;; *************** function _led_sens *****************
   752 ;; Defined at:
   753 ;;		line 24 in file "main.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  2   28[None  ] int 
   760 ;; Registers used:
   761 ;;		None
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   767 ;;      Params:         0       0       0       0       0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; This function calls:
   774 ;;		Nothing
   775 ;; This function is called by:
   776 ;;		_main
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text6
   781  007CD8                     __ptext6:
   782                           	opt stack 0
   783  007CD8                     _led_sens:
   784                           	opt stack 30
   785                           
   786                           ;main.c: 26: PORTAbits.RA0 = PORTBbits.RB0;
   787                           
   788                           ;incstack = 0
   789  007CD8  A081               	btfss	3969,0,c	;volatile
   790  007CDA  D002               	bra	u45
   791  007CDC  8080               	bsf	3968,0,c	;volatile
   792  007CDE  D001               	bra	u47
   793  007CE0                     u45:
   794  007CE0  9080               	bcf	3968,0,c	;volatile
   795  007CE2                     u47:
   796                           
   797                           ;main.c: 27: PORTAbits.RA1 = PORTBbits.RB1;
   798  007CE2  A281               	btfss	3969,1,c	;volatile
   799  007CE4  D002               	bra	u55
   800  007CE6  8280               	bsf	3968,1,c	;volatile
   801  007CE8  D001               	bra	u57
   802  007CEA                     u55:
   803  007CEA  9280               	bcf	3968,1,c	;volatile
   804  007CEC                     u57:
   805                           
   806                           ;main.c: 28: PORTAbits.RA2 = PORTBbits.RB2;
   807  007CEC  A481               	btfss	3969,2,c	;volatile
   808  007CEE  D002               	bra	u65
   809  007CF0  8480               	bsf	3968,2,c	;volatile
   810  007CF2  D001               	bra	u67
   811  007CF4                     u65:
   812  007CF4  9480               	bcf	3968,2,c	;volatile
   813  007CF6                     u67:
   814                           
   815                           ;main.c: 29: PORTAbits.RA3 = PORTBbits.RB3;
   816  007CF6  A681               	btfss	3969,3,c	;volatile
   817  007CF8  D002               	bra	u75
   818  007CFA  8680               	bsf	3968,3,c	;volatile
   819  007CFC  D001               	bra	u77
   820  007CFE                     u75:
   821  007CFE  9680               	bcf	3968,3,c	;volatile
   822  007D00                     u77:
   823                           
   824                           ;main.c: 30: PORTAbits.RA4 = PORTBbits.RB4;
   825  007D00  A881               	btfss	3969,4,c	;volatile
   826  007D02  D002               	bra	u85
   827  007D04  8880               	bsf	3968,4,c	;volatile
   828  007D06  D001               	bra	u87
   829  007D08                     u85:
   830  007D08  9880               	bcf	3968,4,c	;volatile
   831  007D0A                     u87:
   832  007D0A  0012               	return		;funcret
   833  007D0C                     __end_of_led_sens:
   834                           	opt stack 0
   835                           tblptru	equ	0xFF8
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _getRoadState *****************
   839 ;; Defined at:
   840 ;;		line 44 in file "main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  a               2    0[COMRAM] short 
   843 ;;  b               2    2[COMRAM] short 
   844 ;;  c               2    4[COMRAM] short 
   845 ;;  d               2    6[COMRAM] short 
   846 ;;  e               2    8[COMRAM] short 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      enum E3329
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:        10       0       0       0       0       0       0       0       0
   859 ;;      Locals:         0       0       0       0       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0
   861 ;;      Totals:        10       0       0       0       0       0       0       0       0
   862 ;;Total ram usage:       10 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text7
   872  007E44                     __ptext7:
   873                           	opt stack 0
   874  007E44                     _getRoadState:
   875                           	opt stack 30
   876                           
   877                           ;main.c: 45: if ( (a == 1 && b == 1 && c == 1
   878                           ;main.c: 46: && d == 1 && e == 1)
   879                           ;main.c: 47: || (a == 0 && b == 0 && c == 0
   880                           ;main.c: 48: && d == 0 && e == 0)) {
   881                           
   882                           ;incstack = 0
   883  007E44  0401               	decf	getRoadState@a,w,c
   884  007E46  1002               	iorwf	getRoadState@a+1,w,c
   885  007E48  A4D8               	btfss	status,2,c
   886  007E4A  D010               	goto	u740
   887  007E4C  0403               	decf	getRoadState@b,w,c
   888  007E4E  1004               	iorwf	getRoadState@b+1,w,c
   889  007E50  A4D8               	btfss	status,2,c
   890  007E52  D00C               	goto	u740
   891  007E54  0405               	decf	getRoadState@c,w,c
   892  007E56  1006               	iorwf	getRoadState@c+1,w,c
   893  007E58  A4D8               	btfss	status,2,c
   894  007E5A  D008               	goto	u740
   895  007E5C  0407               	decf	getRoadState@d,w,c
   896  007E5E  1008               	iorwf	getRoadState@d+1,w,c
   897  007E60  A4D8               	btfss	status,2,c
   898  007E62  D004               	goto	u740
   899  007E64  0409               	decf	getRoadState@e,w,c
   900  007E66  100A               	iorwf	getRoadState@e+1,w,c
   901  007E68  B4D8               	btfsc	status,2,c
   902  007E6A  D014               	goto	u790
   903  007E6C                     u740:
   904  007E6C  5001               	movf	getRoadState@a,w,c
   905  007E6E  1002               	iorwf	getRoadState@a+1,w,c
   906  007E70  A4D8               	btfss	status,2,c
   907  007E72  D012               	goto	l32
   908  007E74  5003               	movf	getRoadState@b,w,c
   909  007E76  1004               	iorwf	getRoadState@b+1,w,c
   910  007E78  A4D8               	btfss	status,2,c
   911  007E7A  D00E               	goto	l32
   912  007E7C  5005               	movf	getRoadState@c,w,c
   913  007E7E  1006               	iorwf	getRoadState@c+1,w,c
   914  007E80  A4D8               	btfss	status,2,c
   915  007E82  D00A               	goto	l32
   916  007E84  5007               	movf	getRoadState@d,w,c
   917  007E86  1008               	iorwf	getRoadState@d+1,w,c
   918  007E88  A4D8               	btfss	status,2,c
   919  007E8A  D006               	goto	l32
   920  007E8C  5009               	movf	getRoadState@e,w,c
   921  007E8E  100A               	iorwf	getRoadState@e+1,w,c
   922  007E90  A4D8               	btfss	status,2,c
   923  007E92  D002               	goto	l32
   924  007E94                     u790:
   925                           
   926                           ;main.c: 49: return off_track;
   927  007E94  0E01               	movlw	1
   928  007E96  0012               	return	
   929  007E98                     l32:
   930                           
   931                           ;main.c: 50: }
   932                           ;main.c: 52: if ( (c == 0
   933                           ;main.c: 53: && a == 1 && b == 1
   934                           ;main.c: 54: && d == 1 && e == 1)
   935                           ;main.c: 55: || (c == 1
   936                           ;main.c: 56: && a == 0 && b == 0
   937                           ;main.c: 57: && d == 0 && e == 0)) {
   938  007E98  5005               	movf	getRoadState@c,w,c
   939  007E9A  1006               	iorwf	getRoadState@c+1,w,c
   940  007E9C  A4D8               	btfss	status,2,c
   941  007E9E  D010               	goto	u840
   942  007EA0  0401               	decf	getRoadState@a,w,c
   943  007EA2  1002               	iorwf	getRoadState@a+1,w,c
   944  007EA4  A4D8               	btfss	status,2,c
   945  007EA6  D00C               	goto	u840
   946  007EA8  0403               	decf	getRoadState@b,w,c
   947  007EAA  1004               	iorwf	getRoadState@b+1,w,c
   948  007EAC  A4D8               	btfss	status,2,c
   949  007EAE  D008               	goto	u840
   950  007EB0  0407               	decf	getRoadState@d,w,c
   951  007EB2  1008               	iorwf	getRoadState@d+1,w,c
   952  007EB4  A4D8               	btfss	status,2,c
   953  007EB6  D004               	goto	u840
   954  007EB8  0409               	decf	getRoadState@e,w,c
   955  007EBA  100A               	iorwf	getRoadState@e+1,w,c
   956  007EBC  B4D8               	btfsc	status,2,c
   957  007EBE  D014               	goto	u890
   958  007EC0                     u840:
   959  007EC0  0405               	decf	getRoadState@c,w,c
   960  007EC2  1006               	iorwf	getRoadState@c+1,w,c
   961  007EC4  A4D8               	btfss	status,2,c
   962  007EC6  D012               	goto	l38
   963  007EC8  5001               	movf	getRoadState@a,w,c
   964  007ECA  1002               	iorwf	getRoadState@a+1,w,c
   965  007ECC  A4D8               	btfss	status,2,c
   966  007ECE  D00E               	goto	l38
   967  007ED0  5003               	movf	getRoadState@b,w,c
   968  007ED2  1004               	iorwf	getRoadState@b+1,w,c
   969  007ED4  A4D8               	btfss	status,2,c
   970  007ED6  D00A               	goto	l38
   971  007ED8  5007               	movf	getRoadState@d,w,c
   972  007EDA  1008               	iorwf	getRoadState@d+1,w,c
   973  007EDC  A4D8               	btfss	status,2,c
   974  007EDE  D006               	goto	l38
   975  007EE0  5009               	movf	getRoadState@e,w,c
   976  007EE2  100A               	iorwf	getRoadState@e+1,w,c
   977  007EE4  A4D8               	btfss	status,2,c
   978  007EE6  D002               	goto	l38
   979  007EE8                     u890:
   980                           
   981                           ;main.c: 58: return straight_line;
   982  007EE8  0E02               	movlw	2
   983  007EEA  0012               	return	
   984  007EEC                     l38:
   985                           
   986                           ;main.c: 59: }
   987                           ;main.c: 62: if (a == 1 && b == 0 && c == 1
   988                           ;main.c: 63: && d == 1 && e == 1) {
   989  007EEC  0401               	decf	getRoadState@a,w,c
   990  007EEE  1002               	iorwf	getRoadState@a+1,w,c
   991  007EF0  A4D8               	btfss	status,2,c
   992  007EF2  D012               	goto	l43
   993  007EF4  5003               	movf	getRoadState@b,w,c
   994  007EF6  1004               	iorwf	getRoadState@b+1,w,c
   995  007EF8  A4D8               	btfss	status,2,c
   996  007EFA  D00E               	goto	l43
   997  007EFC  0405               	decf	getRoadState@c,w,c
   998  007EFE  1006               	iorwf	getRoadState@c+1,w,c
   999  007F00  A4D8               	btfss	status,2,c
  1000  007F02  D00A               	goto	l43
  1001  007F04  0407               	decf	getRoadState@d,w,c
  1002  007F06  1008               	iorwf	getRoadState@d+1,w,c
  1003  007F08  A4D8               	btfss	status,2,c
  1004  007F0A  D006               	goto	l43
  1005  007F0C  0409               	decf	getRoadState@e,w,c
  1006  007F0E  100A               	iorwf	getRoadState@e+1,w,c
  1007  007F10  A4D8               	btfss	status,2,c
  1008  007F12  D002               	goto	l43
  1009                           
  1010                           ;main.c: 64: return off_right_little;
  1011  007F14  0E03               	movlw	3
  1012  007F16  0012               	return	
  1013  007F18                     l43:
  1014                           
  1015                           ;main.c: 65: }
  1016                           ;main.c: 66: if (a == 1 && b == 1 && c == 1
  1017                           ;main.c: 67: && d == 0 && e == 1) {
  1018  007F18  0401               	decf	getRoadState@a,w,c
  1019  007F1A  1002               	iorwf	getRoadState@a+1,w,c
  1020  007F1C  A4D8               	btfss	status,2,c
  1021  007F1E  D012               	goto	l44
  1022  007F20  0403               	decf	getRoadState@b,w,c
  1023  007F22  1004               	iorwf	getRoadState@b+1,w,c
  1024  007F24  A4D8               	btfss	status,2,c
  1025  007F26  D00E               	goto	l44
  1026  007F28  0405               	decf	getRoadState@c,w,c
  1027  007F2A  1006               	iorwf	getRoadState@c+1,w,c
  1028  007F2C  A4D8               	btfss	status,2,c
  1029  007F2E  D00A               	goto	l44
  1030  007F30  5007               	movf	getRoadState@d,w,c
  1031  007F32  1008               	iorwf	getRoadState@d+1,w,c
  1032  007F34  A4D8               	btfss	status,2,c
  1033  007F36  D006               	goto	l44
  1034  007F38  0409               	decf	getRoadState@e,w,c
  1035  007F3A  100A               	iorwf	getRoadState@e+1,w,c
  1036  007F3C  A4D8               	btfss	status,2,c
  1037  007F3E  D002               	goto	l44
  1038                           
  1039                           ;main.c: 68: return off_left_little;
  1040  007F40  0E05               	movlw	5
  1041  007F42  0012               	return	
  1042  007F44                     l44:
  1043                           
  1044                           ;main.c: 69: }
  1045                           ;main.c: 70: if (a == 0 && c == 1 && e == 1) {
  1046  007F44  5001               	movf	getRoadState@a,w,c
  1047  007F46  1002               	iorwf	getRoadState@a+1,w,c
  1048  007F48  A4D8               	btfss	status,2,c
  1049  007F4A  D00A               	goto	l45
  1050  007F4C  0405               	decf	getRoadState@c,w,c
  1051  007F4E  1006               	iorwf	getRoadState@c+1,w,c
  1052  007F50  A4D8               	btfss	status,2,c
  1053  007F52  D006               	goto	l45
  1054  007F54  0409               	decf	getRoadState@e,w,c
  1055  007F56  100A               	iorwf	getRoadState@e+1,w,c
  1056  007F58  A4D8               	btfss	status,2,c
  1057  007F5A  D002               	goto	l45
  1058                           
  1059                           ;main.c: 71: return off_right;
  1060  007F5C  0E04               	movlw	4
  1061  007F5E  0012               	return	
  1062  007F60                     l45:
  1063                           
  1064                           ;main.c: 72: }
  1065                           ;main.c: 73: if (a == 1 && c == 1 && e == 0) {
  1066  007F60  0401               	decf	getRoadState@a,w,c
  1067  007F62  1002               	iorwf	getRoadState@a+1,w,c
  1068  007F64  A4D8               	btfss	status,2,c
  1069  007F66  D00A               	goto	l46
  1070  007F68  0405               	decf	getRoadState@c,w,c
  1071  007F6A  1006               	iorwf	getRoadState@c+1,w,c
  1072  007F6C  A4D8               	btfss	status,2,c
  1073  007F6E  D006               	goto	l46
  1074  007F70  5009               	movf	getRoadState@e,w,c
  1075  007F72  100A               	iorwf	getRoadState@e+1,w,c
  1076  007F74  A4D8               	btfss	status,2,c
  1077  007F76  D002               	goto	l46
  1078                           
  1079                           ;main.c: 74: return off_left;
  1080  007F78  0E06               	movlw	6
  1081  007F7A  0012               	return	
  1082  007F7C                     l46:
  1083                           
  1084                           ;main.c: 75: }
  1085                           ;main.c: 78: if (a == 0 && b == 1
  1086                           ;main.c: 79: && d == 0 && e == 0) {
  1087  007F7C  5001               	movf	getRoadState@a,w,c
  1088  007F7E  1002               	iorwf	getRoadState@a+1,w,c
  1089  007F80  A4D8               	btfss	status,2,c
  1090  007F82  D00E               	goto	l47
  1091  007F84  0403               	decf	getRoadState@b,w,c
  1092  007F86  1004               	iorwf	getRoadState@b+1,w,c
  1093  007F88  A4D8               	btfss	status,2,c
  1094  007F8A  D00A               	goto	l47
  1095  007F8C  5007               	movf	getRoadState@d,w,c
  1096  007F8E  1008               	iorwf	getRoadState@d+1,w,c
  1097  007F90  A4D8               	btfss	status,2,c
  1098  007F92  D006               	goto	l47
  1099  007F94  5009               	movf	getRoadState@e,w,c
  1100  007F96  100A               	iorwf	getRoadState@e+1,w,c
  1101  007F98  A4D8               	btfss	status,2,c
  1102  007F9A  D002               	goto	l47
  1103                           
  1104                           ;main.c: 80: return off_right_little;
  1105  007F9C  0E03               	movlw	3
  1106  007F9E  0012               	return	
  1107  007FA0                     l47:
  1108                           
  1109                           ;main.c: 81: }
  1110                           ;main.c: 82: if (a == 0 && b == 0
  1111                           ;main.c: 83: && d == 1 && e == 0) {
  1112  007FA0  5001               	movf	getRoadState@a,w,c
  1113  007FA2  1002               	iorwf	getRoadState@a+1,w,c
  1114  007FA4  A4D8               	btfss	status,2,c
  1115  007FA6  D00E               	goto	l48
  1116  007FA8  5003               	movf	getRoadState@b,w,c
  1117  007FAA  1004               	iorwf	getRoadState@b+1,w,c
  1118  007FAC  A4D8               	btfss	status,2,c
  1119  007FAE  D00A               	goto	l48
  1120  007FB0  0407               	decf	getRoadState@d,w,c
  1121  007FB2  1008               	iorwf	getRoadState@d+1,w,c
  1122  007FB4  A4D8               	btfss	status,2,c
  1123  007FB6  D006               	goto	l48
  1124  007FB8  5009               	movf	getRoadState@e,w,c
  1125  007FBA  100A               	iorwf	getRoadState@e+1,w,c
  1126  007FBC  A4D8               	btfss	status,2,c
  1127  007FBE  D002               	goto	l48
  1128                           
  1129                           ;main.c: 84: return off_left_little;
  1130  007FC0  0E05               	movlw	5
  1131  007FC2  0012               	return	
  1132  007FC4                     l48:
  1133                           
  1134                           ;main.c: 85: }
  1135                           ;main.c: 86: if (a == 1 && c == 0 && e == 0) {
  1136  007FC4  0401               	decf	getRoadState@a,w,c
  1137  007FC6  1002               	iorwf	getRoadState@a+1,w,c
  1138  007FC8  A4D8               	btfss	status,2,c
  1139  007FCA  D00A               	goto	l49
  1140  007FCC  5005               	movf	getRoadState@c,w,c
  1141  007FCE  1006               	iorwf	getRoadState@c+1,w,c
  1142  007FD0  A4D8               	btfss	status,2,c
  1143  007FD2  D006               	goto	l49
  1144  007FD4  5009               	movf	getRoadState@e,w,c
  1145  007FD6  100A               	iorwf	getRoadState@e+1,w,c
  1146  007FD8  A4D8               	btfss	status,2,c
  1147  007FDA  D002               	goto	l49
  1148                           
  1149                           ;main.c: 87: return off_right;
  1150  007FDC  0E04               	movlw	4
  1151  007FDE  0012               	return	
  1152  007FE0                     l49:
  1153                           
  1154                           ;main.c: 88: }
  1155                           ;main.c: 89: if (a == 0 && c == 0 && e == 1) {
  1156  007FE0  5001               	movf	getRoadState@a,w,c
  1157  007FE2  1002               	iorwf	getRoadState@a+1,w,c
  1158  007FE4  A4D8               	btfss	status,2,c
  1159  007FE6  D00A               	goto	l50
  1160  007FE8  5005               	movf	getRoadState@c,w,c
  1161  007FEA  1006               	iorwf	getRoadState@c+1,w,c
  1162  007FEC  A4D8               	btfss	status,2,c
  1163  007FEE  D006               	goto	l50
  1164  007FF0  0409               	decf	getRoadState@e,w,c
  1165  007FF2  100A               	iorwf	getRoadState@e+1,w,c
  1166  007FF4  A4D8               	btfss	status,2,c
  1167  007FF6  D002               	goto	l50
  1168                           
  1169                           ;main.c: 90: return off_left;
  1170  007FF8  0E06               	movlw	6
  1171  007FFA  0012               	return	
  1172  007FFC                     l50:
  1173                           
  1174                           ;main.c: 91: }
  1175                           ;main.c: 93: return on_track;
  1176  007FFC  0E00               	movlw	0
  1177  007FFE  0012               	return	
  1178  008000                     __end_of_getRoadState:
  1179                           	opt stack 0
  1180                           tblptru	equ	0xFF8
  1181                           status	equ	0xFD8
  1182                           
  1183 ;; *************** function _accelerate *****************
  1184 ;; Defined at:
  1185 ;;		line 144 in file "main.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2   67[None  ] int 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1199 ;;      Params:         0       0       0       0       0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1203 ;;Total ram usage:        0 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    1
  1206 ;; This function calls:
  1207 ;;		_wait00
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text8
  1214  007C10                     __ptext8:
  1215                           	opt stack 0
  1216  007C10                     _accelerate:
  1217                           	opt stack 29
  1218                           
  1219                           ;main.c: 145: PORTC=0x03;
  1220                           
  1221                           ;incstack = 0
  1222  007C10  0E03               	movlw	3
  1223  007C12  6E82               	movwf	3970,c	;volatile
  1224                           
  1225                           ;main.c: 146: wait00(60);
  1226  007C14  0E00               	movlw	0
  1227  007C16  6E02               	movwf	wait00@k+1,c
  1228  007C18  0E3C               	movlw	60
  1229  007C1A  6E01               	movwf	wait00@k,c
  1230  007C1C  EC86  F03E         	call	_wait00	;wreg free
  1231                           
  1232                           ;main.c: 147: PORTC=0x02;
  1233  007C20  0E02               	movlw	2
  1234  007C22  6E82               	movwf	3970,c	;volatile
  1235                           
  1236                           ;main.c: 148: wait00(5);
  1237  007C24  0E00               	movlw	0
  1238  007C26  6E02               	movwf	wait00@k+1,c
  1239  007C28  0E05               	movlw	5
  1240  007C2A  6E01               	movwf	wait00@k,c
  1241  007C2C  EC86  F03E         	call	_wait00	;wreg free
  1242                           
  1243                           ;main.c: 149: PORTC=0x00;
  1244  007C30  0E00               	movlw	0
  1245  007C32  6E82               	movwf	3970,c	;volatile
  1246                           
  1247                           ;main.c: 150: wait00(1);
  1248  007C34  0E00               	movlw	0
  1249  007C36  6E02               	movwf	wait00@k+1,c
  1250  007C38  0E01               	movlw	1
  1251  007C3A  6E01               	movwf	wait00@k,c
  1252  007C3C  EC86  F03E         	call	_wait00	;wreg free
  1253  007C40  0012               	return		;funcret
  1254  007C42                     __end_of_accelerate:
  1255                           	opt stack 0
  1256                           tblptru	equ	0xFF8
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function _wait00 *****************
  1260 ;; Defined at:
  1261 ;;		line 13 in file "main.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  k               2    0[COMRAM] short 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  i               2    5[COMRAM] short 
  1266 ;;  j               2    3[COMRAM] short 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  2    0[COMRAM] int 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1276 ;;      Params:         2       0       0       0       0       0       0       0       0
  1277 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1278 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1279 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1280 ;;Total ram usage:        7 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_turnLeft
  1286 ;;		_turnRight
  1287 ;;		_turnLeftSmall
  1288 ;;		_turnRightSmall
  1289 ;;		_straight
  1290 ;;		_accelerate
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text9
  1295  007D0C                     __ptext9:
  1296                           	opt stack 0
  1297  007D0C                     _wait00:
  1298                           	opt stack 29
  1299                           
  1300                           ;main.c: 16: short i;
  1301                           ;main.c: 17: short j;
  1302                           ;main.c: 18: for(j=0;j<k;j++){
  1303                           
  1304                           ;incstack = 0
  1305  007D0C  0E00               	movlw	0
  1306  007D0E  6E05               	movwf	wait00@j+1,c
  1307  007D10  0E00               	movlw	0
  1308  007D12  6E04               	movwf	wait00@j,c
  1309  007D14  D011               	goto	l21
  1310  007D16                     
  1311                           ;main.c: 19: for(i=0;i<300;i++){
  1312  007D16  0E00               	movlw	0
  1313  007D18  6E07               	movwf	wait00@i+1,c
  1314  007D1A  0E00               	movlw	0
  1315  007D1C  6E06               	movwf	wait00@i,c
  1316  007D1E                     l970:
  1317  007D1E  BE07               	btfsc	wait00@i+1,7,c
  1318  007D20  D006               	goto	l23
  1319  007D22  0E2C               	movlw	44
  1320  007D24  5C06               	subwf	wait00@i,w,c
  1321  007D26  0E01               	movlw	1
  1322  007D28  5807               	subwfb	wait00@i+1,w,c
  1323  007D2A  B0D8               	btfsc	status,0,c
  1324  007D2C  D003               	goto	u680
  1325  007D2E                     l23:
  1326  007D2E  4A06               	infsnz	wait00@i,f,c
  1327  007D30  2A07               	incf	wait00@i+1,f,c
  1328  007D32  D7F5               	goto	l970
  1329  007D34                     u680:
  1330  007D34  4A04               	infsnz	wait00@j,f,c
  1331  007D36  2A05               	incf	wait00@j+1,f,c
  1332  007D38                     l21:
  1333  007D38  5001               	movf	wait00@k,w,c
  1334  007D3A  5C04               	subwf	wait00@j,w,c
  1335  007D3C  5005               	movf	wait00@j+1,w,c
  1336  007D3E  0A80               	xorlw	128
  1337  007D40  6E03               	movwf	??_wait00& (0+255),c
  1338  007D42  5002               	movf	wait00@k+1,w,c
  1339  007D44  0A80               	xorlw	128
  1340  007D46  5803               	subwfb	??_wait00& (0+255),w,c
  1341  007D48  B0D8               	btfsc	status,0,c
  1342  007D4A  0012               	return	
  1343  007D4C  D7E4               	goto	l22
  1344  007D4E                     __end_of_wait00:
  1345                           	opt stack 0
  1346  0000                     tblptru	equ	0xFF8
  1347                           status	equ	0xFD8
  1348                           tblptru	equ	0xFF8
  1349                           status	equ	0xFD8
  1350                           
  1351                           	psect	rparam
  1352  0000                     tblptru	equ	0xFF8
  1353                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_getRoadState
    _turnRightSmall->_wait00
    _turnRight->_wait00
    _turnLeftSmall->_wait00
    _turnLeft->_wait00
    _straight->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    9442
                                             10 COMRAM     7     7      0
                         _accelerate
                       _getRoadState
                           _led_sens
                           _straight
                           _turnLeft
                      _turnLeftSmall
                          _turnRight
                     _turnRightSmall
 ---------------------------------------------------------------------------------
 (1) _turnRightSmall                                       0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeftSmall                                        0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getRoadState                                        10     0     10    1480
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1308
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _accelerate
     _wait00
   _getRoadState
   _led_sens
   _straight
     _wait00
   _turnLeft
     _wait00
   _turnLeftSmall
     _wait00
   _turnRight
     _wait00
   _turnRightSmall
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 21:40:30 2018

                     l21 7D38                       l22 7D16                       l23 7D2E  
                     l32 7E98                       l50 7FFC                       l43 7F18  
                     l44 7F44                       l45 7F60                       l46 7F7C  
                     l38 7EEC                       l47 7FA0                       l48 7FC4  
                     l80 7DF8                       l49 7FE0                       l73 7D6E  
                     l74 7D6A                       l83 7DFE                       l84 7E04  
                     l76 7D76                       l85 7E0A                       l78 7E1C  
                     l86 7E10                       l87 7E16                       l79 7DEA  
                     u45 7CE0                       u55 7CEA                       u47 7CE2  
                     u65 7CF4                       u57 7CEC                       u75 7CFE  
                     u67 7CF6                       u85 7D08                       u77 7D00  
                     u87 7D0A                      l970 7D1E                      u740 7E6C  
                    u680 7D34                      u840 7EC0                      u790 7E94  
                    u890 7EE8         ??_turnRightSmall 0008                     u1210 7D88  
                   u1220 7D9A                     u1230 7DAC                     u1240 7DBE  
                   u1250 7DD0                     u1218 7D8A                     u1228 7D9C  
                   u1238 7DAE                     u1248 7DC0                     u1258 7DD2  
                   _main 7D4E                     start 2000             ___param_bank 000000  
                  ?_main 0001                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    status 000FD8          __initialization 2008  
           __end_of_main 7E44                   ??_main 000B            __activetblptr 000002  
   __end_of_getRoadState 8000                   _ADCON1 000FC1   __size_of_turnLeftSmall 0032  
       __end_of_led_sens 7D0C                   _wait00 7D0C                   tblptru 000FF8  
       __end_of_straight 7C74         __end_of_turnLeft 7BEE               __accesstop 0060  
__end_of__initialization 2008            ___rparam_used 000001           __pcstackCOMRAM 0001  
             _accelerate 7C10            _turnLeftSmall 7C74                  ?_wait00 0001  
  __size_of_getRoadState 01BC           ?_turnLeftSmall 0001                ?_led_sens 0001  
     __size_of_turnRight 0022                  __Hparam 0000                  __Lparam 0000  
           _getRoadState 7E44              ?_accelerate 0001                ?_straight 0001  
                __pcinit 2008                  __ramtop 0800          __size_of_wait00 0042  
              ?_turnLeft 0001                  __ptext0 7D4E                  __ptext1 7CA6  
                __ptext2 7BEE                  __ptext3 7C74                  __ptext4 7BCC  
                __ptext5 7C42                  __ptext6 7CD8                  __ptext7 7E44  
                __ptext8 7C10                  __ptext9 7D0C           main@road_state 0011  
   end_of_initialization 2008               ??_led_sens 0001            __Lmediumconst 0000  
                wait00@i 0006                  wait00@j 0004                  wait00@k 0001  
__size_of_turnRightSmall 0032               ??_straight 0008               ??_turnLeft 0008  
        ??_turnLeftSmall 0008                _PORTAbits 000F80                _PORTBbits 000F81  
      __end_of_turnRight 7C10      __size_of_accelerate 0032           __end_of_wait00 7D4E  
    start_initialization 2008  main@previous_road_state 0010                 ??_wait00 0003  
      __size_of_led_sens 0034           _turnRightSmall 7CA6             ??_accelerate 0008  
      __size_of_straight 0032        __size_of_turnLeft 0022       __end_of_accelerate 7C42  
 __end_of_turnRightSmall 7CD8                _turnRight 7BEE          ?_turnRightSmall 0001  
               __Hrparam 0000                 __Lrparam 0000    __end_of_turnLeftSmall 7CA6  
             ?_turnRight 0001                 _led_sens 7CD8            __size_of_main 00F6  
          getRoadState@a 0001            getRoadState@b 0003            getRoadState@c 0005  
          getRoadState@d 0007            getRoadState@e 0009                 _straight 7C42  
               _turnLeft 7BCC            ?_getRoadState 0001              ??_turnRight 0008  
         ??_getRoadState 000B  
