

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 02 11:26:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1
    19                           	psect	text12,global,reloc=2,class=CODE,delta=1
    20                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F2553 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     _PORTB	set	3969
    59  0000                     _PORTA	set	3968
    60  0000                     _TRISC	set	3988
    61  0000                     _TRISB	set	3987
    62  0000                     _TRISA	set	3986
    63  0000                     _ADCON1	set	4033
    64  0000                     _PORTC	set	3970
    65  0000                     _PORTBbits	set	3969
    66  0000                     _PORTAbits	set	3968
    67                           
    68                           ; #config settings
    69                           
    70                           	psect	cinit
    71  002008                     __pcinit:
    72                           	opt stack 0
    73  002008                     start_initialization:
    74                           	opt stack 0
    75  002008                     __initialization:
    76                           	opt stack 0
    77  002008                     end_of_initialization:
    78                           	opt stack 0
    79  002008                     __end_of__initialization:
    80                           	opt stack 0
    81  002008  0E00               	movlw	low (__Lmediumconst shr (0+16))
    82  00200A  6EF8               	movwf	tblptru,c
    83  00200C  0100               	movlb	0
    84  00200E  EF72  F03E         	goto	_main	;jump to C main() function
    85                           tblptru	equ	0xFF8
    86                           
    87                           	psect	cstackCOMRAM
    88  000001                     __pcstackCOMRAM:
    89                           	opt stack 0
    90  000001                     ?_isAllStraight:
    91                           	opt stack 0
    92  000001                     ?_isInCurve:
    93                           	opt stack 0
    94  000001                     ?___awmod:
    95                           	opt stack 0
    96  000001                     wait00@k:
    97                           	opt stack 0
    98  000001                     getRoadState@a:
    99                           	opt stack 0
   100  000001                     isAllStraight@states:
   101                           	opt stack 0
   102  000001                     isInCurve@states:
   103                           	opt stack 0
   104  000001                     ___awmod@dividend:
   105                           	opt stack 0
   106                           
   107                           ; 2 bytes @ 0x0
   108  000001                     	ds	2
   109  000003                     ??_wait00:
   110  000003                     getRoadState@b:
   111                           	opt stack 0
   112  000003                     ___awmod@divisor:
   113                           	opt stack 0
   114                           
   115                           ; 2 bytes @ 0x2
   116  000003                     	ds	1
   117  000004                     wait00@j:
   118                           	opt stack 0
   119  000004                     isAllStraight@i:
   120                           	opt stack 0
   121  000004                     isInCurve@i:
   122                           	opt stack 0
   123                           
   124                           ; 2 bytes @ 0x3
   125  000004                     	ds	1
   126  000005                     ___awmod@counter:
   127                           	opt stack 0
   128  000005                     getRoadState@c:
   129                           	opt stack 0
   130                           
   131                           ; 2 bytes @ 0x4
   132  000005                     	ds	1
   133  000006                     ___awmod@sign:
   134                           	opt stack 0
   135  000006                     wait00@i:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0x5
   139  000006                     	ds	1
   140  000007                     getRoadState@d:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x6
   144  000007                     	ds	1
   145  000008                     
   146                           ; 1 bytes @ 0x7
   147  000008                     	ds	1
   148  000009                     getRoadState@e:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0x8
   152  000009                     	ds	2
   153  00000B                     ??_main:
   154                           
   155                           ; 1 bytes @ 0xA
   156  00000B                     	ds	5
   157  000010                     main@states:
   158                           	opt stack 0
   159                           
   160                           ; 30 bytes @ 0xF
   161  000010                     	ds	30
   162  00002E                     main@current:
   163                           	opt stack 0
   164                           
   165                           ; 2 bytes @ 0x2D
   166  00002E                     	ds	2
   167  000030                     main@road_state:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x2F
   171  000030                     	ds	1
   172                           tblptru	equ	0xFF8
   173                           
   174 ;;
   175 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   176 ;;
   177 ;; *************** function _main *****************
   178 ;; Defined at:
   179 ;;		line 182 in file "main.c"
   180 ;; Parameters:    Size  Location     Type
   181 ;;		None
   182 ;; Auto vars:     Size  Location     Type
   183 ;;  states         30   15[COMRAM] enum E3329[30]
   184 ;;  current         2   45[COMRAM] int 
   185 ;;  road_state      1   47[COMRAM] enum E3329
   186 ;;  previous_roa    1    0        enum E3329
   187 ;; Return value:  Size  Location     Type
   188 ;;                  2   89[None  ] int 
   189 ;; Registers used:
   190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   191 ;; Tracked objects:
   192 ;;		On entry : 0/0
   193 ;;		On exit  : 0/0
   194 ;;		Unchanged: 0/0
   195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   196 ;;      Params:         0       0       0       0       0       0       0       0       0
   197 ;;      Locals:        33       0       0       0       0       0       0       0       0
   198 ;;      Temps:          5       0       0       0       0       0       0       0       0
   199 ;;      Totals:        38       0       0       0       0       0       0       0       0
   200 ;;Total ram usage:       38 bytes
   201 ;; Hardware stack levels required when called:    2
   202 ;; This function calls:
   203 ;;		___awmod
   204 ;;		_accelerate
   205 ;;		_getRoadState
   206 ;;		_isAllStraight
   207 ;;		_isInCurve
   208 ;;		_led_sens
   209 ;;		_slowDown
   210 ;;		_straight
   211 ;;		_turnLeft
   212 ;;		_turnLeftSmall
   213 ;;		_turnRight
   214 ;;		_turnRightSmall
   215 ;; This function is called by:
   216 ;;		Startup code after reset
   217 ;; This function uses a non-reentrant model
   218 ;;
   219                           
   220                           	psect	text0
   221  007CE4                     __ptext0:
   222                           	opt stack 0
   223  007CE4                     _main:
   224                           	opt stack 29
   225                           
   226                           ;main.c: 185: ADCON1 = 0x0F;
   227                           
   228                           ;incstack = 0
   229  007CE4  0E0F               	movlw	15
   230  007CE6  6EC1               	movwf	4033,c	;volatile
   231                           
   232                           ;main.c: 188: TRISA = 0x20;
   233  007CE8  0E20               	movlw	32
   234  007CEA  6E92               	movwf	3986,c	;volatile
   235                           
   236                           ;main.c: 189: TRISB = 0xFF;
   237  007CEC  6893               	setf	3987,c	;volatile
   238                           
   239                           ;main.c: 190: TRISC = 0x00;
   240  007CEE  0E00               	movlw	0
   241  007CF0  6E94               	movwf	3988,c	;volatile
   242                           
   243                           ;main.c: 193: PORTA = 0x00;
   244  007CF2  0E00               	movlw	0
   245  007CF4  6E80               	movwf	3968,c	;volatile
   246                           
   247                           ;main.c: 194: PORTB = 0x00;
   248  007CF6  0E00               	movlw	0
   249  007CF8  6E81               	movwf	3969,c	;volatile
   250                           
   251                           ;main.c: 195: PORTC = 0x00;
   252  007CFA  0E00               	movlw	0
   253  007CFC  6E82               	movwf	3970,c	;volatile
   254                           
   255                           ;main.c: 198: while(PORTAbits.RA5==1){
   256  007CFE  D002               	goto	l90
   257  007D00                     
   258                           ;main.c: 199: led_sens();
   259  007D00  ECA6  F03D         	call	_led_sens	;wreg free
   260  007D04                     l90:
   261  007D04  BA80               	btfsc	3968,5,c	;volatile
   262  007D06  D7FC               	goto	l91
   263                           
   264                           ;main.c: 200: }
   265                           ;main.c: 202: enum road_state_codes road_state = on_track;
   266  007D08  0E00               	movlw	0
   267  007D0A  6E30               	movwf	main@road_state,c
   268                           
   269                           ;main.c: 203: enum road_state_codes previous_road_state;
   270                           ;main.c: 205: int current = -1;
   271  007D0C  682E               	setf	main@current,c
   272  007D0E  682F               	setf	main@current+1,c
   273  007D10                     
   274                           ;main.c: 210: led_sens();
   275  007D10  ECA6  F03D         	call	_led_sens	;wreg free
   276                           
   277                           ;main.c: 212: road_state = getRoadState(
   278                           ;main.c: 213: PORTBbits.RB0, PORTBbits.RB1, PORTBbits.RB2,
   279                           ;main.c: 214: PORTBbits.RB3, PORTBbits.RB4
   280                           ;main.c: 215: );
   281  007D14  A081               	btfss	3969,0,c	;volatile
   282  007D16  D003               	goto	u1460
   283  007D18  6A0B               	clrf	??_main& (0+255),c
   284  007D1A  2A0B               	incf	??_main& (0+255),f,c
   285  007D1C  D001               	goto	u1468
   286  007D1E                     u1460:
   287  007D1E  6A0B               	clrf	??_main& (0+255),c
   288  007D20                     u1468:
   289  007D20  500B               	movf	??_main,w,c
   290  007D22  6E01               	movwf	getRoadState@a,c
   291  007D24  6A02               	clrf	getRoadState@a+1,c
   292  007D26  A281               	btfss	3969,1,c	;volatile
   293  007D28  D003               	goto	u1470
   294  007D2A  6A0C               	clrf	(??_main+1)& (0+255),c
   295  007D2C  2A0C               	incf	(??_main+1)& (0+255),f,c
   296  007D2E  D001               	goto	u1478
   297  007D30                     u1470:
   298  007D30  6A0C               	clrf	(??_main+1)& (0+255),c
   299  007D32                     u1478:
   300  007D32  500C               	movf	??_main+1,w,c
   301  007D34  6E03               	movwf	getRoadState@b,c
   302  007D36  6A04               	clrf	getRoadState@b+1,c
   303  007D38  A481               	btfss	3969,2,c	;volatile
   304  007D3A  D003               	goto	u1480
   305  007D3C  6A0D               	clrf	(??_main+2)& (0+255),c
   306  007D3E  2A0D               	incf	(??_main+2)& (0+255),f,c
   307  007D40  D001               	goto	u1488
   308  007D42                     u1480:
   309  007D42  6A0D               	clrf	(??_main+2)& (0+255),c
   310  007D44                     u1488:
   311  007D44  500D               	movf	??_main+2,w,c
   312  007D46  6E05               	movwf	getRoadState@c,c
   313  007D48  6A06               	clrf	getRoadState@c+1,c
   314  007D4A  A681               	btfss	3969,3,c	;volatile
   315  007D4C  D003               	goto	u1490
   316  007D4E  6A0E               	clrf	(??_main+3)& (0+255),c
   317  007D50  2A0E               	incf	(??_main+3)& (0+255),f,c
   318  007D52  D001               	goto	u1498
   319  007D54                     u1490:
   320  007D54  6A0E               	clrf	(??_main+3)& (0+255),c
   321  007D56                     u1498:
   322  007D56  500E               	movf	??_main+3,w,c
   323  007D58  6E07               	movwf	getRoadState@d,c
   324  007D5A  6A08               	clrf	getRoadState@d+1,c
   325  007D5C  A881               	btfss	3969,4,c	;volatile
   326  007D5E  D003               	goto	u1500
   327  007D60  6A0F               	clrf	(??_main+4)& (0+255),c
   328  007D62  2A0F               	incf	(??_main+4)& (0+255),f,c
   329  007D64  D001               	goto	u1508
   330  007D66                     u1500:
   331  007D66  6A0F               	clrf	(??_main+4)& (0+255),c
   332  007D68                     u1508:
   333  007D68  500F               	movf	??_main+4,w,c
   334  007D6A  6E09               	movwf	getRoadState@e,c
   335  007D6C  6A0A               	clrf	getRoadState@e+1,c
   336  007D6E  EC2A  F03F         	call	_getRoadState	;wreg free
   337  007D72  6E30               	movwf	main@road_state,c
   338                           
   339                           ;main.c: 217: if (road_state == off_track) {
   340  007D74  0430               	decf	main@road_state,w,c
   341  007D76  A4D8               	btfss	status,2,c
   342  007D78  D014               	goto	l94
   343                           
   344                           ;main.c: 218: road_state = states[(current + 30 - 1) % 30];
   345  007D7A  0E1D               	movlw	29
   346  007D7C  242E               	addwf	main@current,w,c
   347  007D7E  6E01               	movwf	___awmod@dividend,c
   348  007D80  0E00               	movlw	0
   349  007D82  202F               	addwfc	main@current+1,w,c
   350  007D84  6E02               	movwf	___awmod@dividend+1,c
   351  007D86  0E00               	movlw	0
   352  007D88  6E04               	movwf	___awmod@divisor+1,c
   353  007D8A  0E1E               	movlw	30
   354  007D8C  6E03               	movwf	___awmod@divisor,c
   355  007D8E  EC3A  F03E         	call	___awmod	;wreg free
   356  007D92  0E10               	movlw	low main@states
   357  007D94  2401               	addwf	?___awmod,w,c
   358  007D96  6ED9               	movwf	fsr2l,c
   359  007D98  0E00               	movlw	high main@states
   360  007D9A  2002               	addwfc	?___awmod+1,w,c
   361  007D9C  6EDA               	movwf	fsr2h,c
   362  007D9E  50DF               	movf	indf2,w,c
   363  007DA0  6E30               	movwf	main@road_state,c
   364  007DA2                     l94:
   365                           
   366                           ;main.c: 219: }
   367                           ;main.c: 221: current = (current + 1) % 30;
   368  007DA2  0E01               	movlw	1
   369  007DA4  242E               	addwf	main@current,w,c
   370  007DA6  6E01               	movwf	___awmod@dividend,c
   371  007DA8  0E00               	movlw	0
   372  007DAA  202F               	addwfc	main@current+1,w,c
   373  007DAC  6E02               	movwf	___awmod@dividend+1,c
   374  007DAE  0E00               	movlw	0
   375  007DB0  6E04               	movwf	___awmod@divisor+1,c
   376  007DB2  0E1E               	movlw	30
   377  007DB4  6E03               	movwf	___awmod@divisor,c
   378  007DB6  EC3A  F03E         	call	___awmod	;wreg free
   379  007DBA  C001  F02E         	movff	?___awmod,main@current
   380  007DBE  C002  F02F         	movff	?___awmod+1,main@current+1
   381                           
   382                           ;main.c: 222: states[current] = road_state;
   383  007DC2  0E10               	movlw	low main@states
   384  007DC4  242E               	addwf	main@current,w,c
   385  007DC6  6ED9               	movwf	fsr2l,c
   386  007DC8  0E00               	movlw	high main@states
   387  007DCA  202F               	addwfc	main@current+1,w,c
   388  007DCC  6EDA               	movwf	fsr2h,c
   389  007DCE  C030  FFDF         	movff	main@road_state,indf2
   390                           
   391                           ;main.c: 225: switch (road_state) {
   392  007DD2  D02C               	goto	l95
   393  007DD4                     
   394                           ;main.c: 227: if (isAllStraight(states))
   395  007DD4  0E10               	movlw	low main@states
   396  007DD6  6E01               	movwf	isAllStraight@states,c
   397  007DD8  0E00               	movlw	high main@states
   398  007DDA  6E02               	movwf	isAllStraight@states+1,c
   399  007DDC  ECE1  F03D         	call	_isAllStraight	;wreg free
   400  007DE0  5001               	movf	?_isAllStraight,w,c
   401  007DE2  1002               	iorwf	?_isAllStraight+1,w,c
   402  007DE4  B4D8               	btfsc	status,2,c
   403  007DE6  D003               	goto	l97
   404                           
   405                           ;main.c: 228: accelerate();
   406  007DE8  EC29  F03D         	call	_accelerate	;wreg free
   407  007DEC  D791               	goto	l93
   408  007DEE                     l97:
   409                           
   410                           ;main.c: 229: else if (isInCurve(states)) {
   411  007DEE  0E10               	movlw	low main@states
   412  007DF0  6E01               	movwf	isInCurve@states,c
   413  007DF2  0E00               	movlw	high main@states
   414  007DF4  6E02               	movwf	isInCurve@states+1,c
   415  007DF6  EC0D  F03E         	call	_isInCurve	;wreg free
   416  007DFA  5001               	movf	?_isInCurve,w,c
   417  007DFC  1002               	iorwf	?_isInCurve+1,w,c
   418  007DFE  B4D8               	btfsc	status,2,c
   419  007E00  D003               	goto	l99
   420                           
   421                           ;main.c: 230: slowDown();
   422  007E02  EC42  F03D         	call	_slowDown	;wreg free
   423                           
   424                           ;main.c: 231: } else {
   425  007E06  D784               	goto	l93
   426  007E08                     l99:
   427                           
   428                           ;main.c: 232: straight();
   429  007E08  EC5B  F03D         	call	_straight	;wreg free
   430                           
   431                           ;main.c: 233: }
   432                           ;main.c: 234: break;
   433  007E0C  D781               	goto	l93
   434  007E0E                     
   435                           ;main.c: 236: turnRightSmall();
   436  007E0E  EC8D  F03D         	call	_turnRightSmall	;wreg free
   437                           
   438                           ;main.c: 237: break;
   439  007E12  D77E               	goto	l93
   440  007E14                     
   441                           ;main.c: 239: turnLeftSmall();
   442  007E14  EC74  F03D         	call	_turnLeftSmall	;wreg free
   443                           
   444                           ;main.c: 240: break;
   445  007E18  D77B               	goto	l93
   446  007E1A                     
   447                           ;main.c: 242: turnRight();
   448  007E1A  EC18  F03D         	call	_turnRight	;wreg free
   449                           
   450                           ;main.c: 243: break;
   451  007E1E  D778               	goto	l93
   452  007E20                     
   453                           ;main.c: 245: turnLeft();
   454  007E20  EC07  F03D         	call	_turnLeft	;wreg free
   455                           
   456                           ;main.c: 246: break;
   457  007E24  D775               	goto	l93
   458  007E26                     
   459                           ;main.c: 248: straight();
   460  007E26  EC5B  F03D         	call	_straight	;wreg free
   461                           
   462                           ;main.c: 250: }
   463                           
   464                           ;main.c: 249: break;
   465  007E2A  D772               	goto	l93
   466  007E2C                     l95:
   467  007E2C  5030               	movf	main@road_state,w,c
   468                           
   469                           ; Switch size 1, requested type "space"
   470                           ; Number of cases is 6, Range of values is 0 to 6
   471                           ; switch strategies available:
   472                           ; Name         Instructions Cycles
   473                           ; simple_byte           19    10 (average)
   474                           ;	Chosen strategy is simple_byte
   475  007E2E  0A00               	xorlw	0	; case 0
   476  007E30  B4D8               	btfsc	status,2,c
   477  007E32  D7F9               	goto	l106
   478  007E34  0A02               	xorlw	2	; case 2
   479  007E36  B4D8               	btfsc	status,2,c
   480  007E38  D7CD               	goto	l96
   481  007E3A  0A01               	xorlw	1	; case 3
   482  007E3C  B4D8               	btfsc	status,2,c
   483  007E3E  D7EA               	goto	l103
   484  007E40  0A07               	xorlw	7	; case 4
   485  007E42  B4D8               	btfsc	status,2,c
   486  007E44  D7ED               	goto	l105
   487  007E46  0A01               	xorlw	1	; case 5
   488  007E48  B4D8               	btfsc	status,2,c
   489  007E4A  D7E1               	goto	l102
   490  007E4C  0A03               	xorlw	3	; case 6
   491  007E4E  B4D8               	btfsc	status,2,c
   492  007E50  D7E4               	goto	l104
   493  007E52  D75E               	goto	l93
   494  007E54                     __end_of_main:
   495                           	opt stack 0
   496                           tblptru	equ	0xFF8
   497                           indf2	equ	0xFDF
   498                           fsr2h	equ	0xFDA
   499                           fsr2l	equ	0xFD9
   500                           status	equ	0xFD8
   501                           
   502 ;; *************** function _turnRightSmall *****************
   503 ;; Defined at:
   504 ;;		line 124 in file "main.c"
   505 ;; Parameters:    Size  Location     Type
   506 ;;		None
   507 ;; Auto vars:     Size  Location     Type
   508 ;;		None
   509 ;; Return value:  Size  Location     Type
   510 ;;                  2   61[None  ] int 
   511 ;; Registers used:
   512 ;;		wreg, status,2, status,0, cstack
   513 ;; Tracked objects:
   514 ;;		On entry : 0/0
   515 ;;		On exit  : 0/0
   516 ;;		Unchanged: 0/0
   517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   518 ;;      Params:         0       0       0       0       0       0       0       0       0
   519 ;;      Locals:         0       0       0       0       0       0       0       0       0
   520 ;;      Temps:          0       0       0       0       0       0       0       0       0
   521 ;;      Totals:         0       0       0       0       0       0       0       0       0
   522 ;;Total ram usage:        0 bytes
   523 ;; Hardware stack levels used:    1
   524 ;; Hardware stack levels required when called:    1
   525 ;; This function calls:
   526 ;;		_wait00
   527 ;; This function is called by:
   528 ;;		_main
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text1
   533  007B1A                     __ptext1:
   534                           	opt stack 0
   535  007B1A                     _turnRightSmall:
   536                           	opt stack 29
   537                           
   538                           ;main.c: 125: PORTC=0x03;
   539                           
   540                           ;incstack = 0
   541  007B1A  0E03               	movlw	3
   542  007B1C  6E82               	movwf	3970,c	;volatile
   543                           
   544                           ;main.c: 126: wait00(10);
   545  007B1E  0E00               	movlw	0
   546  007B20  6E02               	movwf	wait00@k+1,c
   547  007B22  0E0A               	movlw	10
   548  007B24  6E01               	movwf	wait00@k,c
   549  007B26  ECC0  F03D         	call	_wait00	;wreg free
   550                           
   551                           ;main.c: 127: PORTC=0x01;
   552  007B2A  0E01               	movlw	1
   553  007B2C  6E82               	movwf	3970,c	;volatile
   554                           
   555                           ;main.c: 128: wait00(13);
   556  007B2E  0E00               	movlw	0
   557  007B30  6E02               	movwf	wait00@k+1,c
   558  007B32  0E0D               	movlw	13
   559  007B34  6E01               	movwf	wait00@k,c
   560  007B36  ECC0  F03D         	call	_wait00	;wreg free
   561                           
   562                           ;main.c: 129: PORTC = 0x00;
   563  007B3A  0E00               	movlw	0
   564  007B3C  6E82               	movwf	3970,c	;volatile
   565                           
   566                           ;main.c: 130: wait00(50);
   567  007B3E  0E00               	movlw	0
   568  007B40  6E02               	movwf	wait00@k+1,c
   569  007B42  0E32               	movlw	50
   570  007B44  6E01               	movwf	wait00@k,c
   571  007B46  ECC0  F03D         	call	_wait00	;wreg free
   572  007B4A  0012               	return		;funcret
   573  007B4C                     __end_of_turnRightSmall:
   574                           	opt stack 0
   575                           tblptru	equ	0xFF8
   576                           indf2	equ	0xFDF
   577                           fsr2h	equ	0xFDA
   578                           fsr2l	equ	0xFD9
   579                           status	equ	0xFD8
   580                           
   581 ;; *************** function _turnRight *****************
   582 ;; Defined at:
   583 ;;		line 107 in file "main.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  2   55[None  ] int 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   597 ;;      Params:         0       0       0       0       0       0       0       0       0
   598 ;;      Locals:         0       0       0       0       0       0       0       0       0
   599 ;;      Temps:          0       0       0       0       0       0       0       0       0
   600 ;;      Totals:         0       0       0       0       0       0       0       0       0
   601 ;;Total ram usage:        0 bytes
   602 ;; Hardware stack levels used:    1
   603 ;; Hardware stack levels required when called:    1
   604 ;; This function calls:
   605 ;;		_wait00
   606 ;; This function is called by:
   607 ;;		_main
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text2
   612  007A30                     __ptext2:
   613                           	opt stack 0
   614  007A30                     _turnRight:
   615                           	opt stack 29
   616                           
   617                           ;main.c: 108: PORTC=0x01;
   618                           
   619                           ;incstack = 0
   620  007A30  0E01               	movlw	1
   621  007A32  6E82               	movwf	3970,c	;volatile
   622                           
   623                           ;main.c: 109: wait00(42);
   624  007A34  0E00               	movlw	0
   625  007A36  6E02               	movwf	wait00@k+1,c
   626  007A38  0E2A               	movlw	42
   627  007A3A  6E01               	movwf	wait00@k,c
   628  007A3C  ECC0  F03D         	call	_wait00	;wreg free
   629                           
   630                           ;main.c: 110: PORTC = 0x00;
   631  007A40  0E00               	movlw	0
   632  007A42  6E82               	movwf	3970,c	;volatile
   633                           
   634                           ;main.c: 111: wait00(40);
   635  007A44  0E00               	movlw	0
   636  007A46  6E02               	movwf	wait00@k+1,c
   637  007A48  0E28               	movlw	40
   638  007A4A  6E01               	movwf	wait00@k,c
   639  007A4C  ECC0  F03D         	call	_wait00	;wreg free
   640  007A50  0012               	return		;funcret
   641  007A52                     __end_of_turnRight:
   642                           	opt stack 0
   643                           tblptru	equ	0xFF8
   644                           indf2	equ	0xFDF
   645                           fsr2h	equ	0xFDA
   646                           fsr2l	equ	0xFD9
   647                           status	equ	0xFD8
   648                           
   649 ;; *************** function _turnLeftSmall *****************
   650 ;; Defined at:
   651 ;;		line 115 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  2   58[None  ] int 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   665 ;;      Params:         0       0       0       0       0       0       0       0       0
   666 ;;      Locals:         0       0       0       0       0       0       0       0       0
   667 ;;      Temps:          0       0       0       0       0       0       0       0       0
   668 ;;      Totals:         0       0       0       0       0       0       0       0       0
   669 ;;Total ram usage:        0 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    1
   672 ;; This function calls:
   673 ;;		_wait00
   674 ;; This function is called by:
   675 ;;		_main
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text3
   680  007AE8                     __ptext3:
   681                           	opt stack 0
   682  007AE8                     _turnLeftSmall:
   683                           	opt stack 29
   684                           
   685                           ;main.c: 116: PORTC=0x03;
   686                           
   687                           ;incstack = 0
   688  007AE8  0E03               	movlw	3
   689  007AEA  6E82               	movwf	3970,c	;volatile
   690                           
   691                           ;main.c: 117: wait00(10);
   692  007AEC  0E00               	movlw	0
   693  007AEE  6E02               	movwf	wait00@k+1,c
   694  007AF0  0E0A               	movlw	10
   695  007AF2  6E01               	movwf	wait00@k,c
   696  007AF4  ECC0  F03D         	call	_wait00	;wreg free
   697                           
   698                           ;main.c: 118: PORTC=0x02;
   699  007AF8  0E02               	movlw	2
   700  007AFA  6E82               	movwf	3970,c	;volatile
   701                           
   702                           ;main.c: 119: wait00(15);
   703  007AFC  0E00               	movlw	0
   704  007AFE  6E02               	movwf	wait00@k+1,c
   705  007B00  0E0F               	movlw	15
   706  007B02  6E01               	movwf	wait00@k,c
   707  007B04  ECC0  F03D         	call	_wait00	;wreg free
   708                           
   709                           ;main.c: 120: PORTC = 0x00;
   710  007B08  0E00               	movlw	0
   711  007B0A  6E82               	movwf	3970,c	;volatile
   712                           
   713                           ;main.c: 121: wait00(50);
   714  007B0C  0E00               	movlw	0
   715  007B0E  6E02               	movwf	wait00@k+1,c
   716  007B10  0E32               	movlw	50
   717  007B12  6E01               	movwf	wait00@k,c
   718  007B14  ECC0  F03D         	call	_wait00	;wreg free
   719  007B18  0012               	return		;funcret
   720  007B1A                     __end_of_turnLeftSmall:
   721                           	opt stack 0
   722                           tblptru	equ	0xFF8
   723                           indf2	equ	0xFDF
   724                           fsr2h	equ	0xFDA
   725                           fsr2l	equ	0xFD9
   726                           status	equ	0xFD8
   727                           
   728 ;; *************** function _turnLeft *****************
   729 ;; Defined at:
   730 ;;		line 100 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  2   52[None  ] int 
   737 ;; Registers used:
   738 ;;		wreg, status,2, status,0, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   744 ;;      Params:         0       0       0       0       0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0       0       0
   747 ;;      Totals:         0       0       0       0       0       0       0       0       0
   748 ;;Total ram usage:        0 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; Hardware stack levels required when called:    1
   751 ;; This function calls:
   752 ;;		_wait00
   753 ;; This function is called by:
   754 ;;		_main
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           	psect	text4
   759  007A0E                     __ptext4:
   760                           	opt stack 0
   761  007A0E                     _turnLeft:
   762                           	opt stack 29
   763                           
   764                           ;main.c: 101: PORTC=0x02;
   765                           
   766                           ;incstack = 0
   767  007A0E  0E02               	movlw	2
   768  007A10  6E82               	movwf	3970,c	;volatile
   769                           
   770                           ;main.c: 102: wait00(50);
   771  007A12  0E00               	movlw	0
   772  007A14  6E02               	movwf	wait00@k+1,c
   773  007A16  0E32               	movlw	50
   774  007A18  6E01               	movwf	wait00@k,c
   775  007A1A  ECC0  F03D         	call	_wait00	;wreg free
   776                           
   777                           ;main.c: 103: PORTC = 0x00;
   778  007A1E  0E00               	movlw	0
   779  007A20  6E82               	movwf	3970,c	;volatile
   780                           
   781                           ;main.c: 104: wait00(40);
   782  007A22  0E00               	movlw	0
   783  007A24  6E02               	movwf	wait00@k+1,c
   784  007A26  0E28               	movlw	40
   785  007A28  6E01               	movwf	wait00@k,c
   786  007A2A  ECC0  F03D         	call	_wait00	;wreg free
   787  007A2E  0012               	return		;funcret
   788  007A30                     __end_of_turnLeft:
   789                           	opt stack 0
   790                           tblptru	equ	0xFF8
   791                           indf2	equ	0xFDF
   792                           fsr2h	equ	0xFDA
   793                           fsr2l	equ	0xFD9
   794                           status	equ	0xFD8
   795                           
   796 ;; *************** function _straight *****************
   797 ;; Defined at:
   798 ;;		line 143 in file "main.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  2   67[None  ] int 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   812 ;;      Params:         0       0       0       0       0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    1
   819 ;; This function calls:
   820 ;;		_wait00
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text5
   827  007AB6                     __ptext5:
   828                           	opt stack 0
   829  007AB6                     _straight:
   830                           	opt stack 29
   831                           
   832                           ;main.c: 144: PORTC=0x03;
   833                           
   834                           ;incstack = 0
   835  007AB6  0E03               	movlw	3
   836  007AB8  6E82               	movwf	3970,c	;volatile
   837                           
   838                           ;main.c: 145: wait00(48);
   839  007ABA  0E00               	movlw	0
   840  007ABC  6E02               	movwf	wait00@k+1,c
   841  007ABE  0E30               	movlw	48
   842  007AC0  6E01               	movwf	wait00@k,c
   843  007AC2  ECC0  F03D         	call	_wait00	;wreg free
   844                           
   845                           ;main.c: 146: PORTC=0x02;
   846  007AC6  0E02               	movlw	2
   847  007AC8  6E82               	movwf	3970,c	;volatile
   848                           
   849                           ;main.c: 147: wait00(4);
   850  007ACA  0E00               	movlw	0
   851  007ACC  6E02               	movwf	wait00@k+1,c
   852  007ACE  0E04               	movlw	4
   853  007AD0  6E01               	movwf	wait00@k,c
   854  007AD2  ECC0  F03D         	call	_wait00	;wreg free
   855                           
   856                           ;main.c: 148: PORTC=0x00;
   857  007AD6  0E00               	movlw	0
   858  007AD8  6E82               	movwf	3970,c	;volatile
   859                           
   860                           ;main.c: 149: wait00(40);
   861  007ADA  0E00               	movlw	0
   862  007ADC  6E02               	movwf	wait00@k+1,c
   863  007ADE  0E28               	movlw	40
   864  007AE0  6E01               	movwf	wait00@k,c
   865  007AE2  ECC0  F03D         	call	_wait00	;wreg free
   866  007AE6  0012               	return		;funcret
   867  007AE8                     __end_of_straight:
   868                           	opt stack 0
   869                           tblptru	equ	0xFF8
   870                           indf2	equ	0xFDF
   871                           fsr2h	equ	0xFDA
   872                           fsr2l	equ	0xFD9
   873                           status	equ	0xFD8
   874                           
   875 ;; *************** function _slowDown *****************
   876 ;; Defined at:
   877 ;;		line 134 in file "main.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  2   64[None  ] int 
   884 ;; Registers used:
   885 ;;		wreg, status,2, status,0, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   891 ;;      Params:         0       0       0       0       0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0       0       0
   894 ;;      Totals:         0       0       0       0       0       0       0       0       0
   895 ;;Total ram usage:        0 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    1
   898 ;; This function calls:
   899 ;;		_wait00
   900 ;; This function is called by:
   901 ;;		_main
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text6
   906  007A84                     __ptext6:
   907                           	opt stack 0
   908  007A84                     _slowDown:
   909                           	opt stack 29
   910                           
   911                           ;main.c: 135: PORTC=0x03;
   912                           
   913                           ;incstack = 0
   914  007A84  0E03               	movlw	3
   915  007A86  6E82               	movwf	3970,c	;volatile
   916                           
   917                           ;main.c: 136: wait00(48);
   918  007A88  0E00               	movlw	0
   919  007A8A  6E02               	movwf	wait00@k+1,c
   920  007A8C  0E30               	movlw	48
   921  007A8E  6E01               	movwf	wait00@k,c
   922  007A90  ECC0  F03D         	call	_wait00	;wreg free
   923                           
   924                           ;main.c: 137: PORTC=0x02;
   925  007A94  0E02               	movlw	2
   926  007A96  6E82               	movwf	3970,c	;volatile
   927                           
   928                           ;main.c: 138: wait00(4);
   929  007A98  0E00               	movlw	0
   930  007A9A  6E02               	movwf	wait00@k+1,c
   931  007A9C  0E04               	movlw	4
   932  007A9E  6E01               	movwf	wait00@k,c
   933  007AA0  ECC0  F03D         	call	_wait00	;wreg free
   934                           
   935                           ;main.c: 139: PORTC=0x00;
   936  007AA4  0E00               	movlw	0
   937  007AA6  6E82               	movwf	3970,c	;volatile
   938                           
   939                           ;main.c: 140: wait00(60);
   940  007AA8  0E00               	movlw	0
   941  007AAA  6E02               	movwf	wait00@k+1,c
   942  007AAC  0E3C               	movlw	60
   943  007AAE  6E01               	movwf	wait00@k,c
   944  007AB0  ECC0  F03D         	call	_wait00	;wreg free
   945  007AB4  0012               	return		;funcret
   946  007AB6                     __end_of_slowDown:
   947                           	opt stack 0
   948                           tblptru	equ	0xFF8
   949                           indf2	equ	0xFDF
   950                           fsr2h	equ	0xFDA
   951                           fsr2l	equ	0xFD9
   952                           status	equ	0xFD8
   953                           
   954 ;; *************** function _led_sens *****************
   955 ;; Defined at:
   956 ;;		line 23 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;		None
   961 ;; Return value:  Size  Location     Type
   962 ;;                  2   28[None  ] int 
   963 ;; Registers used:
   964 ;;		None
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   970 ;;      Params:         0       0       0       0       0       0       0       0       0
   971 ;;      Locals:         0       0       0       0       0       0       0       0       0
   972 ;;      Temps:          0       0       0       0       0       0       0       0       0
   973 ;;      Totals:         0       0       0       0       0       0       0       0       0
   974 ;;Total ram usage:        0 bytes
   975 ;; Hardware stack levels used:    1
   976 ;; This function calls:
   977 ;;		Nothing
   978 ;; This function is called by:
   979 ;;		_main
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text7
   984  007B4C                     __ptext7:
   985                           	opt stack 0
   986  007B4C                     _led_sens:
   987                           	opt stack 30
   988                           
   989                           ;main.c: 25: PORTAbits.RA0 = PORTBbits.RB0;
   990                           
   991                           ;incstack = 0
   992  007B4C  A081               	btfss	3969,0,c	;volatile
   993  007B4E  D002               	bra	u45
   994  007B50  8080               	bsf	3968,0,c	;volatile
   995  007B52  D001               	bra	u47
   996  007B54                     u45:
   997  007B54  9080               	bcf	3968,0,c	;volatile
   998  007B56                     u47:
   999                           
  1000                           ;main.c: 26: PORTAbits.RA1 = PORTBbits.RB1;
  1001  007B56  A281               	btfss	3969,1,c	;volatile
  1002  007B58  D002               	bra	u55
  1003  007B5A  8280               	bsf	3968,1,c	;volatile
  1004  007B5C  D001               	bra	u57
  1005  007B5E                     u55:
  1006  007B5E  9280               	bcf	3968,1,c	;volatile
  1007  007B60                     u57:
  1008                           
  1009                           ;main.c: 27: PORTAbits.RA2 = PORTBbits.RB2;
  1010  007B60  A481               	btfss	3969,2,c	;volatile
  1011  007B62  D002               	bra	u65
  1012  007B64  8480               	bsf	3968,2,c	;volatile
  1013  007B66  D001               	bra	u67
  1014  007B68                     u65:
  1015  007B68  9480               	bcf	3968,2,c	;volatile
  1016  007B6A                     u67:
  1017                           
  1018                           ;main.c: 28: PORTAbits.RA3 = PORTBbits.RB3;
  1019  007B6A  A681               	btfss	3969,3,c	;volatile
  1020  007B6C  D002               	bra	u75
  1021  007B6E  8680               	bsf	3968,3,c	;volatile
  1022  007B70  D001               	bra	u77
  1023  007B72                     u75:
  1024  007B72  9680               	bcf	3968,3,c	;volatile
  1025  007B74                     u77:
  1026                           
  1027                           ;main.c: 29: PORTAbits.RA4 = PORTBbits.RB4;
  1028  007B74  A881               	btfss	3969,4,c	;volatile
  1029  007B76  D002               	bra	u85
  1030  007B78  8880               	bsf	3968,4,c	;volatile
  1031  007B7A  D001               	bra	u87
  1032  007B7C                     u85:
  1033  007B7C  9880               	bcf	3968,4,c	;volatile
  1034  007B7E                     u87:
  1035  007B7E  0012               	return		;funcret
  1036  007B80                     __end_of_led_sens:
  1037                           	opt stack 0
  1038                           tblptru	equ	0xFF8
  1039                           indf2	equ	0xFDF
  1040                           fsr2h	equ	0xFDA
  1041                           fsr2l	equ	0xFD9
  1042                           status	equ	0xFD8
  1043                           
  1044 ;; *************** function _isInCurve *****************
  1045 ;; Defined at:
  1046 ;;		line 171 in file "main.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  states          2    0[COMRAM] PTR enum E3329
  1049 ;;		 -> main@states(30), 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  i               2    3[COMRAM] int 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  2    0[COMRAM] int 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1061 ;;      Params:         2       0       0       0       0       0       0       0       0
  1062 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1063 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1064 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1065 ;;Total ram usage:        5 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text8
  1075  007C1A                     __ptext8:
  1076                           	opt stack 0
  1077  007C1A                     _isInCurve:
  1078                           	opt stack 30
  1079                           
  1080                           ;main.c: 172: for (int i = 0; i < 30; i++) {
  1081                           
  1082                           ;incstack = 0
  1083  007C1A  0E00               	movlw	0
  1084  007C1C  6E05               	movwf	isInCurve@i+1,c
  1085  007C1E  0E00               	movlw	0
  1086  007C20  6E04               	movwf	isInCurve@i,c
  1087  007C22                     l1321:
  1088  007C22  BE05               	btfsc	isInCurve@i+1,7,c
  1089  007C24  D006               	goto	l80
  1090  007C26  5005               	movf	isInCurve@i+1,w,c
  1091  007C28  E120               	bnz	l1337
  1092  007C2A  0E1E               	movlw	30
  1093  007C2C  5C04               	subwf	isInCurve@i,w,c
  1094  007C2E  B0D8               	btfsc	status,0,c
  1095  007C30  D01C               	goto	u1380
  1096  007C32                     l80:
  1097                           
  1098                           ;main.c: 173: if (states[i] == off_left || states[i] == off_right) {
  1099  007C32  5004               	movf	isInCurve@i,w,c
  1100  007C34  2401               	addwf	isInCurve@states,w,c
  1101  007C36  6ED9               	movwf	fsr2l,c
  1102  007C38  5005               	movf	isInCurve@i+1,w,c
  1103  007C3A  2002               	addwfc	isInCurve@states+1,w,c
  1104  007C3C  6EDA               	movwf	fsr2h,c
  1105  007C3E  0E06               	movlw	6
  1106  007C40  18DE               	xorwf	postinc2,w,c
  1107  007C42  B4D8               	btfsc	status,2,c
  1108  007C44  D00A               	goto	u1370
  1109  007C46  5004               	movf	isInCurve@i,w,c
  1110  007C48  2401               	addwf	isInCurve@states,w,c
  1111  007C4A  6ED9               	movwf	fsr2l,c
  1112  007C4C  5005               	movf	isInCurve@i+1,w,c
  1113  007C4E  2002               	addwfc	isInCurve@states+1,w,c
  1114  007C50  6EDA               	movwf	fsr2h,c
  1115  007C52  0E04               	movlw	4
  1116  007C54  18DE               	xorwf	postinc2,w,c
  1117  007C56  A4D8               	btfss	status,2,c
  1118  007C58  D005               	goto	l82
  1119  007C5A                     u1370:
  1120                           
  1121                           ;main.c: 174: return 1;
  1122  007C5A  0E00               	movlw	0
  1123  007C5C  6E02               	movwf	?_isInCurve+1,c
  1124  007C5E  0E01               	movlw	1
  1125  007C60  6E01               	movwf	?_isInCurve,c
  1126  007C62  0012               	return	
  1127  007C64                     l82:
  1128  007C64  4A04               	infsnz	isInCurve@i,f,c
  1129  007C66  2A05               	incf	isInCurve@i+1,f,c
  1130  007C68  D7DC               	goto	l1321
  1131  007C6A                     u1380:
  1132  007C6A                     l1337:
  1133                           
  1134                           ;main.c: 175: }
  1135                           ;main.c: 176: }
  1136                           ;main.c: 178: return 0;
  1137  007C6A  0E00               	movlw	0
  1138  007C6C  6E02               	movwf	?_isInCurve+1,c
  1139  007C6E  0E00               	movlw	0
  1140  007C70  6E01               	movwf	?_isInCurve,c
  1141  007C72  0012               	return	
  1142  007C74                     __end_of_isInCurve:
  1143                           	opt stack 0
  1144                           tblptru	equ	0xFF8
  1145                           indf2	equ	0xFDF
  1146                           postinc2	equ	0xFDE
  1147                           fsr2h	equ	0xFDA
  1148                           fsr2l	equ	0xFD9
  1149                           status	equ	0xFD8
  1150                           
  1151 ;; *************** function _isAllStraight *****************
  1152 ;; Defined at:
  1153 ;;		line 161 in file "main.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  states          2    0[COMRAM] PTR enum E3329
  1156 ;;		 -> main@states(30), 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  i               2    3[COMRAM] int 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  2    0[COMRAM] int 
  1161 ;; Registers used:
  1162 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         2       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        5 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; This function calls:
  1175 ;;		Nothing
  1176 ;; This function is called by:
  1177 ;;		_main
  1178 ;; This function uses a non-reentrant model
  1179 ;;
  1180                           
  1181                           	psect	text9
  1182  007BC2                     __ptext9:
  1183                           	opt stack 0
  1184  007BC2                     _isAllStraight:
  1185                           	opt stack 30
  1186                           
  1187                           ;main.c: 162: for (int i = 0; i < 30; i++) {
  1188                           
  1189                           ;incstack = 0
  1190  007BC2  0E00               	movlw	0
  1191  007BC4  6E05               	movwf	isAllStraight@i+1,c
  1192  007BC6  0E00               	movlw	0
  1193  007BC8  6E04               	movwf	isAllStraight@i,c
  1194  007BCA                     l1299:
  1195  007BCA  BE05               	btfsc	isAllStraight@i+1,7,c
  1196  007BCC  D006               	goto	l74
  1197  007BCE  5005               	movf	isAllStraight@i+1,w,c
  1198  007BD0  E11F               	bnz	l1315
  1199  007BD2  0E1E               	movlw	30
  1200  007BD4  5C04               	subwf	isAllStraight@i,w,c
  1201  007BD6  B0D8               	btfsc	status,0,c
  1202  007BD8  D01B               	goto	u1340
  1203  007BDA                     l74:
  1204                           
  1205                           ;main.c: 163: if (states[i] != on_track && states[i] != straight_line) {
  1206  007BDA  5004               	movf	isAllStraight@i,w,c
  1207  007BDC  2401               	addwf	isAllStraight@states,w,c
  1208  007BDE  6ED9               	movwf	fsr2l,c
  1209  007BE0  5005               	movf	isAllStraight@i+1,w,c
  1210  007BE2  2002               	addwfc	isAllStraight@states+1,w,c
  1211  007BE4  6EDA               	movwf	fsr2h,c
  1212  007BE6  50DF               	movf	indf2,w,c
  1213  007BE8  B4D8               	btfsc	status,2,c
  1214  007BEA  D00F               	goto	l76
  1215  007BEC  5004               	movf	isAllStraight@i,w,c
  1216  007BEE  2401               	addwf	isAllStraight@states,w,c
  1217  007BF0  6ED9               	movwf	fsr2l,c
  1218  007BF2  5005               	movf	isAllStraight@i+1,w,c
  1219  007BF4  2002               	addwfc	isAllStraight@states+1,w,c
  1220  007BF6  6EDA               	movwf	fsr2h,c
  1221  007BF8  0E02               	movlw	2
  1222  007BFA  18DE               	xorwf	postinc2,w,c
  1223  007BFC  B4D8               	btfsc	status,2,c
  1224  007BFE  D005               	goto	l76
  1225                           
  1226                           ;main.c: 164: return 0;
  1227  007C00  0E00               	movlw	0
  1228  007C02  6E02               	movwf	?_isAllStraight+1,c
  1229  007C04  0E00               	movlw	0
  1230  007C06  6E01               	movwf	?_isAllStraight,c
  1231  007C08  0012               	return	
  1232  007C0A                     l76:
  1233  007C0A  4A04               	infsnz	isAllStraight@i,f,c
  1234  007C0C  2A05               	incf	isAllStraight@i+1,f,c
  1235  007C0E  D7DD               	goto	l1299
  1236  007C10                     u1340:
  1237  007C10                     l1315:
  1238                           
  1239                           ;main.c: 165: }
  1240                           ;main.c: 166: }
  1241                           ;main.c: 168: return 1;
  1242  007C10  0E00               	movlw	0
  1243  007C12  6E02               	movwf	?_isAllStraight+1,c
  1244  007C14  0E01               	movlw	1
  1245  007C16  6E01               	movwf	?_isAllStraight,c
  1246  007C18  0012               	return	
  1247  007C1A                     __end_of_isAllStraight:
  1248                           	opt stack 0
  1249                           tblptru	equ	0xFF8
  1250                           indf2	equ	0xFDF
  1251                           postinc2	equ	0xFDE
  1252                           fsr2h	equ	0xFDA
  1253                           fsr2l	equ	0xFD9
  1254                           status	equ	0xFD8
  1255                           
  1256 ;; *************** function _getRoadState *****************
  1257 ;; Defined at:
  1258 ;;		line 43 in file "main.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  a               2    0[COMRAM] short 
  1261 ;;  b               2    2[COMRAM] short 
  1262 ;;  c               2    4[COMRAM] short 
  1263 ;;  d               2    6[COMRAM] short 
  1264 ;;  e               2    8[COMRAM] short 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      enum E3329
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1276 ;;      Params:        10       0       0       0       0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1279 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1280 ;;Total ram usage:       10 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text10
  1290  007E54                     __ptext10:
  1291                           	opt stack 0
  1292  007E54                     _getRoadState:
  1293                           	opt stack 30
  1294                           
  1295                           ;main.c: 44: if ( (a == 1 && b == 1 && c == 1
  1296                           ;main.c: 45: && d == 1 && e == 1)
  1297                           ;main.c: 46: || (a == 0 && b == 0 && c == 0
  1298                           ;main.c: 47: && d == 0 && e == 0)) {
  1299                           
  1300                           ;incstack = 0
  1301  007E54  0401               	decf	getRoadState@a,w,c
  1302  007E56  1002               	iorwf	getRoadState@a+1,w,c
  1303  007E58  A4D8               	btfss	status,2,c
  1304  007E5A  D010               	goto	u870
  1305  007E5C  0403               	decf	getRoadState@b,w,c
  1306  007E5E  1004               	iorwf	getRoadState@b+1,w,c
  1307  007E60  A4D8               	btfss	status,2,c
  1308  007E62  D00C               	goto	u870
  1309  007E64  0405               	decf	getRoadState@c,w,c
  1310  007E66  1006               	iorwf	getRoadState@c+1,w,c
  1311  007E68  A4D8               	btfss	status,2,c
  1312  007E6A  D008               	goto	u870
  1313  007E6C  0407               	decf	getRoadState@d,w,c
  1314  007E6E  1008               	iorwf	getRoadState@d+1,w,c
  1315  007E70  A4D8               	btfss	status,2,c
  1316  007E72  D004               	goto	u870
  1317  007E74  0409               	decf	getRoadState@e,w,c
  1318  007E76  100A               	iorwf	getRoadState@e+1,w,c
  1319  007E78  B4D8               	btfsc	status,2,c
  1320  007E7A  D014               	goto	u920
  1321  007E7C                     u870:
  1322  007E7C  5001               	movf	getRoadState@a,w,c
  1323  007E7E  1002               	iorwf	getRoadState@a+1,w,c
  1324  007E80  A4D8               	btfss	status,2,c
  1325  007E82  D012               	goto	l32
  1326  007E84  5003               	movf	getRoadState@b,w,c
  1327  007E86  1004               	iorwf	getRoadState@b+1,w,c
  1328  007E88  A4D8               	btfss	status,2,c
  1329  007E8A  D00E               	goto	l32
  1330  007E8C  5005               	movf	getRoadState@c,w,c
  1331  007E8E  1006               	iorwf	getRoadState@c+1,w,c
  1332  007E90  A4D8               	btfss	status,2,c
  1333  007E92  D00A               	goto	l32
  1334  007E94  5007               	movf	getRoadState@d,w,c
  1335  007E96  1008               	iorwf	getRoadState@d+1,w,c
  1336  007E98  A4D8               	btfss	status,2,c
  1337  007E9A  D006               	goto	l32
  1338  007E9C  5009               	movf	getRoadState@e,w,c
  1339  007E9E  100A               	iorwf	getRoadState@e+1,w,c
  1340  007EA0  A4D8               	btfss	status,2,c
  1341  007EA2  D002               	goto	l32
  1342  007EA4                     u920:
  1343                           
  1344                           ;main.c: 48: return off_track;
  1345  007EA4  0E01               	movlw	1
  1346  007EA6  0012               	return	
  1347  007EA8                     l32:
  1348                           
  1349                           ;main.c: 49: }
  1350                           ;main.c: 51: if ( (c == 0
  1351                           ;main.c: 52: && a == 1 && b == 1
  1352                           ;main.c: 53: && d == 1 && e == 1)
  1353                           ;main.c: 54: || (c == 1
  1354                           ;main.c: 55: && a == 0 && b == 0
  1355                           ;main.c: 56: && d == 0 && e == 0)) {
  1356  007EA8  5005               	movf	getRoadState@c,w,c
  1357  007EAA  1006               	iorwf	getRoadState@c+1,w,c
  1358  007EAC  A4D8               	btfss	status,2,c
  1359  007EAE  D010               	goto	u970
  1360  007EB0  0401               	decf	getRoadState@a,w,c
  1361  007EB2  1002               	iorwf	getRoadState@a+1,w,c
  1362  007EB4  A4D8               	btfss	status,2,c
  1363  007EB6  D00C               	goto	u970
  1364  007EB8  0403               	decf	getRoadState@b,w,c
  1365  007EBA  1004               	iorwf	getRoadState@b+1,w,c
  1366  007EBC  A4D8               	btfss	status,2,c
  1367  007EBE  D008               	goto	u970
  1368  007EC0  0407               	decf	getRoadState@d,w,c
  1369  007EC2  1008               	iorwf	getRoadState@d+1,w,c
  1370  007EC4  A4D8               	btfss	status,2,c
  1371  007EC6  D004               	goto	u970
  1372  007EC8  0409               	decf	getRoadState@e,w,c
  1373  007ECA  100A               	iorwf	getRoadState@e+1,w,c
  1374  007ECC  B4D8               	btfsc	status,2,c
  1375  007ECE  D014               	goto	u1020
  1376  007ED0                     u970:
  1377  007ED0  0405               	decf	getRoadState@c,w,c
  1378  007ED2  1006               	iorwf	getRoadState@c+1,w,c
  1379  007ED4  A4D8               	btfss	status,2,c
  1380  007ED6  D012               	goto	l38
  1381  007ED8  5001               	movf	getRoadState@a,w,c
  1382  007EDA  1002               	iorwf	getRoadState@a+1,w,c
  1383  007EDC  A4D8               	btfss	status,2,c
  1384  007EDE  D00E               	goto	l38
  1385  007EE0  5003               	movf	getRoadState@b,w,c
  1386  007EE2  1004               	iorwf	getRoadState@b+1,w,c
  1387  007EE4  A4D8               	btfss	status,2,c
  1388  007EE6  D00A               	goto	l38
  1389  007EE8  5007               	movf	getRoadState@d,w,c
  1390  007EEA  1008               	iorwf	getRoadState@d+1,w,c
  1391  007EEC  A4D8               	btfss	status,2,c
  1392  007EEE  D006               	goto	l38
  1393  007EF0  5009               	movf	getRoadState@e,w,c
  1394  007EF2  100A               	iorwf	getRoadState@e+1,w,c
  1395  007EF4  A4D8               	btfss	status,2,c
  1396  007EF6  D002               	goto	l38
  1397  007EF8                     u1020:
  1398                           
  1399                           ;main.c: 57: return straight_line;
  1400  007EF8  0E02               	movlw	2
  1401  007EFA  0012               	return	
  1402  007EFC                     l38:
  1403                           
  1404                           ;main.c: 58: }
  1405                           ;main.c: 61: if (a == 1 && b == 0
  1406                           ;main.c: 62: && d == 1 && e == 1) {
  1407  007EFC  0401               	decf	getRoadState@a,w,c
  1408  007EFE  1002               	iorwf	getRoadState@a+1,w,c
  1409  007F00  A4D8               	btfss	status,2,c
  1410  007F02  D00E               	goto	l43
  1411  007F04  5003               	movf	getRoadState@b,w,c
  1412  007F06  1004               	iorwf	getRoadState@b+1,w,c
  1413  007F08  A4D8               	btfss	status,2,c
  1414  007F0A  D00A               	goto	l43
  1415  007F0C  0407               	decf	getRoadState@d,w,c
  1416  007F0E  1008               	iorwf	getRoadState@d+1,w,c
  1417  007F10  A4D8               	btfss	status,2,c
  1418  007F12  D006               	goto	l43
  1419  007F14  0409               	decf	getRoadState@e,w,c
  1420  007F16  100A               	iorwf	getRoadState@e+1,w,c
  1421  007F18  A4D8               	btfss	status,2,c
  1422  007F1A  D002               	goto	l43
  1423                           
  1424                           ;main.c: 63: return off_right_little;
  1425  007F1C  0E03               	movlw	3
  1426  007F1E  0012               	return	
  1427  007F20                     l43:
  1428                           
  1429                           ;main.c: 64: }
  1430                           ;main.c: 65: if (a == 1 && b == 1
  1431                           ;main.c: 66: && d == 0 && e == 1) {
  1432  007F20  0401               	decf	getRoadState@a,w,c
  1433  007F22  1002               	iorwf	getRoadState@a+1,w,c
  1434  007F24  A4D8               	btfss	status,2,c
  1435  007F26  D00E               	goto	l44
  1436  007F28  0403               	decf	getRoadState@b,w,c
  1437  007F2A  1004               	iorwf	getRoadState@b+1,w,c
  1438  007F2C  A4D8               	btfss	status,2,c
  1439  007F2E  D00A               	goto	l44
  1440  007F30  5007               	movf	getRoadState@d,w,c
  1441  007F32  1008               	iorwf	getRoadState@d+1,w,c
  1442  007F34  A4D8               	btfss	status,2,c
  1443  007F36  D006               	goto	l44
  1444  007F38  0409               	decf	getRoadState@e,w,c
  1445  007F3A  100A               	iorwf	getRoadState@e+1,w,c
  1446  007F3C  A4D8               	btfss	status,2,c
  1447  007F3E  D002               	goto	l44
  1448                           
  1449                           ;main.c: 67: return off_left_little;
  1450  007F40  0E05               	movlw	5
  1451  007F42  0012               	return	
  1452  007F44                     l44:
  1453                           
  1454                           ;main.c: 68: }
  1455                           ;main.c: 69: if (a == 0 && c == 1 && e == 1) {
  1456  007F44  5001               	movf	getRoadState@a,w,c
  1457  007F46  1002               	iorwf	getRoadState@a+1,w,c
  1458  007F48  A4D8               	btfss	status,2,c
  1459  007F4A  D00A               	goto	l45
  1460  007F4C  0405               	decf	getRoadState@c,w,c
  1461  007F4E  1006               	iorwf	getRoadState@c+1,w,c
  1462  007F50  A4D8               	btfss	status,2,c
  1463  007F52  D006               	goto	l45
  1464  007F54  0409               	decf	getRoadState@e,w,c
  1465  007F56  100A               	iorwf	getRoadState@e+1,w,c
  1466  007F58  A4D8               	btfss	status,2,c
  1467  007F5A  D002               	goto	l45
  1468                           
  1469                           ;main.c: 70: return off_right;
  1470  007F5C  0E04               	movlw	4
  1471  007F5E  0012               	return	
  1472  007F60                     l45:
  1473                           
  1474                           ;main.c: 71: }
  1475                           ;main.c: 72: if (a == 1 && c == 1 && e == 0) {
  1476  007F60  0401               	decf	getRoadState@a,w,c
  1477  007F62  1002               	iorwf	getRoadState@a+1,w,c
  1478  007F64  A4D8               	btfss	status,2,c
  1479  007F66  D00A               	goto	l46
  1480  007F68  0405               	decf	getRoadState@c,w,c
  1481  007F6A  1006               	iorwf	getRoadState@c+1,w,c
  1482  007F6C  A4D8               	btfss	status,2,c
  1483  007F6E  D006               	goto	l46
  1484  007F70  5009               	movf	getRoadState@e,w,c
  1485  007F72  100A               	iorwf	getRoadState@e+1,w,c
  1486  007F74  A4D8               	btfss	status,2,c
  1487  007F76  D002               	goto	l46
  1488                           
  1489                           ;main.c: 73: return off_left;
  1490  007F78  0E06               	movlw	6
  1491  007F7A  0012               	return	
  1492  007F7C                     l46:
  1493                           
  1494                           ;main.c: 74: }
  1495                           ;main.c: 77: if (a == 0 && b == 1
  1496                           ;main.c: 78: && d == 0 && e == 0) {
  1497  007F7C  5001               	movf	getRoadState@a,w,c
  1498  007F7E  1002               	iorwf	getRoadState@a+1,w,c
  1499  007F80  A4D8               	btfss	status,2,c
  1500  007F82  D00E               	goto	l47
  1501  007F84  0403               	decf	getRoadState@b,w,c
  1502  007F86  1004               	iorwf	getRoadState@b+1,w,c
  1503  007F88  A4D8               	btfss	status,2,c
  1504  007F8A  D00A               	goto	l47
  1505  007F8C  5007               	movf	getRoadState@d,w,c
  1506  007F8E  1008               	iorwf	getRoadState@d+1,w,c
  1507  007F90  A4D8               	btfss	status,2,c
  1508  007F92  D006               	goto	l47
  1509  007F94  5009               	movf	getRoadState@e,w,c
  1510  007F96  100A               	iorwf	getRoadState@e+1,w,c
  1511  007F98  A4D8               	btfss	status,2,c
  1512  007F9A  D002               	goto	l47
  1513                           
  1514                           ;main.c: 79: return off_right_little;
  1515  007F9C  0E03               	movlw	3
  1516  007F9E  0012               	return	
  1517  007FA0                     l47:
  1518                           
  1519                           ;main.c: 80: }
  1520                           ;main.c: 81: if (a == 0 && b == 0
  1521                           ;main.c: 82: && d == 1 && e == 0) {
  1522  007FA0  5001               	movf	getRoadState@a,w,c
  1523  007FA2  1002               	iorwf	getRoadState@a+1,w,c
  1524  007FA4  A4D8               	btfss	status,2,c
  1525  007FA6  D00E               	goto	l48
  1526  007FA8  5003               	movf	getRoadState@b,w,c
  1527  007FAA  1004               	iorwf	getRoadState@b+1,w,c
  1528  007FAC  A4D8               	btfss	status,2,c
  1529  007FAE  D00A               	goto	l48
  1530  007FB0  0407               	decf	getRoadState@d,w,c
  1531  007FB2  1008               	iorwf	getRoadState@d+1,w,c
  1532  007FB4  A4D8               	btfss	status,2,c
  1533  007FB6  D006               	goto	l48
  1534  007FB8  5009               	movf	getRoadState@e,w,c
  1535  007FBA  100A               	iorwf	getRoadState@e+1,w,c
  1536  007FBC  A4D8               	btfss	status,2,c
  1537  007FBE  D002               	goto	l48
  1538                           
  1539                           ;main.c: 83: return off_left_little;
  1540  007FC0  0E05               	movlw	5
  1541  007FC2  0012               	return	
  1542  007FC4                     l48:
  1543                           
  1544                           ;main.c: 84: }
  1545                           ;main.c: 85: if (a == 1 && c == 0 && e == 0) {
  1546  007FC4  0401               	decf	getRoadState@a,w,c
  1547  007FC6  1002               	iorwf	getRoadState@a+1,w,c
  1548  007FC8  A4D8               	btfss	status,2,c
  1549  007FCA  D00A               	goto	l49
  1550  007FCC  5005               	movf	getRoadState@c,w,c
  1551  007FCE  1006               	iorwf	getRoadState@c+1,w,c
  1552  007FD0  A4D8               	btfss	status,2,c
  1553  007FD2  D006               	goto	l49
  1554  007FD4  5009               	movf	getRoadState@e,w,c
  1555  007FD6  100A               	iorwf	getRoadState@e+1,w,c
  1556  007FD8  A4D8               	btfss	status,2,c
  1557  007FDA  D002               	goto	l49
  1558                           
  1559                           ;main.c: 86: return off_right;
  1560  007FDC  0E04               	movlw	4
  1561  007FDE  0012               	return	
  1562  007FE0                     l49:
  1563                           
  1564                           ;main.c: 87: }
  1565                           ;main.c: 88: if (a == 0 && c == 0 && e == 1) {
  1566  007FE0  5001               	movf	getRoadState@a,w,c
  1567  007FE2  1002               	iorwf	getRoadState@a+1,w,c
  1568  007FE4  A4D8               	btfss	status,2,c
  1569  007FE6  D00A               	goto	l50
  1570  007FE8  5005               	movf	getRoadState@c,w,c
  1571  007FEA  1006               	iorwf	getRoadState@c+1,w,c
  1572  007FEC  A4D8               	btfss	status,2,c
  1573  007FEE  D006               	goto	l50
  1574  007FF0  0409               	decf	getRoadState@e,w,c
  1575  007FF2  100A               	iorwf	getRoadState@e+1,w,c
  1576  007FF4  A4D8               	btfss	status,2,c
  1577  007FF6  D002               	goto	l50
  1578                           
  1579                           ;main.c: 89: return off_left;
  1580  007FF8  0E06               	movlw	6
  1581  007FFA  0012               	return	
  1582  007FFC                     l50:
  1583                           
  1584                           ;main.c: 90: }
  1585                           ;main.c: 92: return on_track;
  1586  007FFC  0E00               	movlw	0
  1587  007FFE  0012               	return	
  1588  008000                     __end_of_getRoadState:
  1589                           	opt stack 0
  1590                           tblptru	equ	0xFF8
  1591                           indf2	equ	0xFDF
  1592                           postinc2	equ	0xFDE
  1593                           fsr2h	equ	0xFDA
  1594                           fsr2l	equ	0xFD9
  1595                           status	equ	0xFD8
  1596                           
  1597 ;; *************** function _accelerate *****************
  1598 ;; Defined at:
  1599 ;;		line 152 in file "main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2   70[None  ] int 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1613 ;;      Params:         0       0       0       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    1
  1620 ;; This function calls:
  1621 ;;		_wait00
  1622 ;; This function is called by:
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text11
  1628  007A52                     __ptext11:
  1629                           	opt stack 0
  1630  007A52                     _accelerate:
  1631                           	opt stack 29
  1632                           
  1633                           ;main.c: 153: PORTC=0x03;
  1634                           
  1635                           ;incstack = 0
  1636  007A52  0E03               	movlw	3
  1637  007A54  6E82               	movwf	3970,c	;volatile
  1638                           
  1639                           ;main.c: 154: wait00(48);
  1640  007A56  0E00               	movlw	0
  1641  007A58  6E02               	movwf	wait00@k+1,c
  1642  007A5A  0E30               	movlw	48
  1643  007A5C  6E01               	movwf	wait00@k,c
  1644  007A5E  ECC0  F03D         	call	_wait00	;wreg free
  1645                           
  1646                           ;main.c: 155: PORTC=0x02;
  1647  007A62  0E02               	movlw	2
  1648  007A64  6E82               	movwf	3970,c	;volatile
  1649                           
  1650                           ;main.c: 156: wait00(4);
  1651  007A66  0E00               	movlw	0
  1652  007A68  6E02               	movwf	wait00@k+1,c
  1653  007A6A  0E04               	movlw	4
  1654  007A6C  6E01               	movwf	wait00@k,c
  1655  007A6E  ECC0  F03D         	call	_wait00	;wreg free
  1656                           
  1657                           ;main.c: 157: PORTC=0x00;
  1658  007A72  0E00               	movlw	0
  1659  007A74  6E82               	movwf	3970,c	;volatile
  1660                           
  1661                           ;main.c: 158: wait00(20);
  1662  007A76  0E00               	movlw	0
  1663  007A78  6E02               	movwf	wait00@k+1,c
  1664  007A7A  0E14               	movlw	20
  1665  007A7C  6E01               	movwf	wait00@k,c
  1666  007A7E  ECC0  F03D         	call	_wait00	;wreg free
  1667  007A82  0012               	return		;funcret
  1668  007A84                     __end_of_accelerate:
  1669                           	opt stack 0
  1670                           tblptru	equ	0xFF8
  1671                           indf2	equ	0xFDF
  1672                           postinc2	equ	0xFDE
  1673                           fsr2h	equ	0xFDA
  1674                           fsr2l	equ	0xFD9
  1675                           status	equ	0xFD8
  1676                           
  1677 ;; *************** function _wait00 *****************
  1678 ;; Defined at:
  1679 ;;		line 12 in file "main.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;  k               2    0[COMRAM] short 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  i               2    5[COMRAM] short 
  1684 ;;  j               2    3[COMRAM] short 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  2    0[COMRAM] int 
  1687 ;; Registers used:
  1688 ;;		wreg, status,2, status,0
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1694 ;;      Params:         2       0       0       0       0       0       0       0       0
  1695 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1696 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1697 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1698 ;;Total ram usage:        7 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; This function calls:
  1701 ;;		Nothing
  1702 ;; This function is called by:
  1703 ;;		_turnLeft
  1704 ;;		_turnRight
  1705 ;;		_turnLeftSmall
  1706 ;;		_turnRightSmall
  1707 ;;		_slowDown
  1708 ;;		_straight
  1709 ;;		_accelerate
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text12
  1714  007B80                     __ptext12:
  1715                           	opt stack 0
  1716  007B80                     _wait00:
  1717                           	opt stack 29
  1718                           
  1719                           ;main.c: 15: short i;
  1720                           ;main.c: 16: short j;
  1721                           ;main.c: 17: for(j=0;j<k;j++){
  1722                           
  1723                           ;incstack = 0
  1724  007B80  0E00               	movlw	0
  1725  007B82  6E05               	movwf	wait00@j+1,c
  1726  007B84  0E00               	movlw	0
  1727  007B86  6E04               	movwf	wait00@j,c
  1728  007B88  D011               	goto	l21
  1729  007B8A                     
  1730                           ;main.c: 18: for(i=0;i<300;i++){
  1731  007B8A  0E00               	movlw	0
  1732  007B8C  6E07               	movwf	wait00@i+1,c
  1733  007B8E  0E00               	movlw	0
  1734  007B90  6E06               	movwf	wait00@i,c
  1735  007B92                     l1083:
  1736  007B92  BE07               	btfsc	wait00@i+1,7,c
  1737  007B94  D006               	goto	l23
  1738  007B96  0E2C               	movlw	44
  1739  007B98  5C06               	subwf	wait00@i,w,c
  1740  007B9A  0E01               	movlw	1
  1741  007B9C  5807               	subwfb	wait00@i+1,w,c
  1742  007B9E  B0D8               	btfsc	status,0,c
  1743  007BA0  D003               	goto	u810
  1744  007BA2                     l23:
  1745  007BA2  4A06               	infsnz	wait00@i,f,c
  1746  007BA4  2A07               	incf	wait00@i+1,f,c
  1747  007BA6  D7F5               	goto	l1083
  1748  007BA8                     u810:
  1749  007BA8  4A04               	infsnz	wait00@j,f,c
  1750  007BAA  2A05               	incf	wait00@j+1,f,c
  1751  007BAC                     l21:
  1752  007BAC  5001               	movf	wait00@k,w,c
  1753  007BAE  5C04               	subwf	wait00@j,w,c
  1754  007BB0  5005               	movf	wait00@j+1,w,c
  1755  007BB2  0A80               	xorlw	128
  1756  007BB4  6E03               	movwf	??_wait00& (0+255),c
  1757  007BB6  5002               	movf	wait00@k+1,w,c
  1758  007BB8  0A80               	xorlw	128
  1759  007BBA  5803               	subwfb	??_wait00& (0+255),w,c
  1760  007BBC  B0D8               	btfsc	status,0,c
  1761  007BBE  0012               	return	
  1762  007BC0  D7E4               	goto	l22
  1763  007BC2                     __end_of_wait00:
  1764                           	opt stack 0
  1765                           tblptru	equ	0xFF8
  1766                           indf2	equ	0xFDF
  1767                           postinc2	equ	0xFDE
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function ___awmod *****************
  1773 ;; Defined at:
  1774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  dividend        2    0[COMRAM] int 
  1777 ;;  divisor         2    2[COMRAM] int 
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  sign            1    5[COMRAM] unsigned char 
  1780 ;;  counter         1    4[COMRAM] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  2    0[COMRAM] int 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1790 ;;      Params:         4       0       0       0       0       0       0       0       0
  1791 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1793 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1794 ;;Total ram usage:        6 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text13
  1804  007C74                     __ptext13:
  1805                           	opt stack 0
  1806  007C74                     ___awmod:
  1807                           	opt stack 30
  1808                           
  1809                           ;incstack = 0
  1810  007C74  0E00               	movlw	0
  1811  007C76  6E06               	movwf	___awmod@sign,c
  1812  007C78  AE02               	btfss	___awmod@dividend+1,7,c
  1813  007C7A  D006               	goto	l290
  1814  007C7C  6C01               	negf	___awmod@dividend,c
  1815  007C7E  1E02               	comf	___awmod@dividend+1,f,c
  1816  007C80  B0D8               	btfsc	status,0,c
  1817  007C82  2A02               	incf	___awmod@dividend+1,f,c
  1818  007C84  0E01               	movlw	1
  1819  007C86  6E06               	movwf	___awmod@sign,c
  1820  007C88                     l290:
  1821  007C88  AE04               	btfss	___awmod@divisor+1,7,c
  1822  007C8A  D004               	goto	l291
  1823  007C8C  6C03               	negf	___awmod@divisor,c
  1824  007C8E  1E04               	comf	___awmod@divisor+1,f,c
  1825  007C90  B0D8               	btfsc	status,0,c
  1826  007C92  2A04               	incf	___awmod@divisor+1,f,c
  1827  007C94                     l291:
  1828  007C94  5003               	movf	___awmod@divisor,w,c
  1829  007C96  1004               	iorwf	___awmod@divisor+1,w,c
  1830  007C98  B4D8               	btfsc	status,2,c
  1831  007C9A  D018               	goto	l298
  1832  007C9C  0E01               	movlw	1
  1833  007C9E  6E05               	movwf	___awmod@counter,c
  1834  007CA0  D004               	goto	l293
  1835  007CA2  90D8               	bcf	status,0,c
  1836  007CA4  3603               	rlcf	___awmod@divisor,f,c
  1837  007CA6  3604               	rlcf	___awmod@divisor+1,f,c
  1838  007CA8  2A05               	incf	___awmod@counter,f,c
  1839  007CAA                     l293:
  1840  007CAA  AE04               	btfss	___awmod@divisor+1,7,c
  1841  007CAC  D7FA               	goto	l294
  1842  007CAE                     u1420:
  1843  007CAE  5003               	movf	___awmod@divisor,w,c
  1844  007CB0  5C01               	subwf	___awmod@dividend,w,c
  1845  007CB2  5004               	movf	___awmod@divisor+1,w,c
  1846  007CB4  5802               	subwfb	___awmod@dividend+1,w,c
  1847  007CB6  A0D8               	btfss	status,0,c
  1848  007CB8  D004               	goto	l297
  1849  007CBA  5003               	movf	___awmod@divisor,w,c
  1850  007CBC  5E01               	subwf	___awmod@dividend,f,c
  1851  007CBE  5004               	movf	___awmod@divisor+1,w,c
  1852  007CC0  5A02               	subwfb	___awmod@dividend+1,f,c
  1853  007CC2                     l297:
  1854  007CC2  90D8               	bcf	status,0,c
  1855  007CC4  3204               	rrcf	___awmod@divisor+1,f,c
  1856  007CC6  3203               	rrcf	___awmod@divisor,f,c
  1857  007CC8  2E05               	decfsz	___awmod@counter,f,c
  1858  007CCA  D7F1               	goto	u1420
  1859  007CCC                     l298:
  1860  007CCC  5006               	movf	___awmod@sign,w,c
  1861  007CCE  B4D8               	btfsc	status,2,c
  1862  007CD0  D004               	goto	l299
  1863  007CD2  6C01               	negf	___awmod@dividend,c
  1864  007CD4  1E02               	comf	___awmod@dividend+1,f,c
  1865  007CD6  B0D8               	btfsc	status,0,c
  1866  007CD8  2A02               	incf	___awmod@dividend+1,f,c
  1867  007CDA                     l299:
  1868  007CDA  C001  F001         	movff	___awmod@dividend,?___awmod
  1869  007CDE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1870  007CE2  0012               	return	
  1871  007CE4                     __end_of___awmod:
  1872                           	opt stack 0
  1873  0000                     tblptru	equ	0xFF8
  1874                           indf2	equ	0xFDF
  1875                           postinc2	equ	0xFDE
  1876                           fsr2h	equ	0xFDA
  1877                           fsr2l	equ	0xFD9
  1878                           status	equ	0xFD8
  1879                           tblptru	equ	0xFF8
  1880                           indf2	equ	0xFDF
  1881                           postinc2	equ	0xFDE
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886                           	psect	rparam
  1887  0000                     tblptru	equ	0xFF8
  1888                           indf2	equ	0xFDF
  1889                           postinc2	equ	0xFDE
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      48
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    isInCurve@states	PTR enum E3329 size(2) Largest target is 30
		 -> main@states(COMRAM[30]), 

    isAllStraight@states	PTR enum E3329 size(2) Largest target is 30
		 -> main@states(COMRAM[30]), 


Critical Paths under _main in COMRAM

    _main->_getRoadState
    _turnRightSmall->_wait00
    _turnRight->_wait00
    _turnLeftSmall->_wait00
    _turnLeft->_wait00
    _straight->_wait00
    _slowDown->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   13440
                                             10 COMRAM    38    38      0
                            ___awmod
                         _accelerate
                       _getRoadState
                      _isAllStraight
                          _isInCurve
                           _led_sens
                           _slowDown
                           _straight
                           _turnLeft
                      _turnLeftSmall
                          _turnRight
                     _turnRightSmall
 ---------------------------------------------------------------------------------
 (1) _turnRightSmall                                       0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeftSmall                                        0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _slowDown                                             0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isInCurve                                            5     3      2     210
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _isAllStraight                                        5     3      2     210
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _getRoadState                                        10     0     10    1436
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1536
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1536
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _accelerate
     _wait00
   _getRoadState
   _isAllStraight
   _isInCurve
   _led_sens
   _slowDown
     _wait00
   _straight
     _wait00
   _turnLeft
     _wait00
   _turnLeftSmall
     _wait00
   _turnRight
     _wait00
   _turnRightSmall
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     30      30       1       50.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 02 11:26:44 2018

                     l21 7BAC                       l22 7B8A                       l23 7BA2  
                     l32 7EA8                       l50 7FFC                       l43 7F20  
                     l44 7F44                       l45 7F60                       l46 7F7C  
                     l38 7EFC                       l47 7FA0                       l48 7FC4  
                     l80 7C32                       l49 7FE0                       l74 7BDA  
                     l82 7C64                       l90 7D04                       l91 7D00  
                     l76 7C0A                       l93 7D10                       l94 7DA2  
                     l95 7E2C                       l96 7DD4                       l97 7DEE  
                     l99 7E08                       u45 7B54                       u55 7B5E  
                     u47 7B56                       u65 7B68                       u57 7B60  
                     u75 7B72                       u67 7B6A                       u85 7B7C  
                     u77 7B74                       u87 7B7E                      l102 7E0E  
                    l103 7E14                      l104 7E1A                      l105 7E20  
                    l106 7E26                      l290 7C88                      l291 7C94  
                    l293 7CAA                      l294 7CA2                      l297 7CC2  
                    l298 7CCC                      l299 7CDA                      u810 7BA8  
                    u920 7EA4                      u870 7E7C                      u970 7ED0  
           ___awmod@sign 0006         ??_turnRightSmall 0008                     l1321 7C22  
                   l1083 7B92                     l1315 7C10                     l1337 7C6A  
                   l1299 7BCA                     u1020 7EF8                     u1420 7CAE  
                   u1340 7C10                     u1500 7D66                     u1370 7C5A  
                   u1380 7C6A                     u1508 7D68                     u1460 7D1E  
                   u1470 7D30                     u1480 7D42                     u1490 7D54  
                   u1468 7D20                     u1478 7D32                     u1488 7D44  
                   u1498 7D56              main@current 002E                     _main 7CE4  
                   indf2 000FDF                     fsr2l 000FD9                     start 2000  
           ___param_bank 000000                    ?_main 0001          __end_of___awmod 7CE4  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  status 000FD8          __initialization 2008             __end_of_main 7E54  
                 ??_main 000B            __activetblptr 000002     __end_of_getRoadState 8000  
                 _ADCON1 000FC1   __size_of_turnLeftSmall 0032         __end_of_led_sens 7B80  
              ??___awmod 0005                   _wait00 7B80          ___awmod@divisor 0003  
        ___awmod@counter 0005                   tblptru 000FF8         __end_of_slowDown 7AB6  
       __end_of_straight 7AE8         __end_of_turnLeft 7A30               __accesstop 0060  
__end_of__initialization 2008            ___rparam_used 000001           __pcstackCOMRAM 0001  
             _accelerate 7A52    __end_of_isAllStraight 7C1A       __size_of_isInCurve 005A  
          _turnLeftSmall 7AE8                  ?_wait00 0001    __size_of_getRoadState 01AC  
         ?_turnLeftSmall 0001                ?_led_sens 0001       __size_of_turnRight 0022  
      __end_of_isInCurve 7C74                  __Hparam 0000                  __Lparam 0000  
           _getRoadState 7E54                ?_slowDown 0001                  ___awmod 7C74  
            ?_accelerate 0001                ?_straight 0001                  __pcinit 2008  
                __ramtop 0800          __size_of_wait00 0042                ?_turnLeft 0001  
                __ptext0 7CE4                  __ptext1 7B1A                  __ptext2 7A30  
                __ptext3 7AE8                  __ptext4 7A0E                  __ptext5 7AB6  
                __ptext6 7A84                  __ptext7 7B4C                  __ptext8 7C1A  
                __ptext9 7BC2         ___awmod@dividend 0001           main@road_state 0030  
    isAllStraight@states 0001     end_of_initialization 2008               ??_led_sens 0001  
          __Lmediumconst 0000                  wait00@i 0006                  wait00@j 0004  
                wait00@k 0001  __size_of_turnRightSmall 0032          isInCurve@states 0001  
                postinc2 000FDE               ??_slowDown 0008               ??_straight 0008  
             isInCurve@i 0004               ??_turnLeft 0008          ??_turnLeftSmall 0008  
              _PORTAbits 000F80                _PORTBbits 000F81        __end_of_turnRight 7A52  
    __size_of_accelerate 0032               main@states 0010           isAllStraight@i 0004  
         __end_of_wait00 7BC2      start_initialization 2008                 ??_wait00 0003  
 __size_of_isAllStraight 0058        __size_of_led_sens 0034           _turnRightSmall 7B1A  
               ?___awmod 0001                _isInCurve 7C1A             ??_accelerate 0008  
      __size_of_slowDown 0032        __size_of_straight 0032        __size_of_turnLeft 0022  
     __end_of_accelerate 7A84   __end_of_turnRightSmall 7B4C               ?_isInCurve 0001  
          _isAllStraight 7BC2                _turnRight 7A30          ?_turnRightSmall 0001  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awmod 0070  
         ?_isAllStraight 0001    __end_of_turnLeftSmall 7B1A               ?_turnRight 0001  
               __ptext10 7E54                 __ptext11 7A52                 __ptext12 7B80  
               __ptext13 7C74                 _led_sens 7B4C            __size_of_main 0170  
          getRoadState@a 0001            getRoadState@b 0003            getRoadState@c 0005  
          getRoadState@d 0007            getRoadState@e 0009                 _slowDown 7A84  
            ??_isInCurve 0003                 _straight 7AB6                 _turnLeft 7A0E  
          ?_getRoadState 0001          ??_isAllStraight 0003              ??_turnRight 0008  
         ??_getRoadState 000B  
