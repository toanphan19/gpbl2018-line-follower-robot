

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 12:31:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2553 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _PORTB	set	3969
    55  0000                     _PORTA	set	3968
    56  0000                     _TRISC	set	3988
    57  0000                     _TRISB	set	3987
    58  0000                     _TRISA	set	3986
    59  0000                     _ADCON1	set	4033
    60  0000                     _PORTC	set	3970
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63                           
    64                           ; #config settings
    65                           
    66                           	psect	cinit
    67  002008                     __pcinit:
    68                           	opt stack 0
    69  002008                     start_initialization:
    70                           	opt stack 0
    71  002008                     __initialization:
    72                           	opt stack 0
    73  002008                     end_of_initialization:
    74                           	opt stack 0
    75  002008                     __end_of__initialization:
    76                           	opt stack 0
    77  002008  0E00               	movlw	low (__Lmediumconst shr (0+16))
    78  00200A  6EF8               	movwf	tblptru,c
    79  00200C  0100               	movlb	0
    80  00200E  EFB6  F03E         	goto	_main	;jump to C main() function
    81                           tblptru	equ	0xFF8
    82                           
    83                           	psect	cstackCOMRAM
    84  000001                     __pcstackCOMRAM:
    85                           	opt stack 0
    86  000001                     wait00@k:
    87                           	opt stack 0
    88  000001                     getRoadState@a:
    89                           	opt stack 0
    90                           
    91                           ; 2 bytes @ 0x0
    92  000001                     	ds	2
    93  000003                     ??_wait00:
    94  000003                     getRoadState@b:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x2
    98  000003                     	ds	1
    99  000004                     wait00@j:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x3
   103  000004                     	ds	1
   104  000005                     getRoadState@c:
   105                           	opt stack 0
   106                           
   107                           ; 2 bytes @ 0x4
   108  000005                     	ds	1
   109  000006                     wait00@i:
   110                           	opt stack 0
   111                           
   112                           ; 2 bytes @ 0x5
   113  000006                     	ds	1
   114  000007                     getRoadState@d:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x6
   118  000007                     	ds	1
   119  000008                     
   120                           ; 1 bytes @ 0x7
   121  000008                     	ds	1
   122  000009                     getRoadState@e:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x8
   126  000009                     	ds	2
   127  00000B                     ??_main:
   128                           
   129                           ; 1 bytes @ 0xA
   130  00000B                     	ds	5
   131  000010                     main@previous_road_state:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0xF
   135  000010                     	ds	1
   136  000011                     main@road_state:
   137                           	opt stack 0
   138                           
   139                           ; 1 bytes @ 0x10
   140  000011                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           
   143 ;;
   144 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   145 ;;
   146 ;; *************** function _main *****************
   147 ;; Defined at:
   148 ;;		line 163 in file "main.c"
   149 ;; Parameters:    Size  Location     Type
   150 ;;		None
   151 ;; Auto vars:     Size  Location     Type
   152 ;;  road_state      1   16[COMRAM] enum E3329
   153 ;;  previous_roa    1   15[COMRAM] enum E3329
   154 ;; Return value:  Size  Location     Type
   155 ;;                  2   72[None  ] int 
   156 ;; Registers used:
   157 ;;		wreg, status,2, status,0, cstack
   158 ;; Tracked objects:
   159 ;;		On entry : 0/0
   160 ;;		On exit  : 0/0
   161 ;;		Unchanged: 0/0
   162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   163 ;;      Params:         0       0       0       0       0       0       0       0       0
   164 ;;      Locals:         2       0       0       0       0       0       0       0       0
   165 ;;      Temps:          5       0       0       0       0       0       0       0       0
   166 ;;      Totals:         7       0       0       0       0       0       0       0       0
   167 ;;Total ram usage:        7 bytes
   168 ;; Hardware stack levels required when called:    2
   169 ;; This function calls:
   170 ;;		_accelerate
   171 ;;		_getRoadState
   172 ;;		_led_sens
   173 ;;		_straight
   174 ;;		_turnLeft
   175 ;;		_turnLeftWide
   176 ;;		_turnRight
   177 ;;		_turnRightWide
   178 ;; This function is called by:
   179 ;;		Startup code after reset
   180 ;; This function uses a non-reentrant model
   181 ;;
   182                           
   183                           	psect	text0
   184  007D6C                     __ptext0:
   185                           	opt stack 0
   186  007D6C                     _main:
   187                           	opt stack 29
   188                           
   189                           ;main.c: 166: ADCON1 = 0x0F;
   190                           
   191                           ;incstack = 0
   192  007D6C  0E0F               	movlw	15
   193  007D6E  6EC1               	movwf	4033,c	;volatile
   194                           
   195                           ;main.c: 169: TRISA = 0x20;
   196  007D70  0E20               	movlw	32
   197  007D72  6E92               	movwf	3986,c	;volatile
   198                           
   199                           ;main.c: 170: TRISB = 0xFF;
   200  007D74  6893               	setf	3987,c	;volatile
   201                           
   202                           ;main.c: 171: TRISC = 0x00;
   203  007D76  0E00               	movlw	0
   204  007D78  6E94               	movwf	3988,c	;volatile
   205                           
   206                           ;main.c: 174: PORTA = 0x00;
   207  007D7A  0E00               	movlw	0
   208  007D7C  6E80               	movwf	3968,c	;volatile
   209                           
   210                           ;main.c: 175: PORTB = 0x00;
   211  007D7E  0E00               	movlw	0
   212  007D80  6E81               	movwf	3969,c	;volatile
   213                           
   214                           ;main.c: 176: PORTC = 0x00;
   215  007D82  0E00               	movlw	0
   216  007D84  6E82               	movwf	3970,c	;volatile
   217                           
   218                           ;main.c: 179: while(PORTAbits.RA5==1){
   219  007D86  D002               	goto	l73
   220  007D88                     
   221                           ;main.c: 180: led_sens();
   222  007D88  EC7B  F03E         	call	_led_sens	;wreg free
   223  007D8C                     l73:
   224  007D8C  BA80               	btfsc	3968,5,c	;volatile
   225  007D8E  D7FC               	goto	l74
   226                           
   227                           ;main.c: 181: }
   228                           ;main.c: 183: enum road_state_codes road_state = on_track;
   229  007D90  0E00               	movlw	0
   230  007D92  6E11               	movwf	main@road_state,c
   231  007D94                     
   232                           ;main.c: 188: led_sens();
   233  007D94  EC7B  F03E         	call	_led_sens	;wreg free
   234                           
   235                           ;main.c: 190: previous_road_state = road_state;
   236  007D98  C011  F010         	movff	main@road_state,main@previous_road_state
   237                           
   238                           ;main.c: 191: road_state = getRoadState(
   239                           ;main.c: 192: PORTBbits.RB0, PORTBbits.RB1, PORTBbits.RB2,
   240                           ;main.c: 193: PORTBbits.RB3, PORTBbits.RB4
   241                           ;main.c: 194: );
   242  007D9C  A081               	btfss	3969,0,c	;volatile
   243  007D9E  D003               	goto	u1160
   244  007DA0  6A0B               	clrf	??_main& (0+255),c
   245  007DA2  2A0B               	incf	??_main& (0+255),f,c
   246  007DA4  D001               	goto	u1168
   247  007DA6                     u1160:
   248  007DA6  6A0B               	clrf	??_main& (0+255),c
   249  007DA8                     u1168:
   250  007DA8  500B               	movf	??_main,w,c
   251  007DAA  6E01               	movwf	getRoadState@a,c
   252  007DAC  6A02               	clrf	getRoadState@a+1,c
   253  007DAE  A281               	btfss	3969,1,c	;volatile
   254  007DB0  D003               	goto	u1170
   255  007DB2  6A0C               	clrf	(??_main+1)& (0+255),c
   256  007DB4  2A0C               	incf	(??_main+1)& (0+255),f,c
   257  007DB6  D001               	goto	u1178
   258  007DB8                     u1170:
   259  007DB8  6A0C               	clrf	(??_main+1)& (0+255),c
   260  007DBA                     u1178:
   261  007DBA  500C               	movf	??_main+1,w,c
   262  007DBC  6E03               	movwf	getRoadState@b,c
   263  007DBE  6A04               	clrf	getRoadState@b+1,c
   264  007DC0  A481               	btfss	3969,2,c	;volatile
   265  007DC2  D003               	goto	u1180
   266  007DC4  6A0D               	clrf	(??_main+2)& (0+255),c
   267  007DC6  2A0D               	incf	(??_main+2)& (0+255),f,c
   268  007DC8  D001               	goto	u1188
   269  007DCA                     u1180:
   270  007DCA  6A0D               	clrf	(??_main+2)& (0+255),c
   271  007DCC                     u1188:
   272  007DCC  500D               	movf	??_main+2,w,c
   273  007DCE  6E05               	movwf	getRoadState@c,c
   274  007DD0  6A06               	clrf	getRoadState@c+1,c
   275  007DD2  A681               	btfss	3969,3,c	;volatile
   276  007DD4  D003               	goto	u1190
   277  007DD6  6A0E               	clrf	(??_main+3)& (0+255),c
   278  007DD8  2A0E               	incf	(??_main+3)& (0+255),f,c
   279  007DDA  D001               	goto	u1198
   280  007DDC                     u1190:
   281  007DDC  6A0E               	clrf	(??_main+3)& (0+255),c
   282  007DDE                     u1198:
   283  007DDE  500E               	movf	??_main+3,w,c
   284  007DE0  6E07               	movwf	getRoadState@d,c
   285  007DE2  6A08               	clrf	getRoadState@d+1,c
   286  007DE4  A881               	btfss	3969,4,c	;volatile
   287  007DE6  D003               	goto	u1200
   288  007DE8  6A0F               	clrf	(??_main+4)& (0+255),c
   289  007DEA  2A0F               	incf	(??_main+4)& (0+255),f,c
   290  007DEC  D001               	goto	u1208
   291  007DEE                     u1200:
   292  007DEE  6A0F               	clrf	(??_main+4)& (0+255),c
   293  007DF0                     u1208:
   294  007DF0  500F               	movf	??_main+4,w,c
   295  007DF2  6E09               	movwf	getRoadState@e,c
   296  007DF4  6A0A               	clrf	getRoadState@e+1,c
   297  007DF6  EC2A  F03F         	call	_getRoadState	;wreg free
   298  007DFA  6E11               	movwf	main@road_state,c
   299                           
   300                           ;main.c: 196: if (road_state == off_track)
   301  007DFC  0411               	decf	main@road_state,w,c
   302  007DFE  A4D8               	btfss	status,2,c
   303  007E00  D015               	goto	l78
   304                           
   305                           ;main.c: 197: road_state = previous_road_state;
   306  007E02  C010  F011         	movff	main@previous_road_state,main@road_state
   307                           
   308                           ;main.c: 199: switch (road_state) {
   309  007E06  D012               	goto	l78
   310  007E08                     
   311                           ;main.c: 201: accelerate();
   312  007E08  EC30  F03E         	call	_accelerate	;wreg free
   313                           
   314                           ;main.c: 202: break;
   315  007E0C  D7C3               	goto	l76
   316  007E0E                     
   317                           ;main.c: 204: turnRightWide();
   318  007E0E  EC62  F03E         	call	_turnRightWide	;wreg free
   319                           
   320                           ;main.c: 205: break;
   321  007E12  D7C0               	goto	l76
   322  007E14                     
   323                           ;main.c: 207: turnLeftWide();
   324  007E14  EC49  F03E         	call	_turnLeftWide	;wreg free
   325                           
   326                           ;main.c: 208: break;
   327  007E18  D7BD               	goto	l76
   328  007E1A                     
   329                           ;main.c: 210: turnRight();
   330  007E1A  EC1F  F03E         	call	_turnRight	;wreg free
   331                           
   332                           ;main.c: 211: break;
   333  007E1E  D7BA               	goto	l76
   334  007E20                     
   335                           ;main.c: 213: turnLeft();
   336  007E20  EC0E  F03E         	call	_turnLeft	;wreg free
   337                           
   338                           ;main.c: 214: break;
   339  007E24  D7B7               	goto	l76
   340  007E26                     
   341                           ;main.c: 216: straight();
   342  007E26  ECFD  F03D         	call	_straight	;wreg free
   343                           
   344                           ;main.c: 218: }
   345                           
   346                           ;main.c: 217: break;
   347  007E2A  D7B4               	goto	l76
   348  007E2C                     l78:
   349  007E2C  5011               	movf	main@road_state,w,c
   350                           
   351                           ; Switch size 1, requested type "space"
   352                           ; Number of cases is 6, Range of values is 0 to 6
   353                           ; switch strategies available:
   354                           ; Name         Instructions Cycles
   355                           ; simple_byte           19    10 (average)
   356                           ;	Chosen strategy is simple_byte
   357  007E2E  0A00               	xorlw	0	; case 0
   358  007E30  B4D8               	btfsc	status,2,c
   359  007E32  D7F9               	goto	l85
   360  007E34  0A02               	xorlw	2	; case 2
   361  007E36  B4D8               	btfsc	status,2,c
   362  007E38  D7E7               	goto	l79
   363  007E3A  0A01               	xorlw	1	; case 3
   364  007E3C  B4D8               	btfsc	status,2,c
   365  007E3E  D7EA               	goto	l82
   366  007E40  0A07               	xorlw	7	; case 4
   367  007E42  B4D8               	btfsc	status,2,c
   368  007E44  D7ED               	goto	l84
   369  007E46  0A01               	xorlw	1	; case 5
   370  007E48  B4D8               	btfsc	status,2,c
   371  007E4A  D7E1               	goto	l81
   372  007E4C  0A03               	xorlw	3	; case 6
   373  007E4E  B4D8               	btfsc	status,2,c
   374  007E50  D7E4               	goto	l83
   375  007E52  D7A0               	goto	l76
   376  007E54                     __end_of_main:
   377                           	opt stack 0
   378                           tblptru	equ	0xFF8
   379                           status	equ	0xFD8
   380                           
   381 ;; *************** function _turnRightWide *****************
   382 ;; Defined at:
   383 ;;		line 129 in file "main.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;		None
   386 ;; Auto vars:     Size  Location     Type
   387 ;;		None
   388 ;; Return value:  Size  Location     Type
   389 ;;                  2   61[None  ] int 
   390 ;; Registers used:
   391 ;;		wreg, status,2, status,0, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   397 ;;      Params:         0       0       0       0       0       0       0       0       0
   398 ;;      Locals:         0       0       0       0       0       0       0       0       0
   399 ;;      Temps:          0       0       0       0       0       0       0       0       0
   400 ;;      Totals:         0       0       0       0       0       0       0       0       0
   401 ;;Total ram usage:        0 bytes
   402 ;; Hardware stack levels used:    1
   403 ;; Hardware stack levels required when called:    1
   404 ;; This function calls:
   405 ;;		_wait00
   406 ;; This function is called by:
   407 ;;		_main
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text1
   412  007CC4                     __ptext1:
   413                           	opt stack 0
   414  007CC4                     _turnRightWide:
   415                           	opt stack 29
   416                           
   417                           ;main.c: 131: PORTC=0x03;
   418                           
   419                           ;incstack = 0
   420  007CC4  0E03               	movlw	3
   421  007CC6  6E82               	movwf	3970,c	;volatile
   422                           
   423                           ;main.c: 132: wait00(1);
   424  007CC8  0E00               	movlw	0
   425  007CCA  6E02               	movwf	wait00@k+1,c
   426  007CCC  0E01               	movlw	1
   427  007CCE  6E01               	movwf	wait00@k,c
   428  007CD0  EC95  F03E         	call	_wait00	;wreg free
   429                           
   430                           ;main.c: 133: PORTC=0x01;
   431  007CD4  0E01               	movlw	1
   432  007CD6  6E82               	movwf	3970,c	;volatile
   433                           
   434                           ;main.c: 134: wait00(8.5);
   435  007CD8  0E00               	movlw	0
   436  007CDA  6E02               	movwf	wait00@k+1,c
   437  007CDC  0E08               	movlw	8
   438  007CDE  6E01               	movwf	wait00@k,c
   439  007CE0  EC95  F03E         	call	_wait00	;wreg free
   440                           
   441                           ;main.c: 135: PORTC = 0x00;
   442  007CE4  0E00               	movlw	0
   443  007CE6  6E82               	movwf	3970,c	;volatile
   444                           
   445                           ;main.c: 136: wait00(5);
   446  007CE8  0E00               	movlw	0
   447  007CEA  6E02               	movwf	wait00@k+1,c
   448  007CEC  0E05               	movlw	5
   449  007CEE  6E01               	movwf	wait00@k,c
   450  007CF0  EC95  F03E         	call	_wait00	;wreg free
   451  007CF4  0012               	return		;funcret
   452  007CF6                     __end_of_turnRightWide:
   453                           	opt stack 0
   454                           tblptru	equ	0xFF8
   455                           status	equ	0xFD8
   456                           
   457 ;; *************** function _turnRight *****************
   458 ;; Defined at:
   459 ;;		line 105 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  2   55[None  ] int 
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   473 ;;      Params:         0       0       0       0       0       0       0       0       0
   474 ;;      Locals:         0       0       0       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0       0       0
   476 ;;      Totals:         0       0       0       0       0       0       0       0       0
   477 ;;Total ram usage:        0 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    1
   480 ;; This function calls:
   481 ;;		_wait00
   482 ;; This function is called by:
   483 ;;		_main
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text2
   488  007C3E                     __ptext2:
   489                           	opt stack 0
   490  007C3E                     _turnRight:
   491                           	opt stack 29
   492                           
   493                           ;main.c: 106: PORTC=0x01;
   494                           
   495                           ;incstack = 0
   496  007C3E  0E01               	movlw	1
   497  007C40  6E82               	movwf	3970,c	;volatile
   498                           
   499                           ;main.c: 107: wait00(6);
   500  007C42  0E00               	movlw	0
   501  007C44  6E02               	movwf	wait00@k+1,c
   502  007C46  0E06               	movlw	6
   503  007C48  6E01               	movwf	wait00@k,c
   504  007C4A  EC95  F03E         	call	_wait00	;wreg free
   505                           
   506                           ;main.c: 108: PORTC = 0x00;
   507  007C4E  0E00               	movlw	0
   508  007C50  6E82               	movwf	3970,c	;volatile
   509                           
   510                           ;main.c: 109: wait00(5);
   511  007C52  0E00               	movlw	0
   512  007C54  6E02               	movwf	wait00@k+1,c
   513  007C56  0E05               	movlw	5
   514  007C58  6E01               	movwf	wait00@k,c
   515  007C5A  EC95  F03E         	call	_wait00	;wreg free
   516  007C5E  0012               	return		;funcret
   517  007C60                     __end_of_turnRight:
   518                           	opt stack 0
   519                           tblptru	equ	0xFF8
   520                           status	equ	0xFD8
   521                           
   522 ;; *************** function _turnLeftWide *****************
   523 ;; Defined at:
   524 ;;		line 113 in file "main.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  2   58[None  ] int 
   531 ;; Registers used:
   532 ;;		wreg, status,2, status,0, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   538 ;;      Params:         0       0       0       0       0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0       0       0
   540 ;;      Temps:          0       0       0       0       0       0       0       0       0
   541 ;;      Totals:         0       0       0       0       0       0       0       0       0
   542 ;;Total ram usage:        0 bytes
   543 ;; Hardware stack levels used:    1
   544 ;; Hardware stack levels required when called:    1
   545 ;; This function calls:
   546 ;;		_wait00
   547 ;; This function is called by:
   548 ;;		_main
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text3
   553  007C92                     __ptext3:
   554                           	opt stack 0
   555  007C92                     _turnLeftWide:
   556                           	opt stack 29
   557                           
   558                           ;main.c: 115: PORTC=0x03;
   559                           
   560                           ;incstack = 0
   561  007C92  0E03               	movlw	3
   562  007C94  6E82               	movwf	3970,c	;volatile
   563                           
   564                           ;main.c: 116: wait00(1);
   565  007C96  0E00               	movlw	0
   566  007C98  6E02               	movwf	wait00@k+1,c
   567  007C9A  0E01               	movlw	1
   568  007C9C  6E01               	movwf	wait00@k,c
   569  007C9E  EC95  F03E         	call	_wait00	;wreg free
   570                           
   571                           ;main.c: 117: PORTC=0x02;
   572  007CA2  0E02               	movlw	2
   573  007CA4  6E82               	movwf	3970,c	;volatile
   574                           
   575                           ;main.c: 118: wait00(10);
   576  007CA6  0E00               	movlw	0
   577  007CA8  6E02               	movwf	wait00@k+1,c
   578  007CAA  0E0A               	movlw	10
   579  007CAC  6E01               	movwf	wait00@k,c
   580  007CAE  EC95  F03E         	call	_wait00	;wreg free
   581                           
   582                           ;main.c: 119: PORTC = 0x00;
   583  007CB2  0E00               	movlw	0
   584  007CB4  6E82               	movwf	3970,c	;volatile
   585                           
   586                           ;main.c: 120: wait00(5);
   587  007CB6  0E00               	movlw	0
   588  007CB8  6E02               	movwf	wait00@k+1,c
   589  007CBA  0E05               	movlw	5
   590  007CBC  6E01               	movwf	wait00@k,c
   591  007CBE  EC95  F03E         	call	_wait00	;wreg free
   592  007CC2  0012               	return		;funcret
   593  007CC4                     __end_of_turnLeftWide:
   594                           	opt stack 0
   595                           tblptru	equ	0xFF8
   596                           status	equ	0xFD8
   597                           
   598 ;; *************** function _turnLeft *****************
   599 ;; Defined at:
   600 ;;		line 98 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;                  2   52[None  ] int 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   614 ;;      Params:         0       0       0       0       0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0       0       0
   617 ;;      Totals:         0       0       0       0       0       0       0       0       0
   618 ;;Total ram usage:        0 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    1
   621 ;; This function calls:
   622 ;;		_wait00
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text4
   629  007C1C                     __ptext4:
   630                           	opt stack 0
   631  007C1C                     _turnLeft:
   632                           	opt stack 29
   633                           
   634                           ;main.c: 99: PORTC=0x02;
   635                           
   636                           ;incstack = 0
   637  007C1C  0E02               	movlw	2
   638  007C1E  6E82               	movwf	3970,c	;volatile
   639                           
   640                           ;main.c: 100: wait00(7);
   641  007C20  0E00               	movlw	0
   642  007C22  6E02               	movwf	wait00@k+1,c
   643  007C24  0E07               	movlw	7
   644  007C26  6E01               	movwf	wait00@k,c
   645  007C28  EC95  F03E         	call	_wait00	;wreg free
   646                           
   647                           ;main.c: 101: PORTC = 0x00;
   648  007C2C  0E00               	movlw	0
   649  007C2E  6E82               	movwf	3970,c	;volatile
   650                           
   651                           ;main.c: 102: wait00(5);
   652  007C30  0E00               	movlw	0
   653  007C32  6E02               	movwf	wait00@k+1,c
   654  007C34  0E05               	movlw	5
   655  007C36  6E01               	movwf	wait00@k,c
   656  007C38  EC95  F03E         	call	_wait00	;wreg free
   657  007C3C  0012               	return		;funcret
   658  007C3E                     __end_of_turnLeft:
   659                           	opt stack 0
   660                           tblptru	equ	0xFF8
   661                           status	equ	0xFD8
   662                           
   663 ;; *************** function _straight *****************
   664 ;; Defined at:
   665 ;;		line 146 in file "main.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  2   64[None  ] int 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   679 ;;      Params:         0       0       0       0       0       0       0       0       0
   680 ;;      Locals:         0       0       0       0       0       0       0       0       0
   681 ;;      Temps:          0       0       0       0       0       0       0       0       0
   682 ;;      Totals:         0       0       0       0       0       0       0       0       0
   683 ;;Total ram usage:        0 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    1
   686 ;; This function calls:
   687 ;;		_wait00
   688 ;; This function is called by:
   689 ;;		_main
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text5
   694  007BFA                     __ptext5:
   695                           	opt stack 0
   696  007BFA                     _straight:
   697                           	opt stack 29
   698                           
   699                           ;main.c: 147: PORTC=0x03;
   700                           
   701                           ;incstack = 0
   702  007BFA  0E03               	movlw	3
   703  007BFC  6E82               	movwf	3970,c	;volatile
   704                           
   705                           ;main.c: 148: wait00(5);
   706  007BFE  0E00               	movlw	0
   707  007C00  6E02               	movwf	wait00@k+1,c
   708  007C02  0E05               	movlw	5
   709  007C04  6E01               	movwf	wait00@k,c
   710  007C06  EC95  F03E         	call	_wait00	;wreg free
   711                           
   712                           ;main.c: 149: PORTC=0x00;
   713  007C0A  0E00               	movlw	0
   714  007C0C  6E82               	movwf	3970,c	;volatile
   715                           
   716                           ;main.c: 150: wait00(8);
   717  007C0E  0E00               	movlw	0
   718  007C10  6E02               	movwf	wait00@k+1,c
   719  007C12  0E08               	movlw	8
   720  007C14  6E01               	movwf	wait00@k,c
   721  007C16  EC95  F03E         	call	_wait00	;wreg free
   722  007C1A  0012               	return		;funcret
   723  007C1C                     __end_of_straight:
   724                           	opt stack 0
   725                           tblptru	equ	0xFF8
   726                           status	equ	0xFD8
   727                           
   728 ;; *************** function _led_sens *****************
   729 ;; Defined at:
   730 ;;		line 21 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  2   28[None  ] int 
   737 ;; Registers used:
   738 ;;		None
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   744 ;;      Params:         0       0       0       0       0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0       0       0       0       0
   747 ;;      Totals:         0       0       0       0       0       0       0       0       0
   748 ;;Total ram usage:        0 bytes
   749 ;; Hardware stack levels used:    1
   750 ;; This function calls:
   751 ;;		Nothing
   752 ;; This function is called by:
   753 ;;		_main
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           	psect	text6
   758  007CF6                     __ptext6:
   759                           	opt stack 0
   760  007CF6                     _led_sens:
   761                           	opt stack 30
   762                           
   763                           ;main.c: 23: PORTAbits.RA0 = PORTBbits.RB0;
   764                           
   765                           ;incstack = 0
   766  007CF6  A081               	btfss	3969,0,c	;volatile
   767  007CF8  D002               	bra	u45
   768  007CFA  8080               	bsf	3968,0,c	;volatile
   769  007CFC  D001               	bra	u47
   770  007CFE                     u45:
   771  007CFE  9080               	bcf	3968,0,c	;volatile
   772  007D00                     u47:
   773                           
   774                           ;main.c: 24: PORTAbits.RA1 = PORTBbits.RB1;
   775  007D00  A281               	btfss	3969,1,c	;volatile
   776  007D02  D002               	bra	u55
   777  007D04  8280               	bsf	3968,1,c	;volatile
   778  007D06  D001               	bra	u57
   779  007D08                     u55:
   780  007D08  9280               	bcf	3968,1,c	;volatile
   781  007D0A                     u57:
   782                           
   783                           ;main.c: 25: PORTAbits.RA2 = PORTBbits.RB2;
   784  007D0A  A481               	btfss	3969,2,c	;volatile
   785  007D0C  D002               	bra	u65
   786  007D0E  8480               	bsf	3968,2,c	;volatile
   787  007D10  D001               	bra	u67
   788  007D12                     u65:
   789  007D12  9480               	bcf	3968,2,c	;volatile
   790  007D14                     u67:
   791                           
   792                           ;main.c: 26: PORTAbits.RA3 = PORTBbits.RB3;
   793  007D14  A681               	btfss	3969,3,c	;volatile
   794  007D16  D002               	bra	u75
   795  007D18  8680               	bsf	3968,3,c	;volatile
   796  007D1A  D001               	bra	u77
   797  007D1C                     u75:
   798  007D1C  9680               	bcf	3968,3,c	;volatile
   799  007D1E                     u77:
   800                           
   801                           ;main.c: 27: PORTAbits.RA4 = PORTBbits.RB4;
   802  007D1E  A881               	btfss	3969,4,c	;volatile
   803  007D20  D002               	bra	u85
   804  007D22  8880               	bsf	3968,4,c	;volatile
   805  007D24  D001               	bra	u87
   806  007D26                     u85:
   807  007D26  9880               	bcf	3968,4,c	;volatile
   808  007D28                     u87:
   809  007D28  0012               	return		;funcret
   810  007D2A                     __end_of_led_sens:
   811                           	opt stack 0
   812                           tblptru	equ	0xFF8
   813                           status	equ	0xFD8
   814                           
   815 ;; *************** function _getRoadState *****************
   816 ;; Defined at:
   817 ;;		line 41 in file "main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;  a               2    0[COMRAM] short 
   820 ;;  b               2    2[COMRAM] short 
   821 ;;  c               2    4[COMRAM] short 
   822 ;;  d               2    6[COMRAM] short 
   823 ;;  e               2    8[COMRAM] short 
   824 ;; Auto vars:     Size  Location     Type
   825 ;;		None
   826 ;; Return value:  Size  Location     Type
   827 ;;                  1    wreg      enum E3329
   828 ;; Registers used:
   829 ;;		wreg, status,2, status,0
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   835 ;;      Params:        10       0       0       0       0       0       0       0       0
   836 ;;      Locals:         0       0       0       0       0       0       0       0       0
   837 ;;      Temps:          0       0       0       0       0       0       0       0       0
   838 ;;      Totals:        10       0       0       0       0       0       0       0       0
   839 ;;Total ram usage:       10 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; This function calls:
   842 ;;		Nothing
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text7
   849  007E54                     __ptext7:
   850                           	opt stack 0
   851  007E54                     _getRoadState:
   852                           	opt stack 30
   853                           
   854                           ;main.c: 42: if ( (a == 1 && b == 1 && c == 1
   855                           ;main.c: 43: && d == 1 && e == 1)
   856                           ;main.c: 44: || (a == 0 && b == 0 && c == 0
   857                           ;main.c: 45: && d == 0 && e == 0)) {
   858                           
   859                           ;incstack = 0
   860  007E54  0401               	decf	getRoadState@a,w,c
   861  007E56  1002               	iorwf	getRoadState@a+1,w,c
   862  007E58  A4D8               	btfss	status,2,c
   863  007E5A  D010               	goto	u710
   864  007E5C  0403               	decf	getRoadState@b,w,c
   865  007E5E  1004               	iorwf	getRoadState@b+1,w,c
   866  007E60  A4D8               	btfss	status,2,c
   867  007E62  D00C               	goto	u710
   868  007E64  0405               	decf	getRoadState@c,w,c
   869  007E66  1006               	iorwf	getRoadState@c+1,w,c
   870  007E68  A4D8               	btfss	status,2,c
   871  007E6A  D008               	goto	u710
   872  007E6C  0407               	decf	getRoadState@d,w,c
   873  007E6E  1008               	iorwf	getRoadState@d+1,w,c
   874  007E70  A4D8               	btfss	status,2,c
   875  007E72  D004               	goto	u710
   876  007E74  0409               	decf	getRoadState@e,w,c
   877  007E76  100A               	iorwf	getRoadState@e+1,w,c
   878  007E78  B4D8               	btfsc	status,2,c
   879  007E7A  D014               	goto	u760
   880  007E7C                     u710:
   881  007E7C  5001               	movf	getRoadState@a,w,c
   882  007E7E  1002               	iorwf	getRoadState@a+1,w,c
   883  007E80  A4D8               	btfss	status,2,c
   884  007E82  D012               	goto	l32
   885  007E84  5003               	movf	getRoadState@b,w,c
   886  007E86  1004               	iorwf	getRoadState@b+1,w,c
   887  007E88  A4D8               	btfss	status,2,c
   888  007E8A  D00E               	goto	l32
   889  007E8C  5005               	movf	getRoadState@c,w,c
   890  007E8E  1006               	iorwf	getRoadState@c+1,w,c
   891  007E90  A4D8               	btfss	status,2,c
   892  007E92  D00A               	goto	l32
   893  007E94  5007               	movf	getRoadState@d,w,c
   894  007E96  1008               	iorwf	getRoadState@d+1,w,c
   895  007E98  A4D8               	btfss	status,2,c
   896  007E9A  D006               	goto	l32
   897  007E9C  5009               	movf	getRoadState@e,w,c
   898  007E9E  100A               	iorwf	getRoadState@e+1,w,c
   899  007EA0  A4D8               	btfss	status,2,c
   900  007EA2  D002               	goto	l32
   901  007EA4                     u760:
   902                           
   903                           ;main.c: 46: return off_track;
   904  007EA4  0E01               	movlw	1
   905  007EA6  0012               	return	
   906  007EA8                     l32:
   907                           
   908                           ;main.c: 47: }
   909                           ;main.c: 49: if ( (c == 0
   910                           ;main.c: 50: && a == 1 && b == 1
   911                           ;main.c: 51: && d == 1 && e == 1)
   912                           ;main.c: 52: || (c == 1
   913                           ;main.c: 53: && a == 0 && b == 0
   914                           ;main.c: 54: && d == 0 && e == 0)) {
   915  007EA8  5005               	movf	getRoadState@c,w,c
   916  007EAA  1006               	iorwf	getRoadState@c+1,w,c
   917  007EAC  A4D8               	btfss	status,2,c
   918  007EAE  D010               	goto	u810
   919  007EB0  0401               	decf	getRoadState@a,w,c
   920  007EB2  1002               	iorwf	getRoadState@a+1,w,c
   921  007EB4  A4D8               	btfss	status,2,c
   922  007EB6  D00C               	goto	u810
   923  007EB8  0403               	decf	getRoadState@b,w,c
   924  007EBA  1004               	iorwf	getRoadState@b+1,w,c
   925  007EBC  A4D8               	btfss	status,2,c
   926  007EBE  D008               	goto	u810
   927  007EC0  0407               	decf	getRoadState@d,w,c
   928  007EC2  1008               	iorwf	getRoadState@d+1,w,c
   929  007EC4  A4D8               	btfss	status,2,c
   930  007EC6  D004               	goto	u810
   931  007EC8  0409               	decf	getRoadState@e,w,c
   932  007ECA  100A               	iorwf	getRoadState@e+1,w,c
   933  007ECC  B4D8               	btfsc	status,2,c
   934  007ECE  D014               	goto	u860
   935  007ED0                     u810:
   936  007ED0  0405               	decf	getRoadState@c,w,c
   937  007ED2  1006               	iorwf	getRoadState@c+1,w,c
   938  007ED4  A4D8               	btfss	status,2,c
   939  007ED6  D012               	goto	l38
   940  007ED8  5001               	movf	getRoadState@a,w,c
   941  007EDA  1002               	iorwf	getRoadState@a+1,w,c
   942  007EDC  A4D8               	btfss	status,2,c
   943  007EDE  D00E               	goto	l38
   944  007EE0  5003               	movf	getRoadState@b,w,c
   945  007EE2  1004               	iorwf	getRoadState@b+1,w,c
   946  007EE4  A4D8               	btfss	status,2,c
   947  007EE6  D00A               	goto	l38
   948  007EE8  5007               	movf	getRoadState@d,w,c
   949  007EEA  1008               	iorwf	getRoadState@d+1,w,c
   950  007EEC  A4D8               	btfss	status,2,c
   951  007EEE  D006               	goto	l38
   952  007EF0  5009               	movf	getRoadState@e,w,c
   953  007EF2  100A               	iorwf	getRoadState@e+1,w,c
   954  007EF4  A4D8               	btfss	status,2,c
   955  007EF6  D002               	goto	l38
   956  007EF8                     u860:
   957                           
   958                           ;main.c: 55: return straight_line;
   959  007EF8  0E02               	movlw	2
   960  007EFA  0012               	return	
   961  007EFC                     l38:
   962                           
   963                           ;main.c: 56: }
   964                           ;main.c: 59: if (a == 1 && b == 0
   965                           ;main.c: 60: && d == 1 && e == 1) {
   966  007EFC  0401               	decf	getRoadState@a,w,c
   967  007EFE  1002               	iorwf	getRoadState@a+1,w,c
   968  007F00  A4D8               	btfss	status,2,c
   969  007F02  D00E               	goto	l43
   970  007F04  5003               	movf	getRoadState@b,w,c
   971  007F06  1004               	iorwf	getRoadState@b+1,w,c
   972  007F08  A4D8               	btfss	status,2,c
   973  007F0A  D00A               	goto	l43
   974  007F0C  0407               	decf	getRoadState@d,w,c
   975  007F0E  1008               	iorwf	getRoadState@d+1,w,c
   976  007F10  A4D8               	btfss	status,2,c
   977  007F12  D006               	goto	l43
   978  007F14  0409               	decf	getRoadState@e,w,c
   979  007F16  100A               	iorwf	getRoadState@e+1,w,c
   980  007F18  A4D8               	btfss	status,2,c
   981  007F1A  D002               	goto	l43
   982                           
   983                           ;main.c: 61: return off_right_little;
   984  007F1C  0E03               	movlw	3
   985  007F1E  0012               	return	
   986  007F20                     l43:
   987                           
   988                           ;main.c: 62: }
   989                           ;main.c: 63: if (a == 1 && b == 1
   990                           ;main.c: 64: && d == 0 && e == 1) {
   991  007F20  0401               	decf	getRoadState@a,w,c
   992  007F22  1002               	iorwf	getRoadState@a+1,w,c
   993  007F24  A4D8               	btfss	status,2,c
   994  007F26  D00E               	goto	l44
   995  007F28  0403               	decf	getRoadState@b,w,c
   996  007F2A  1004               	iorwf	getRoadState@b+1,w,c
   997  007F2C  A4D8               	btfss	status,2,c
   998  007F2E  D00A               	goto	l44
   999  007F30  5007               	movf	getRoadState@d,w,c
  1000  007F32  1008               	iorwf	getRoadState@d+1,w,c
  1001  007F34  A4D8               	btfss	status,2,c
  1002  007F36  D006               	goto	l44
  1003  007F38  0409               	decf	getRoadState@e,w,c
  1004  007F3A  100A               	iorwf	getRoadState@e+1,w,c
  1005  007F3C  A4D8               	btfss	status,2,c
  1006  007F3E  D002               	goto	l44
  1007                           
  1008                           ;main.c: 65: return off_left_little;
  1009  007F40  0E05               	movlw	5
  1010  007F42  0012               	return	
  1011  007F44                     l44:
  1012                           
  1013                           ;main.c: 66: }
  1014                           ;main.c: 67: if (a == 0 && c == 1 && e == 1) {
  1015  007F44  5001               	movf	getRoadState@a,w,c
  1016  007F46  1002               	iorwf	getRoadState@a+1,w,c
  1017  007F48  A4D8               	btfss	status,2,c
  1018  007F4A  D00A               	goto	l45
  1019  007F4C  0405               	decf	getRoadState@c,w,c
  1020  007F4E  1006               	iorwf	getRoadState@c+1,w,c
  1021  007F50  A4D8               	btfss	status,2,c
  1022  007F52  D006               	goto	l45
  1023  007F54  0409               	decf	getRoadState@e,w,c
  1024  007F56  100A               	iorwf	getRoadState@e+1,w,c
  1025  007F58  A4D8               	btfss	status,2,c
  1026  007F5A  D002               	goto	l45
  1027                           
  1028                           ;main.c: 68: return off_right;
  1029  007F5C  0E04               	movlw	4
  1030  007F5E  0012               	return	
  1031  007F60                     l45:
  1032                           
  1033                           ;main.c: 69: }
  1034                           ;main.c: 70: if (a == 1 && c == 1 && e == 0) {
  1035  007F60  0401               	decf	getRoadState@a,w,c
  1036  007F62  1002               	iorwf	getRoadState@a+1,w,c
  1037  007F64  A4D8               	btfss	status,2,c
  1038  007F66  D00A               	goto	l46
  1039  007F68  0405               	decf	getRoadState@c,w,c
  1040  007F6A  1006               	iorwf	getRoadState@c+1,w,c
  1041  007F6C  A4D8               	btfss	status,2,c
  1042  007F6E  D006               	goto	l46
  1043  007F70  5009               	movf	getRoadState@e,w,c
  1044  007F72  100A               	iorwf	getRoadState@e+1,w,c
  1045  007F74  A4D8               	btfss	status,2,c
  1046  007F76  D002               	goto	l46
  1047                           
  1048                           ;main.c: 71: return off_left;
  1049  007F78  0E06               	movlw	6
  1050  007F7A  0012               	return	
  1051  007F7C                     l46:
  1052                           
  1053                           ;main.c: 72: }
  1054                           ;main.c: 75: if (a == 0 && b == 1
  1055                           ;main.c: 76: && d == 0 && e == 0) {
  1056  007F7C  5001               	movf	getRoadState@a,w,c
  1057  007F7E  1002               	iorwf	getRoadState@a+1,w,c
  1058  007F80  A4D8               	btfss	status,2,c
  1059  007F82  D00E               	goto	l47
  1060  007F84  0403               	decf	getRoadState@b,w,c
  1061  007F86  1004               	iorwf	getRoadState@b+1,w,c
  1062  007F88  A4D8               	btfss	status,2,c
  1063  007F8A  D00A               	goto	l47
  1064  007F8C  5007               	movf	getRoadState@d,w,c
  1065  007F8E  1008               	iorwf	getRoadState@d+1,w,c
  1066  007F90  A4D8               	btfss	status,2,c
  1067  007F92  D006               	goto	l47
  1068  007F94  5009               	movf	getRoadState@e,w,c
  1069  007F96  100A               	iorwf	getRoadState@e+1,w,c
  1070  007F98  A4D8               	btfss	status,2,c
  1071  007F9A  D002               	goto	l47
  1072                           
  1073                           ;main.c: 77: return off_right_little;
  1074  007F9C  0E03               	movlw	3
  1075  007F9E  0012               	return	
  1076  007FA0                     l47:
  1077                           
  1078                           ;main.c: 78: }
  1079                           ;main.c: 79: if (a == 0 && b == 0
  1080                           ;main.c: 80: && d == 1 && e == 0) {
  1081  007FA0  5001               	movf	getRoadState@a,w,c
  1082  007FA2  1002               	iorwf	getRoadState@a+1,w,c
  1083  007FA4  A4D8               	btfss	status,2,c
  1084  007FA6  D00E               	goto	l48
  1085  007FA8  5003               	movf	getRoadState@b,w,c
  1086  007FAA  1004               	iorwf	getRoadState@b+1,w,c
  1087  007FAC  A4D8               	btfss	status,2,c
  1088  007FAE  D00A               	goto	l48
  1089  007FB0  0407               	decf	getRoadState@d,w,c
  1090  007FB2  1008               	iorwf	getRoadState@d+1,w,c
  1091  007FB4  A4D8               	btfss	status,2,c
  1092  007FB6  D006               	goto	l48
  1093  007FB8  5009               	movf	getRoadState@e,w,c
  1094  007FBA  100A               	iorwf	getRoadState@e+1,w,c
  1095  007FBC  A4D8               	btfss	status,2,c
  1096  007FBE  D002               	goto	l48
  1097                           
  1098                           ;main.c: 81: return off_left_little;
  1099  007FC0  0E05               	movlw	5
  1100  007FC2  0012               	return	
  1101  007FC4                     l48:
  1102                           
  1103                           ;main.c: 82: }
  1104                           ;main.c: 83: if (a == 1 && c == 0 && e == 0) {
  1105  007FC4  0401               	decf	getRoadState@a,w,c
  1106  007FC6  1002               	iorwf	getRoadState@a+1,w,c
  1107  007FC8  A4D8               	btfss	status,2,c
  1108  007FCA  D00A               	goto	l49
  1109  007FCC  5005               	movf	getRoadState@c,w,c
  1110  007FCE  1006               	iorwf	getRoadState@c+1,w,c
  1111  007FD0  A4D8               	btfss	status,2,c
  1112  007FD2  D006               	goto	l49
  1113  007FD4  5009               	movf	getRoadState@e,w,c
  1114  007FD6  100A               	iorwf	getRoadState@e+1,w,c
  1115  007FD8  A4D8               	btfss	status,2,c
  1116  007FDA  D002               	goto	l49
  1117                           
  1118                           ;main.c: 84: return off_right;
  1119  007FDC  0E04               	movlw	4
  1120  007FDE  0012               	return	
  1121  007FE0                     l49:
  1122                           
  1123                           ;main.c: 85: }
  1124                           ;main.c: 86: if (a == 0 && c == 0 && e == 1) {
  1125  007FE0  5001               	movf	getRoadState@a,w,c
  1126  007FE2  1002               	iorwf	getRoadState@a+1,w,c
  1127  007FE4  A4D8               	btfss	status,2,c
  1128  007FE6  D00A               	goto	l50
  1129  007FE8  5005               	movf	getRoadState@c,w,c
  1130  007FEA  1006               	iorwf	getRoadState@c+1,w,c
  1131  007FEC  A4D8               	btfss	status,2,c
  1132  007FEE  D006               	goto	l50
  1133  007FF0  0409               	decf	getRoadState@e,w,c
  1134  007FF2  100A               	iorwf	getRoadState@e+1,w,c
  1135  007FF4  A4D8               	btfss	status,2,c
  1136  007FF6  D002               	goto	l50
  1137                           
  1138                           ;main.c: 87: return off_left;
  1139  007FF8  0E06               	movlw	6
  1140  007FFA  0012               	return	
  1141  007FFC                     l50:
  1142                           
  1143                           ;main.c: 88: }
  1144                           ;main.c: 90: return on_track;
  1145  007FFC  0E00               	movlw	0
  1146  007FFE  0012               	return	
  1147  008000                     __end_of_getRoadState:
  1148                           	opt stack 0
  1149                           tblptru	equ	0xFF8
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _accelerate *****************
  1153 ;; Defined at:
  1154 ;;		line 153 in file "main.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  2   67[None  ] int 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1168 ;;      Params:         0       0       0       0       0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1171 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    1
  1175 ;; This function calls:
  1176 ;;		_wait00
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text8
  1183  007C60                     __ptext8:
  1184                           	opt stack 0
  1185  007C60                     _accelerate:
  1186                           	opt stack 29
  1187                           
  1188                           ;main.c: 154: PORTC=0x03;
  1189                           
  1190                           ;incstack = 0
  1191  007C60  0E03               	movlw	3
  1192  007C62  6E82               	movwf	3970,c	;volatile
  1193                           
  1194                           ;main.c: 155: wait00(12);
  1195  007C64  0E00               	movlw	0
  1196  007C66  6E02               	movwf	wait00@k+1,c
  1197  007C68  0E0C               	movlw	12
  1198  007C6A  6E01               	movwf	wait00@k,c
  1199  007C6C  EC95  F03E         	call	_wait00	;wreg free
  1200                           
  1201                           ;main.c: 156: PORTC=0x02;
  1202  007C70  0E02               	movlw	2
  1203  007C72  6E82               	movwf	3970,c	;volatile
  1204                           
  1205                           ;main.c: 157: wait00(1);
  1206  007C74  0E00               	movlw	0
  1207  007C76  6E02               	movwf	wait00@k+1,c
  1208  007C78  0E01               	movlw	1
  1209  007C7A  6E01               	movwf	wait00@k,c
  1210  007C7C  EC95  F03E         	call	_wait00	;wreg free
  1211                           
  1212                           ;main.c: 158: PORTC=0x00;
  1213  007C80  0E00               	movlw	0
  1214  007C82  6E82               	movwf	3970,c	;volatile
  1215                           
  1216                           ;main.c: 159: wait00(2);
  1217  007C84  0E00               	movlw	0
  1218  007C86  6E02               	movwf	wait00@k+1,c
  1219  007C88  0E02               	movlw	2
  1220  007C8A  6E01               	movwf	wait00@k,c
  1221  007C8C  EC95  F03E         	call	_wait00	;wreg free
  1222  007C90  0012               	return		;funcret
  1223  007C92                     __end_of_accelerate:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           status	equ	0xFD8
  1227                           
  1228 ;; *************** function _wait00 *****************
  1229 ;; Defined at:
  1230 ;;		line 10 in file "main.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  k               2    0[COMRAM] short 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  i               2    5[COMRAM] short 
  1235 ;;  j               2    3[COMRAM] short 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  2    0[COMRAM] int 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1245 ;;      Params:         2       0       0       0       0       0       0       0       0
  1246 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1247 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1248 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1249 ;;Total ram usage:        7 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_turnLeft
  1255 ;;		_turnRight
  1256 ;;		_turnLeftWide
  1257 ;;		_turnRightWide
  1258 ;;		_straight
  1259 ;;		_accelerate
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text9
  1264  007D2A                     __ptext9:
  1265                           	opt stack 0
  1266  007D2A                     _wait00:
  1267                           	opt stack 29
  1268                           
  1269                           ;main.c: 13: short i;
  1270                           ;main.c: 14: short j;
  1271                           ;main.c: 15: for(j=0;j<k;j++){
  1272                           
  1273                           ;incstack = 0
  1274  007D2A  0E00               	movlw	0
  1275  007D2C  6E05               	movwf	wait00@j+1,c
  1276  007D2E  0E00               	movlw	0
  1277  007D30  6E04               	movwf	wait00@j,c
  1278  007D32  D011               	goto	l21
  1279  007D34                     
  1280                           ;main.c: 16: for(i=0;i<3000;i++){
  1281  007D34  0E00               	movlw	0
  1282  007D36  6E07               	movwf	wait00@i+1,c
  1283  007D38  0E00               	movlw	0
  1284  007D3A  6E06               	movwf	wait00@i,c
  1285  007D3C                     l956:
  1286  007D3C  BE07               	btfsc	wait00@i+1,7,c
  1287  007D3E  D006               	goto	l23
  1288  007D40  0EB8               	movlw	184
  1289  007D42  5C06               	subwf	wait00@i,w,c
  1290  007D44  0E0B               	movlw	11
  1291  007D46  5807               	subwfb	wait00@i+1,w,c
  1292  007D48  B0D8               	btfsc	status,0,c
  1293  007D4A  D003               	goto	u650
  1294  007D4C                     l23:
  1295  007D4C  4A06               	infsnz	wait00@i,f,c
  1296  007D4E  2A07               	incf	wait00@i+1,f,c
  1297  007D50  D7F5               	goto	l956
  1298  007D52                     u650:
  1299  007D52  4A04               	infsnz	wait00@j,f,c
  1300  007D54  2A05               	incf	wait00@j+1,f,c
  1301  007D56                     l21:
  1302  007D56  5001               	movf	wait00@k,w,c
  1303  007D58  5C04               	subwf	wait00@j,w,c
  1304  007D5A  5005               	movf	wait00@j+1,w,c
  1305  007D5C  0A80               	xorlw	128
  1306  007D5E  6E03               	movwf	??_wait00& (0+255),c
  1307  007D60  5002               	movf	wait00@k+1,w,c
  1308  007D62  0A80               	xorlw	128
  1309  007D64  5803               	subwfb	??_wait00& (0+255),w,c
  1310  007D66  B0D8               	btfsc	status,0,c
  1311  007D68  0012               	return	
  1312  007D6A  D7E4               	goto	l22
  1313  007D6C                     __end_of_wait00:
  1314                           	opt stack 0
  1315  0000                     tblptru	equ	0xFF8
  1316                           status	equ	0xFD8
  1317                           tblptru	equ	0xFF8
  1318                           status	equ	0xFD8
  1319                           
  1320                           	psect	rparam
  1321  0000                     tblptru	equ	0xFF8
  1322                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_getRoadState
    _turnRightWide->_wait00
    _turnRight->_wait00
    _turnLeftWide->_wait00
    _turnLeft->_wait00
    _straight->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    8920
                                             10 COMRAM     7     7      0
                         _accelerate
                       _getRoadState
                           _led_sens
                           _straight
                           _turnLeft
                       _turnLeftWide
                          _turnRight
                      _turnRightWide
 ---------------------------------------------------------------------------------
 (1) _turnRightWide                                        0     0      0    1232
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            0     0      0    1232
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeftWide                                         0     0      0    1232
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             0     0      0    1232
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1232
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getRoadState                                        10     0     10    1436
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1232
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1232
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _accelerate
     _wait00
   _getRoadState
   _led_sens
   _straight
     _wait00
   _turnLeft
     _wait00
   _turnLeftWide
     _wait00
   _turnRight
     _wait00
   _turnRightWide
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 12:31:59 2018

                     l21 7D56                       l22 7D34                       l23 7D4C  
                     l32 7EA8                       l50 7FFC                       l43 7F20  
                     l44 7F44                       l45 7F60                       l46 7F7C  
                     l38 7EFC                       l47 7FA0                       l48 7FC4  
                     l49 7FE0                       l81 7E0E                       l73 7D8C  
                     l82 7E14                       l74 7D88                       l83 7E1A  
                     l84 7E20                       l76 7D94                       l85 7E26  
                     l78 7E2C                       l79 7E08                       u45 7CFE  
                     u55 7D08                       u47 7D00                       u65 7D12  
                     u57 7D0A                       u75 7D1C                       u67 7D14  
                     u85 7D26                       u77 7D1E                       u87 7D28  
                    l956 7D3C                      u710 7E7C                      u650 7D52  
                    u810 7ED0                      u760 7EA4                      u860 7EF8  
                   u1200 7DEE                     u1208 7DF0                     u1160 7DA6  
                   u1170 7DB8                     u1180 7DCA                     u1190 7DDC  
                   u1168 7DA8                     u1178 7DBA                     u1188 7DCC  
                   u1198 7DDE                     _main 7D6C                     start 2000  
           ___param_bank 000000                    ?_main 0001                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94    __size_of_turnLeftWide 0032  
                  status 000FD8          __initialization 2008             __end_of_main 7E54  
           _turnLeftWide 7C92                   ??_main 000B            __activetblptr 000002  
   __end_of_getRoadState 8000                   _ADCON1 000FC1         __end_of_led_sens 7D2A  
                 _wait00 7D2A   __size_of_turnRightWide 0032                   tblptru 000FF8  
       __end_of_straight 7C1C         __end_of_turnLeft 7C3E               __accesstop 0060  
__end_of__initialization 2008            ___rparam_used 000001           __pcstackCOMRAM 0001  
             _accelerate 7C60            _turnRightWide 7CC4                  ?_wait00 0001  
  __size_of_getRoadState 01AC                ?_led_sens 0001       __size_of_turnRight 0022  
         ?_turnRightWide 0001                  __Hparam 0000                  __Lparam 0000  
           _getRoadState 7E54              ?_accelerate 0001                ?_straight 0001  
                __pcinit 2008                  __ramtop 0800          __size_of_wait00 0042  
              ?_turnLeft 0001                  __ptext0 7D6C                  __ptext1 7CC4  
                __ptext2 7C3E                  __ptext3 7C92                  __ptext4 7C1C  
                __ptext5 7BFA                  __ptext6 7CF6                  __ptext7 7E54  
                __ptext8 7C60                  __ptext9 7D2A           main@road_state 0011  
   end_of_initialization 2008               ??_led_sens 0001            __Lmediumconst 0000  
                wait00@i 0006                  wait00@j 0004                  wait00@k 0001  
             ??_straight 0008               ??_turnLeft 0008                _PORTAbits 000F80  
              _PORTBbits 000F81        __end_of_turnRight 7C60      __size_of_accelerate 0032  
        ??_turnRightWide 0008           __end_of_wait00 7D6C      start_initialization 2008  
main@previous_road_state 0010                 ??_wait00 0003        __size_of_led_sens 0034  
           ??_accelerate 0008            ?_turnLeftWide 0001        __size_of_straight 0022  
      __size_of_turnLeft 0022       __end_of_accelerate 7C92           ??_turnLeftWide 0008  
              _turnRight 7C3E                 __Hrparam 0000                 __Lrparam 0000  
             ?_turnRight 0001                 _led_sens 7CF6            __size_of_main 00E8  
  __end_of_turnRightWide 7CF6            getRoadState@a 0001            getRoadState@b 0003  
          getRoadState@c 0005            getRoadState@d 0007            getRoadState@e 0009  
               _straight 7BFA                 _turnLeft 7C1C     __end_of_turnLeftWide 7CC4  
          ?_getRoadState 0001              ??_turnRight 0008           ??_getRoadState 000B  
