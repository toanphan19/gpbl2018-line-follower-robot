

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 13:38:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	text10,global,reloc=2,class=CODE,delta=1
    18                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F2553 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _PORTB	set	3969
    57  0000                     _PORTA	set	3968
    58  0000                     _TRISC	set	3988
    59  0000                     _TRISB	set	3987
    60  0000                     _TRISA	set	3986
    61  0000                     _ADCON1	set	4033
    62  0000                     _PORTC	set	3970
    63  0000                     _PORTBbits	set	3969
    64  0000                     _PORTAbits	set	3968
    65                           
    66                           ; #config settings
    67                           
    68                           	psect	cinit
    69  002008                     __pcinit:
    70                           	opt stack 0
    71  002008                     start_initialization:
    72                           	opt stack 0
    73  002008                     __initialization:
    74                           	opt stack 0
    75  002008                     end_of_initialization:
    76                           	opt stack 0
    77  002008                     __end_of__initialization:
    78                           	opt stack 0
    79  002008  0E00               	movlw	low (__Lmediumconst shr (0+16))
    80  00200A  6EF8               	movwf	tblptru,c
    81  00200C  0100               	movlb	0
    82  00200E  EF7F  F03E         	goto	_main	;jump to C main() function
    83                           tblptru	equ	0xFF8
    84                           
    85                           	psect	cstackCOMRAM
    86  000001                     __pcstackCOMRAM:
    87                           	opt stack 0
    88  000001                     ?_isAllStraight:
    89                           	opt stack 0
    90  000001                     ?___awmod:
    91                           	opt stack 0
    92  000001                     wait00@k:
    93                           	opt stack 0
    94  000001                     getRoadState@a:
    95                           	opt stack 0
    96  000001                     isAllStraight@states:
    97                           	opt stack 0
    98  000001                     ___awmod@dividend:
    99                           	opt stack 0
   100                           
   101                           ; 2 bytes @ 0x0
   102  000001                     	ds	2
   103  000003                     ??_wait00:
   104  000003                     getRoadState@b:
   105                           	opt stack 0
   106  000003                     ___awmod@divisor:
   107                           	opt stack 0
   108                           
   109                           ; 2 bytes @ 0x2
   110  000003                     	ds	1
   111  000004                     wait00@j:
   112                           	opt stack 0
   113  000004                     isAllStraight@i:
   114                           	opt stack 0
   115                           
   116                           ; 2 bytes @ 0x3
   117  000004                     	ds	1
   118  000005                     ___awmod@counter:
   119                           	opt stack 0
   120  000005                     getRoadState@c:
   121                           	opt stack 0
   122                           
   123                           ; 2 bytes @ 0x4
   124  000005                     	ds	1
   125  000006                     ___awmod@sign:
   126                           	opt stack 0
   127  000006                     wait00@i:
   128                           	opt stack 0
   129                           
   130                           ; 2 bytes @ 0x5
   131  000006                     	ds	1
   132  000007                     getRoadState@d:
   133                           	opt stack 0
   134                           
   135                           ; 2 bytes @ 0x6
   136  000007                     	ds	1
   137  000008                     
   138                           ; 1 bytes @ 0x7
   139  000008                     	ds	1
   140  000009                     getRoadState@e:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x8
   144  000009                     	ds	2
   145  00000B                     ??_main:
   146                           
   147                           ; 1 bytes @ 0xA
   148  00000B                     	ds	5
   149  000010                     main@states:
   150                           	opt stack 0
   151                           
   152                           ; 5 bytes @ 0xF
   153  000010                     	ds	5
   154  000015                     main@current:
   155                           	opt stack 0
   156                           
   157                           ; 2 bytes @ 0x14
   158  000015                     	ds	2
   159  000017                     main@road_state:
   160                           	opt stack 0
   161                           
   162                           ; 1 bytes @ 0x16
   163  000017                     	ds	1
   164                           tblptru	equ	0xFF8
   165                           
   166 ;;
   167 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   168 ;;
   169 ;; *************** function _main *****************
   170 ;; Defined at:
   171 ;;		line 163 in file "main.c"
   172 ;; Parameters:    Size  Location     Type
   173 ;;		None
   174 ;; Auto vars:     Size  Location     Type
   175 ;;  states          5   15[COMRAM] enum E3329[5]
   176 ;;  current         2   20[COMRAM] int 
   177 ;;  road_state      1   22[COMRAM] enum E3329
   178 ;;  previous_roa    1    0        enum E3329
   179 ;; Return value:  Size  Location     Type
   180 ;;                  2   78[None  ] int 
   181 ;; Registers used:
   182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   183 ;; Tracked objects:
   184 ;;		On entry : 0/0
   185 ;;		On exit  : 0/0
   186 ;;		Unchanged: 0/0
   187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   188 ;;      Params:         0       0       0       0       0       0       0       0       0
   189 ;;      Locals:         8       0       0       0       0       0       0       0       0
   190 ;;      Temps:          5       0       0       0       0       0       0       0       0
   191 ;;      Totals:        13       0       0       0       0       0       0       0       0
   192 ;;Total ram usage:       13 bytes
   193 ;; Hardware stack levels required when called:    2
   194 ;; This function calls:
   195 ;;		___awmod
   196 ;;		_accelerate
   197 ;;		_getRoadState
   198 ;;		_isAllStraight
   199 ;;		_led_sens
   200 ;;		_straight
   201 ;;		_turnLeft
   202 ;;		_turnLeftSmall
   203 ;;		_turnRight
   204 ;;		_turnRightSmall
   205 ;; This function is called by:
   206 ;;		Startup code after reset
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text0
   211  007CFE                     __ptext0:
   212                           	opt stack 0
   213  007CFE                     _main:
   214                           	opt stack 29
   215                           
   216                           ;main.c: 166: ADCON1 = 0x0F;
   217                           
   218                           ;incstack = 0
   219  007CFE  0E0F               	movlw	15
   220  007D00  6EC1               	movwf	4033,c	;volatile
   221                           
   222                           ;main.c: 169: TRISA = 0x20;
   223  007D02  0E20               	movlw	32
   224  007D04  6E92               	movwf	3986,c	;volatile
   225                           
   226                           ;main.c: 170: TRISB = 0xFF;
   227  007D06  6893               	setf	3987,c	;volatile
   228                           
   229                           ;main.c: 171: TRISC = 0x00;
   230  007D08  0E00               	movlw	0
   231  007D0A  6E94               	movwf	3988,c	;volatile
   232                           
   233                           ;main.c: 174: PORTA = 0x00;
   234  007D0C  0E00               	movlw	0
   235  007D0E  6E80               	movwf	3968,c	;volatile
   236                           
   237                           ;main.c: 175: PORTB = 0x00;
   238  007D10  0E00               	movlw	0
   239  007D12  6E81               	movwf	3969,c	;volatile
   240                           
   241                           ;main.c: 176: PORTC = 0x00;
   242  007D14  0E00               	movlw	0
   243  007D16  6E82               	movwf	3970,c	;volatile
   244                           
   245                           ;main.c: 179: while(PORTAbits.RA5==1){
   246  007D18  D002               	goto	l79
   247  007D1A                     
   248                           ;main.c: 180: led_sens();
   249  007D1A  ECE0  F03D         	call	_led_sens	;wreg free
   250  007D1E                     l79:
   251  007D1E  BA80               	btfsc	3968,5,c	;volatile
   252  007D20  D7FC               	goto	l80
   253                           
   254                           ;main.c: 181: }
   255                           ;main.c: 183: enum road_state_codes road_state = on_track;
   256  007D22  0E00               	movlw	0
   257  007D24  6E17               	movwf	main@road_state,c
   258                           
   259                           ;main.c: 184: enum road_state_codes previous_road_state;
   260                           ;main.c: 186: int current = -1;
   261  007D26  6815               	setf	main@current,c
   262  007D28  6816               	setf	main@current+1,c
   263  007D2A                     
   264                           ;main.c: 191: led_sens();
   265  007D2A  ECE0  F03D         	call	_led_sens	;wreg free
   266                           
   267                           ;main.c: 193: road_state = getRoadState(
   268                           ;main.c: 194: PORTBbits.RB0, PORTBbits.RB1, PORTBbits.RB2,
   269                           ;main.c: 195: PORTBbits.RB3, PORTBbits.RB4
   270                           ;main.c: 196: );
   271  007D2E  A081               	btfss	3969,0,c	;volatile
   272  007D30  D003               	goto	u1370
   273  007D32  6A0B               	clrf	??_main& (0+255),c
   274  007D34  2A0B               	incf	??_main& (0+255),f,c
   275  007D36  D001               	goto	u1378
   276  007D38                     u1370:
   277  007D38  6A0B               	clrf	??_main& (0+255),c
   278  007D3A                     u1378:
   279  007D3A  500B               	movf	??_main,w,c
   280  007D3C  6E01               	movwf	getRoadState@a,c
   281  007D3E  6A02               	clrf	getRoadState@a+1,c
   282  007D40  A281               	btfss	3969,1,c	;volatile
   283  007D42  D003               	goto	u1380
   284  007D44  6A0C               	clrf	(??_main+1)& (0+255),c
   285  007D46  2A0C               	incf	(??_main+1)& (0+255),f,c
   286  007D48  D001               	goto	u1388
   287  007D4A                     u1380:
   288  007D4A  6A0C               	clrf	(??_main+1)& (0+255),c
   289  007D4C                     u1388:
   290  007D4C  500C               	movf	??_main+1,w,c
   291  007D4E  6E03               	movwf	getRoadState@b,c
   292  007D50  6A04               	clrf	getRoadState@b+1,c
   293  007D52  A481               	btfss	3969,2,c	;volatile
   294  007D54  D003               	goto	u1390
   295  007D56  6A0D               	clrf	(??_main+2)& (0+255),c
   296  007D58  2A0D               	incf	(??_main+2)& (0+255),f,c
   297  007D5A  D001               	goto	u1398
   298  007D5C                     u1390:
   299  007D5C  6A0D               	clrf	(??_main+2)& (0+255),c
   300  007D5E                     u1398:
   301  007D5E  500D               	movf	??_main+2,w,c
   302  007D60  6E05               	movwf	getRoadState@c,c
   303  007D62  6A06               	clrf	getRoadState@c+1,c
   304  007D64  A681               	btfss	3969,3,c	;volatile
   305  007D66  D003               	goto	u1400
   306  007D68  6A0E               	clrf	(??_main+3)& (0+255),c
   307  007D6A  2A0E               	incf	(??_main+3)& (0+255),f,c
   308  007D6C  D001               	goto	u1408
   309  007D6E                     u1400:
   310  007D6E  6A0E               	clrf	(??_main+3)& (0+255),c
   311  007D70                     u1408:
   312  007D70  500E               	movf	??_main+3,w,c
   313  007D72  6E07               	movwf	getRoadState@d,c
   314  007D74  6A08               	clrf	getRoadState@d+1,c
   315  007D76  A881               	btfss	3969,4,c	;volatile
   316  007D78  D003               	goto	u1410
   317  007D7A  6A0F               	clrf	(??_main+4)& (0+255),c
   318  007D7C  2A0F               	incf	(??_main+4)& (0+255),f,c
   319  007D7E  D001               	goto	u1418
   320  007D80                     u1410:
   321  007D80  6A0F               	clrf	(??_main+4)& (0+255),c
   322  007D82                     u1418:
   323  007D82  500F               	movf	??_main+4,w,c
   324  007D84  6E09               	movwf	getRoadState@e,c
   325  007D86  6A0A               	clrf	getRoadState@e+1,c
   326  007D88  EC2A  F03F         	call	_getRoadState	;wreg free
   327  007D8C  6E17               	movwf	main@road_state,c
   328                           
   329                           ;main.c: 198: if (road_state == off_track) {
   330  007D8E  0417               	decf	main@road_state,w,c
   331  007D90  A4D8               	btfss	status,2,c
   332  007D92  D014               	goto	l83
   333                           
   334                           ;main.c: 199: road_state = states[(current + 5 - 1) % 5];
   335  007D94  0E04               	movlw	4
   336  007D96  2415               	addwf	main@current,w,c
   337  007D98  6E01               	movwf	___awmod@dividend,c
   338  007D9A  0E00               	movlw	0
   339  007D9C  2016               	addwfc	main@current+1,w,c
   340  007D9E  6E02               	movwf	___awmod@dividend+1,c
   341  007DA0  0E00               	movlw	0
   342  007DA2  6E04               	movwf	___awmod@divisor+1,c
   343  007DA4  0E05               	movlw	5
   344  007DA6  6E03               	movwf	___awmod@divisor,c
   345  007DA8  EC47  F03E         	call	___awmod	;wreg free
   346  007DAC  0E10               	movlw	low main@states
   347  007DAE  2401               	addwf	?___awmod,w,c
   348  007DB0  6ED9               	movwf	fsr2l,c
   349  007DB2  0E00               	movlw	high main@states
   350  007DB4  2002               	addwfc	?___awmod+1,w,c
   351  007DB6  6EDA               	movwf	fsr2h,c
   352  007DB8  50DF               	movf	indf2,w,c
   353  007DBA  6E17               	movwf	main@road_state,c
   354  007DBC                     l83:
   355                           
   356                           ;main.c: 200: }
   357                           ;main.c: 202: current = (current + 1) % 5;
   358  007DBC  0E01               	movlw	1
   359  007DBE  2415               	addwf	main@current,w,c
   360  007DC0  6E01               	movwf	___awmod@dividend,c
   361  007DC2  0E00               	movlw	0
   362  007DC4  2016               	addwfc	main@current+1,w,c
   363  007DC6  6E02               	movwf	___awmod@dividend+1,c
   364  007DC8  0E00               	movlw	0
   365  007DCA  6E04               	movwf	___awmod@divisor+1,c
   366  007DCC  0E05               	movlw	5
   367  007DCE  6E03               	movwf	___awmod@divisor,c
   368  007DD0  EC47  F03E         	call	___awmod	;wreg free
   369  007DD4  C001  F015         	movff	?___awmod,main@current
   370  007DD8  C002  F016         	movff	?___awmod+1,main@current+1
   371                           
   372                           ;main.c: 203: states[current] = road_state;
   373  007DDC  0E10               	movlw	low main@states
   374  007DDE  2415               	addwf	main@current,w,c
   375  007DE0  6ED9               	movwf	fsr2l,c
   376  007DE2  0E00               	movlw	high main@states
   377  007DE4  2016               	addwfc	main@current+1,w,c
   378  007DE6  6EDA               	movwf	fsr2h,c
   379  007DE8  C017  FFDF         	movff	main@road_state,indf2
   380                           
   381                           ;main.c: 206: switch (road_state) {
   382  007DEC  D01F               	goto	l84
   383  007DEE                     
   384                           ;main.c: 208: if (isAllStraight(states))
   385  007DEE  0E10               	movlw	low main@states
   386  007DF0  6E01               	movwf	isAllStraight@states,c
   387  007DF2  0E00               	movlw	high main@states
   388  007DF4  6E02               	movwf	isAllStraight@states+1,c
   389  007DF6  EC1B  F03E         	call	_isAllStraight	;wreg free
   390  007DFA  5001               	movf	?_isAllStraight,w,c
   391  007DFC  1002               	iorwf	?_isAllStraight+1,w,c
   392  007DFE  B4D8               	btfsc	status,2,c
   393  007E00  D003               	goto	l86
   394                           
   395                           ;main.c: 209: accelerate();
   396  007E02  EC7C  F03D         	call	_accelerate	;wreg free
   397  007E06  D791               	goto	l82
   398  007E08                     l86:
   399                           
   400                           ;main.c: 210: else
   401                           ;main.c: 211: straight();
   402  007E08  EC95  F03D         	call	_straight	;wreg free
   403                           
   404                           ;main.c: 212: break;
   405  007E0C  D78E               	goto	l82
   406  007E0E                     
   407                           ;main.c: 214: turnRightSmall();
   408  007E0E  ECC7  F03D         	call	_turnRightSmall	;wreg free
   409                           
   410                           ;main.c: 215: break;
   411  007E12  D78B               	goto	l82
   412  007E14                     
   413                           ;main.c: 217: turnLeftSmall();
   414  007E14  ECAE  F03D         	call	_turnLeftSmall	;wreg free
   415                           
   416                           ;main.c: 218: break;
   417  007E18  D788               	goto	l82
   418  007E1A                     
   419                           ;main.c: 220: turnRight();
   420  007E1A  EC6B  F03D         	call	_turnRight	;wreg free
   421                           
   422                           ;main.c: 221: break;
   423  007E1E  D785               	goto	l82
   424  007E20                     
   425                           ;main.c: 223: turnLeft();
   426  007E20  EC5A  F03D         	call	_turnLeft	;wreg free
   427                           
   428                           ;main.c: 224: break;
   429  007E24  D782               	goto	l82
   430  007E26                     
   431                           ;main.c: 226: straight();
   432  007E26  EC95  F03D         	call	_straight	;wreg free
   433                           
   434                           ;main.c: 228: }
   435                           
   436                           ;main.c: 227: break;
   437  007E2A  D77F               	goto	l82
   438  007E2C                     l84:
   439  007E2C  5017               	movf	main@road_state,w,c
   440                           
   441                           ; Switch size 1, requested type "space"
   442                           ; Number of cases is 6, Range of values is 0 to 6
   443                           ; switch strategies available:
   444                           ; Name         Instructions Cycles
   445                           ; simple_byte           19    10 (average)
   446                           ;	Chosen strategy is simple_byte
   447  007E2E  0A00               	xorlw	0	; case 0
   448  007E30  B4D8               	btfsc	status,2,c
   449  007E32  D7F9               	goto	l93
   450  007E34  0A02               	xorlw	2	; case 2
   451  007E36  B4D8               	btfsc	status,2,c
   452  007E38  D7DA               	goto	l85
   453  007E3A  0A01               	xorlw	1	; case 3
   454  007E3C  B4D8               	btfsc	status,2,c
   455  007E3E  D7EA               	goto	l90
   456  007E40  0A07               	xorlw	7	; case 4
   457  007E42  B4D8               	btfsc	status,2,c
   458  007E44  D7ED               	goto	l92
   459  007E46  0A01               	xorlw	1	; case 5
   460  007E48  B4D8               	btfsc	status,2,c
   461  007E4A  D7E1               	goto	l89
   462  007E4C  0A03               	xorlw	3	; case 6
   463  007E4E  B4D8               	btfsc	status,2,c
   464  007E50  D7E4               	goto	l91
   465  007E52  D76B               	goto	l82
   466  007E54                     __end_of_main:
   467                           	opt stack 0
   468                           tblptru	equ	0xFF8
   469                           indf2	equ	0xFDF
   470                           fsr2h	equ	0xFDA
   471                           fsr2l	equ	0xFD9
   472                           status	equ	0xFD8
   473                           
   474 ;; *************** function _turnRightSmall *****************
   475 ;; Defined at:
   476 ;;		line 124 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  2   61[None  ] int 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   490 ;;      Params:         0       0       0       0       0       0       0       0       0
   491 ;;      Locals:         0       0       0       0       0       0       0       0       0
   492 ;;      Temps:          0       0       0       0       0       0       0       0       0
   493 ;;      Totals:         0       0       0       0       0       0       0       0       0
   494 ;;Total ram usage:        0 bytes
   495 ;; Hardware stack levels used:    1
   496 ;; Hardware stack levels required when called:    1
   497 ;; This function calls:
   498 ;;		_wait00
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text1
   505  007B8E                     __ptext1:
   506                           	opt stack 0
   507  007B8E                     _turnRightSmall:
   508                           	opt stack 29
   509                           
   510                           ;main.c: 125: PORTC=0x03;
   511                           
   512                           ;incstack = 0
   513  007B8E  0E03               	movlw	3
   514  007B90  6E82               	movwf	3970,c	;volatile
   515                           
   516                           ;main.c: 126: wait00(10);
   517  007B92  0E00               	movlw	0
   518  007B94  6E02               	movwf	wait00@k+1,c
   519  007B96  0E0A               	movlw	10
   520  007B98  6E01               	movwf	wait00@k,c
   521  007B9A  ECFA  F03D         	call	_wait00	;wreg free
   522                           
   523                           ;main.c: 127: PORTC=0x01;
   524  007B9E  0E01               	movlw	1
   525  007BA0  6E82               	movwf	3970,c	;volatile
   526                           
   527                           ;main.c: 128: wait00(8);
   528  007BA2  0E00               	movlw	0
   529  007BA4  6E02               	movwf	wait00@k+1,c
   530  007BA6  0E08               	movlw	8
   531  007BA8  6E01               	movwf	wait00@k,c
   532  007BAA  ECFA  F03D         	call	_wait00	;wreg free
   533                           
   534                           ;main.c: 129: PORTC = 0x00;
   535  007BAE  0E00               	movlw	0
   536  007BB0  6E82               	movwf	3970,c	;volatile
   537                           
   538                           ;main.c: 130: wait00(30);
   539  007BB2  0E00               	movlw	0
   540  007BB4  6E02               	movwf	wait00@k+1,c
   541  007BB6  0E1E               	movlw	30
   542  007BB8  6E01               	movwf	wait00@k,c
   543  007BBA  ECFA  F03D         	call	_wait00	;wreg free
   544  007BBE  0012               	return		;funcret
   545  007BC0                     __end_of_turnRightSmall:
   546                           	opt stack 0
   547                           tblptru	equ	0xFF8
   548                           indf2	equ	0xFDF
   549                           fsr2h	equ	0xFDA
   550                           fsr2l	equ	0xFD9
   551                           status	equ	0xFD8
   552                           
   553 ;; *************** function _turnRight *****************
   554 ;; Defined at:
   555 ;;		line 107 in file "main.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;		None
   558 ;; Auto vars:     Size  Location     Type
   559 ;;		None
   560 ;; Return value:  Size  Location     Type
   561 ;;                  2   55[None  ] int 
   562 ;; Registers used:
   563 ;;		wreg, status,2, status,0, cstack
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         0       0       0       0       0       0       0       0       0
   570 ;;      Locals:         0       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         0       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        0 bytes
   574 ;; Hardware stack levels used:    1
   575 ;; Hardware stack levels required when called:    1
   576 ;; This function calls:
   577 ;;		_wait00
   578 ;; This function is called by:
   579 ;;		_main
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text2
   584  007AD6                     __ptext2:
   585                           	opt stack 0
   586  007AD6                     _turnRight:
   587                           	opt stack 29
   588                           
   589                           ;main.c: 108: PORTC=0x01;
   590                           
   591                           ;incstack = 0
   592  007AD6  0E01               	movlw	1
   593  007AD8  6E82               	movwf	3970,c	;volatile
   594                           
   595                           ;main.c: 109: wait00(42);
   596  007ADA  0E00               	movlw	0
   597  007ADC  6E02               	movwf	wait00@k+1,c
   598  007ADE  0E2A               	movlw	42
   599  007AE0  6E01               	movwf	wait00@k,c
   600  007AE2  ECFA  F03D         	call	_wait00	;wreg free
   601                           
   602                           ;main.c: 110: PORTC = 0x00;
   603  007AE6  0E00               	movlw	0
   604  007AE8  6E82               	movwf	3970,c	;volatile
   605                           
   606                           ;main.c: 111: wait00(40);
   607  007AEA  0E00               	movlw	0
   608  007AEC  6E02               	movwf	wait00@k+1,c
   609  007AEE  0E28               	movlw	40
   610  007AF0  6E01               	movwf	wait00@k,c
   611  007AF2  ECFA  F03D         	call	_wait00	;wreg free
   612  007AF6  0012               	return		;funcret
   613  007AF8                     __end_of_turnRight:
   614                           	opt stack 0
   615                           tblptru	equ	0xFF8
   616                           indf2	equ	0xFDF
   617                           fsr2h	equ	0xFDA
   618                           fsr2l	equ	0xFD9
   619                           status	equ	0xFD8
   620                           
   621 ;; *************** function _turnLeftSmall *****************
   622 ;; Defined at:
   623 ;;		line 115 in file "main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  2   58[None  ] int 
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   637 ;;      Params:         0       0       0       0       0       0       0       0       0
   638 ;;      Locals:         0       0       0       0       0       0       0       0       0
   639 ;;      Temps:          0       0       0       0       0       0       0       0       0
   640 ;;      Totals:         0       0       0       0       0       0       0       0       0
   641 ;;Total ram usage:        0 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    1
   644 ;; This function calls:
   645 ;;		_wait00
   646 ;; This function is called by:
   647 ;;		_main
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           	psect	text3
   652  007B5C                     __ptext3:
   653                           	opt stack 0
   654  007B5C                     _turnLeftSmall:
   655                           	opt stack 29
   656                           
   657                           ;main.c: 116: PORTC=0x03;
   658                           
   659                           ;incstack = 0
   660  007B5C  0E03               	movlw	3
   661  007B5E  6E82               	movwf	3970,c	;volatile
   662                           
   663                           ;main.c: 117: wait00(10);
   664  007B60  0E00               	movlw	0
   665  007B62  6E02               	movwf	wait00@k+1,c
   666  007B64  0E0A               	movlw	10
   667  007B66  6E01               	movwf	wait00@k,c
   668  007B68  ECFA  F03D         	call	_wait00	;wreg free
   669                           
   670                           ;main.c: 118: PORTC=0x02;
   671  007B6C  0E02               	movlw	2
   672  007B6E  6E82               	movwf	3970,c	;volatile
   673                           
   674                           ;main.c: 119: wait00(10);
   675  007B70  0E00               	movlw	0
   676  007B72  6E02               	movwf	wait00@k+1,c
   677  007B74  0E0A               	movlw	10
   678  007B76  6E01               	movwf	wait00@k,c
   679  007B78  ECFA  F03D         	call	_wait00	;wreg free
   680                           
   681                           ;main.c: 120: PORTC = 0x00;
   682  007B7C  0E00               	movlw	0
   683  007B7E  6E82               	movwf	3970,c	;volatile
   684                           
   685                           ;main.c: 121: wait00(30);
   686  007B80  0E00               	movlw	0
   687  007B82  6E02               	movwf	wait00@k+1,c
   688  007B84  0E1E               	movlw	30
   689  007B86  6E01               	movwf	wait00@k,c
   690  007B88  ECFA  F03D         	call	_wait00	;wreg free
   691  007B8C  0012               	return		;funcret
   692  007B8E                     __end_of_turnLeftSmall:
   693                           	opt stack 0
   694                           tblptru	equ	0xFF8
   695                           indf2	equ	0xFDF
   696                           fsr2h	equ	0xFDA
   697                           fsr2l	equ	0xFD9
   698                           status	equ	0xFD8
   699                           
   700 ;; *************** function _turnLeft *****************
   701 ;; Defined at:
   702 ;;		line 100 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  2   52[None  ] int 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   716 ;;      Params:         0       0       0       0       0       0       0       0       0
   717 ;;      Locals:         0       0       0       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0
   719 ;;      Totals:         0       0       0       0       0       0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    1
   723 ;; This function calls:
   724 ;;		_wait00
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text4
   731  007AB4                     __ptext4:
   732                           	opt stack 0
   733  007AB4                     _turnLeft:
   734                           	opt stack 29
   735                           
   736                           ;main.c: 101: PORTC=0x02;
   737                           
   738                           ;incstack = 0
   739  007AB4  0E02               	movlw	2
   740  007AB6  6E82               	movwf	3970,c	;volatile
   741                           
   742                           ;main.c: 102: wait00(50);
   743  007AB8  0E00               	movlw	0
   744  007ABA  6E02               	movwf	wait00@k+1,c
   745  007ABC  0E32               	movlw	50
   746  007ABE  6E01               	movwf	wait00@k,c
   747  007AC0  ECFA  F03D         	call	_wait00	;wreg free
   748                           
   749                           ;main.c: 103: PORTC = 0x00;
   750  007AC4  0E00               	movlw	0
   751  007AC6  6E82               	movwf	3970,c	;volatile
   752                           
   753                           ;main.c: 104: wait00(40);
   754  007AC8  0E00               	movlw	0
   755  007ACA  6E02               	movwf	wait00@k+1,c
   756  007ACC  0E28               	movlw	40
   757  007ACE  6E01               	movwf	wait00@k,c
   758  007AD0  ECFA  F03D         	call	_wait00	;wreg free
   759  007AD4  0012               	return		;funcret
   760  007AD6                     __end_of_turnLeft:
   761                           	opt stack 0
   762                           tblptru	equ	0xFF8
   763                           indf2	equ	0xFDF
   764                           fsr2h	equ	0xFDA
   765                           fsr2l	equ	0xFD9
   766                           status	equ	0xFD8
   767                           
   768 ;; *************** function _straight *****************
   769 ;; Defined at:
   770 ;;		line 134 in file "main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  2   64[None  ] int 
   777 ;; Registers used:
   778 ;;		wreg, status,2, status,0, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   784 ;;      Params:         0       0       0       0       0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    1
   791 ;; This function calls:
   792 ;;		_wait00
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text5
   799  007B2A                     __ptext5:
   800                           	opt stack 0
   801  007B2A                     _straight:
   802                           	opt stack 29
   803                           
   804                           ;main.c: 135: PORTC=0x03;
   805                           
   806                           ;incstack = 0
   807  007B2A  0E03               	movlw	3
   808  007B2C  6E82               	movwf	3970,c	;volatile
   809                           
   810                           ;main.c: 136: wait00(48);
   811  007B2E  0E00               	movlw	0
   812  007B30  6E02               	movwf	wait00@k+1,c
   813  007B32  0E30               	movlw	48
   814  007B34  6E01               	movwf	wait00@k,c
   815  007B36  ECFA  F03D         	call	_wait00	;wreg free
   816                           
   817                           ;main.c: 137: PORTC=0x02;
   818  007B3A  0E02               	movlw	2
   819  007B3C  6E82               	movwf	3970,c	;volatile
   820                           
   821                           ;main.c: 138: wait00(4);
   822  007B3E  0E00               	movlw	0
   823  007B40  6E02               	movwf	wait00@k+1,c
   824  007B42  0E04               	movlw	4
   825  007B44  6E01               	movwf	wait00@k,c
   826  007B46  ECFA  F03D         	call	_wait00	;wreg free
   827                           
   828                           ;main.c: 139: PORTC=0x00;
   829  007B4A  0E00               	movlw	0
   830  007B4C  6E82               	movwf	3970,c	;volatile
   831                           
   832                           ;main.c: 140: wait00(30);
   833  007B4E  0E00               	movlw	0
   834  007B50  6E02               	movwf	wait00@k+1,c
   835  007B52  0E1E               	movlw	30
   836  007B54  6E01               	movwf	wait00@k,c
   837  007B56  ECFA  F03D         	call	_wait00	;wreg free
   838  007B5A  0012               	return		;funcret
   839  007B5C                     __end_of_straight:
   840                           	opt stack 0
   841                           tblptru	equ	0xFF8
   842                           indf2	equ	0xFDF
   843                           fsr2h	equ	0xFDA
   844                           fsr2l	equ	0xFD9
   845                           status	equ	0xFD8
   846                           
   847 ;; *************** function _led_sens *****************
   848 ;; Defined at:
   849 ;;		line 23 in file "main.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  2   28[None  ] int 
   856 ;; Registers used:
   857 ;;		None
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   863 ;;      Params:         0       0       0       0       0       0       0       0       0
   864 ;;      Locals:         0       0       0       0       0       0       0       0       0
   865 ;;      Temps:          0       0       0       0       0       0       0       0       0
   866 ;;      Totals:         0       0       0       0       0       0       0       0       0
   867 ;;Total ram usage:        0 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text6
   877  007BC0                     __ptext6:
   878                           	opt stack 0
   879  007BC0                     _led_sens:
   880                           	opt stack 30
   881                           
   882                           ;main.c: 25: PORTAbits.RA0 = PORTBbits.RB0;
   883                           
   884                           ;incstack = 0
   885  007BC0  A081               	btfss	3969,0,c	;volatile
   886  007BC2  D002               	bra	u45
   887  007BC4  8080               	bsf	3968,0,c	;volatile
   888  007BC6  D001               	bra	u47
   889  007BC8                     u45:
   890  007BC8  9080               	bcf	3968,0,c	;volatile
   891  007BCA                     u47:
   892                           
   893                           ;main.c: 26: PORTAbits.RA1 = PORTBbits.RB1;
   894  007BCA  A281               	btfss	3969,1,c	;volatile
   895  007BCC  D002               	bra	u55
   896  007BCE  8280               	bsf	3968,1,c	;volatile
   897  007BD0  D001               	bra	u57
   898  007BD2                     u55:
   899  007BD2  9280               	bcf	3968,1,c	;volatile
   900  007BD4                     u57:
   901                           
   902                           ;main.c: 27: PORTAbits.RA2 = PORTBbits.RB2;
   903  007BD4  A481               	btfss	3969,2,c	;volatile
   904  007BD6  D002               	bra	u65
   905  007BD8  8480               	bsf	3968,2,c	;volatile
   906  007BDA  D001               	bra	u67
   907  007BDC                     u65:
   908  007BDC  9480               	bcf	3968,2,c	;volatile
   909  007BDE                     u67:
   910                           
   911                           ;main.c: 28: PORTAbits.RA3 = PORTBbits.RB3;
   912  007BDE  A681               	btfss	3969,3,c	;volatile
   913  007BE0  D002               	bra	u75
   914  007BE2  8680               	bsf	3968,3,c	;volatile
   915  007BE4  D001               	bra	u77
   916  007BE6                     u75:
   917  007BE6  9680               	bcf	3968,3,c	;volatile
   918  007BE8                     u77:
   919                           
   920                           ;main.c: 29: PORTAbits.RA4 = PORTBbits.RB4;
   921  007BE8  A881               	btfss	3969,4,c	;volatile
   922  007BEA  D002               	bra	u85
   923  007BEC  8880               	bsf	3968,4,c	;volatile
   924  007BEE  D001               	bra	u87
   925  007BF0                     u85:
   926  007BF0  9880               	bcf	3968,4,c	;volatile
   927  007BF2                     u87:
   928  007BF2  0012               	return		;funcret
   929  007BF4                     __end_of_led_sens:
   930                           	opt stack 0
   931                           tblptru	equ	0xFF8
   932                           indf2	equ	0xFDF
   933                           fsr2h	equ	0xFDA
   934                           fsr2l	equ	0xFD9
   935                           status	equ	0xFD8
   936                           
   937 ;; *************** function _isAllStraight *****************
   938 ;; Defined at:
   939 ;;		line 152 in file "main.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  states          2    0[COMRAM] PTR enum E3329
   942 ;;		 -> main@states(5), 
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  i               2    3[COMRAM] int 
   945 ;; Return value:  Size  Location     Type
   946 ;;                  2    0[COMRAM] int 
   947 ;; Registers used:
   948 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   954 ;;      Params:         2       0       0       0       0       0       0       0       0
   955 ;;      Locals:         2       0       0       0       0       0       0       0       0
   956 ;;      Temps:          1       0       0       0       0       0       0       0       0
   957 ;;      Totals:         5       0       0       0       0       0       0       0       0
   958 ;;Total ram usage:        5 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; This function calls:
   961 ;;		Nothing
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text7
   968  007C36                     __ptext7:
   969                           	opt stack 0
   970  007C36                     _isAllStraight:
   971                           	opt stack 30
   972                           
   973                           ;main.c: 153: for (int i = 0; i < 5; i++) {
   974                           
   975                           ;incstack = 0
   976  007C36  0E00               	movlw	0
   977  007C38  6E05               	movwf	isAllStraight@i+1,c
   978  007C3A  0E00               	movlw	0
   979  007C3C  6E04               	movwf	isAllStraight@i,c
   980  007C3E                     l1240:
   981  007C3E  BE05               	btfsc	isAllStraight@i+1,7,c
   982  007C40  D006               	goto	l71
   983  007C42  5005               	movf	isAllStraight@i+1,w,c
   984  007C44  E11F               	bnz	l1256
   985  007C46  0E05               	movlw	5
   986  007C48  5C04               	subwf	isAllStraight@i,w,c
   987  007C4A  B0D8               	btfsc	status,0,c
   988  007C4C  D01B               	goto	u1290
   989  007C4E                     l71:
   990                           
   991                           ;main.c: 154: if (states[i] != on_track && states[i] != straight_line) {
   992  007C4E  5004               	movf	isAllStraight@i,w,c
   993  007C50  2401               	addwf	isAllStraight@states,w,c
   994  007C52  6ED9               	movwf	fsr2l,c
   995  007C54  5005               	movf	isAllStraight@i+1,w,c
   996  007C56  2002               	addwfc	isAllStraight@states+1,w,c
   997  007C58  6EDA               	movwf	fsr2h,c
   998  007C5A  50DF               	movf	indf2,w,c
   999  007C5C  B4D8               	btfsc	status,2,c
  1000  007C5E  D00F               	goto	l73
  1001  007C60  5004               	movf	isAllStraight@i,w,c
  1002  007C62  2401               	addwf	isAllStraight@states,w,c
  1003  007C64  6ED9               	movwf	fsr2l,c
  1004  007C66  5005               	movf	isAllStraight@i+1,w,c
  1005  007C68  2002               	addwfc	isAllStraight@states+1,w,c
  1006  007C6A  6EDA               	movwf	fsr2h,c
  1007  007C6C  0E02               	movlw	2
  1008  007C6E  18DE               	xorwf	postinc2,w,c
  1009  007C70  B4D8               	btfsc	status,2,c
  1010  007C72  D005               	goto	l73
  1011                           
  1012                           ;main.c: 155: return 0;
  1013  007C74  0E00               	movlw	0
  1014  007C76  6E02               	movwf	?_isAllStraight+1,c
  1015  007C78  0E00               	movlw	0
  1016  007C7A  6E01               	movwf	?_isAllStraight,c
  1017  007C7C  0012               	return	
  1018  007C7E                     l73:
  1019  007C7E  4A04               	infsnz	isAllStraight@i,f,c
  1020  007C80  2A05               	incf	isAllStraight@i+1,f,c
  1021  007C82  D7DD               	goto	l1240
  1022  007C84                     u1290:
  1023  007C84                     l1256:
  1024                           
  1025                           ;main.c: 156: }
  1026                           ;main.c: 157: }
  1027                           ;main.c: 159: return 1;
  1028  007C84  0E00               	movlw	0
  1029  007C86  6E02               	movwf	?_isAllStraight+1,c
  1030  007C88  0E01               	movlw	1
  1031  007C8A  6E01               	movwf	?_isAllStraight,c
  1032  007C8C  0012               	return	
  1033  007C8E                     __end_of_isAllStraight:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           indf2	equ	0xFDF
  1037                           postinc2	equ	0xFDE
  1038                           fsr2h	equ	0xFDA
  1039                           fsr2l	equ	0xFD9
  1040                           status	equ	0xFD8
  1041                           
  1042 ;; *************** function _getRoadState *****************
  1043 ;; Defined at:
  1044 ;;		line 43 in file "main.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  a               2    0[COMRAM] short 
  1047 ;;  b               2    2[COMRAM] short 
  1048 ;;  c               2    4[COMRAM] short 
  1049 ;;  d               2    6[COMRAM] short 
  1050 ;;  e               2    8[COMRAM] short 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      enum E3329
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, status,0
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1062 ;;      Params:        10       0       0       0       0       0       0       0       0
  1063 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1065 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1066 ;;Total ram usage:       10 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; This function calls:
  1069 ;;		Nothing
  1070 ;; This function is called by:
  1071 ;;		_main
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075                           	psect	text8
  1076  007E54                     __ptext8:
  1077                           	opt stack 0
  1078  007E54                     _getRoadState:
  1079                           	opt stack 30
  1080                           
  1081                           ;main.c: 44: if ( (a == 1 && b == 1 && c == 1
  1082                           ;main.c: 45: && d == 1 && e == 1)
  1083                           ;main.c: 46: || (a == 0 && b == 0 && c == 0
  1084                           ;main.c: 47: && d == 0 && e == 0)) {
  1085                           
  1086                           ;incstack = 0
  1087  007E54  0401               	decf	getRoadState@a,w,c
  1088  007E56  1002               	iorwf	getRoadState@a+1,w,c
  1089  007E58  A4D8               	btfss	status,2,c
  1090  007E5A  D010               	goto	u820
  1091  007E5C  0403               	decf	getRoadState@b,w,c
  1092  007E5E  1004               	iorwf	getRoadState@b+1,w,c
  1093  007E60  A4D8               	btfss	status,2,c
  1094  007E62  D00C               	goto	u820
  1095  007E64  0405               	decf	getRoadState@c,w,c
  1096  007E66  1006               	iorwf	getRoadState@c+1,w,c
  1097  007E68  A4D8               	btfss	status,2,c
  1098  007E6A  D008               	goto	u820
  1099  007E6C  0407               	decf	getRoadState@d,w,c
  1100  007E6E  1008               	iorwf	getRoadState@d+1,w,c
  1101  007E70  A4D8               	btfss	status,2,c
  1102  007E72  D004               	goto	u820
  1103  007E74  0409               	decf	getRoadState@e,w,c
  1104  007E76  100A               	iorwf	getRoadState@e+1,w,c
  1105  007E78  B4D8               	btfsc	status,2,c
  1106  007E7A  D014               	goto	u870
  1107  007E7C                     u820:
  1108  007E7C  5001               	movf	getRoadState@a,w,c
  1109  007E7E  1002               	iorwf	getRoadState@a+1,w,c
  1110  007E80  A4D8               	btfss	status,2,c
  1111  007E82  D012               	goto	l32
  1112  007E84  5003               	movf	getRoadState@b,w,c
  1113  007E86  1004               	iorwf	getRoadState@b+1,w,c
  1114  007E88  A4D8               	btfss	status,2,c
  1115  007E8A  D00E               	goto	l32
  1116  007E8C  5005               	movf	getRoadState@c,w,c
  1117  007E8E  1006               	iorwf	getRoadState@c+1,w,c
  1118  007E90  A4D8               	btfss	status,2,c
  1119  007E92  D00A               	goto	l32
  1120  007E94  5007               	movf	getRoadState@d,w,c
  1121  007E96  1008               	iorwf	getRoadState@d+1,w,c
  1122  007E98  A4D8               	btfss	status,2,c
  1123  007E9A  D006               	goto	l32
  1124  007E9C  5009               	movf	getRoadState@e,w,c
  1125  007E9E  100A               	iorwf	getRoadState@e+1,w,c
  1126  007EA0  A4D8               	btfss	status,2,c
  1127  007EA2  D002               	goto	l32
  1128  007EA4                     u870:
  1129                           
  1130                           ;main.c: 48: return off_track;
  1131  007EA4  0E01               	movlw	1
  1132  007EA6  0012               	return	
  1133  007EA8                     l32:
  1134                           
  1135                           ;main.c: 49: }
  1136                           ;main.c: 51: if ( (c == 0
  1137                           ;main.c: 52: && a == 1 && b == 1
  1138                           ;main.c: 53: && d == 1 && e == 1)
  1139                           ;main.c: 54: || (c == 1
  1140                           ;main.c: 55: && a == 0 && b == 0
  1141                           ;main.c: 56: && d == 0 && e == 0)) {
  1142  007EA8  5005               	movf	getRoadState@c,w,c
  1143  007EAA  1006               	iorwf	getRoadState@c+1,w,c
  1144  007EAC  A4D8               	btfss	status,2,c
  1145  007EAE  D010               	goto	u920
  1146  007EB0  0401               	decf	getRoadState@a,w,c
  1147  007EB2  1002               	iorwf	getRoadState@a+1,w,c
  1148  007EB4  A4D8               	btfss	status,2,c
  1149  007EB6  D00C               	goto	u920
  1150  007EB8  0403               	decf	getRoadState@b,w,c
  1151  007EBA  1004               	iorwf	getRoadState@b+1,w,c
  1152  007EBC  A4D8               	btfss	status,2,c
  1153  007EBE  D008               	goto	u920
  1154  007EC0  0407               	decf	getRoadState@d,w,c
  1155  007EC2  1008               	iorwf	getRoadState@d+1,w,c
  1156  007EC4  A4D8               	btfss	status,2,c
  1157  007EC6  D004               	goto	u920
  1158  007EC8  0409               	decf	getRoadState@e,w,c
  1159  007ECA  100A               	iorwf	getRoadState@e+1,w,c
  1160  007ECC  B4D8               	btfsc	status,2,c
  1161  007ECE  D014               	goto	u970
  1162  007ED0                     u920:
  1163  007ED0  0405               	decf	getRoadState@c,w,c
  1164  007ED2  1006               	iorwf	getRoadState@c+1,w,c
  1165  007ED4  A4D8               	btfss	status,2,c
  1166  007ED6  D012               	goto	l38
  1167  007ED8  5001               	movf	getRoadState@a,w,c
  1168  007EDA  1002               	iorwf	getRoadState@a+1,w,c
  1169  007EDC  A4D8               	btfss	status,2,c
  1170  007EDE  D00E               	goto	l38
  1171  007EE0  5003               	movf	getRoadState@b,w,c
  1172  007EE2  1004               	iorwf	getRoadState@b+1,w,c
  1173  007EE4  A4D8               	btfss	status,2,c
  1174  007EE6  D00A               	goto	l38
  1175  007EE8  5007               	movf	getRoadState@d,w,c
  1176  007EEA  1008               	iorwf	getRoadState@d+1,w,c
  1177  007EEC  A4D8               	btfss	status,2,c
  1178  007EEE  D006               	goto	l38
  1179  007EF0  5009               	movf	getRoadState@e,w,c
  1180  007EF2  100A               	iorwf	getRoadState@e+1,w,c
  1181  007EF4  A4D8               	btfss	status,2,c
  1182  007EF6  D002               	goto	l38
  1183  007EF8                     u970:
  1184                           
  1185                           ;main.c: 57: return straight_line;
  1186  007EF8  0E02               	movlw	2
  1187  007EFA  0012               	return	
  1188  007EFC                     l38:
  1189                           
  1190                           ;main.c: 58: }
  1191                           ;main.c: 61: if (a == 1 && b == 0
  1192                           ;main.c: 62: && d == 1 && e == 1) {
  1193  007EFC  0401               	decf	getRoadState@a,w,c
  1194  007EFE  1002               	iorwf	getRoadState@a+1,w,c
  1195  007F00  A4D8               	btfss	status,2,c
  1196  007F02  D00E               	goto	l43
  1197  007F04  5003               	movf	getRoadState@b,w,c
  1198  007F06  1004               	iorwf	getRoadState@b+1,w,c
  1199  007F08  A4D8               	btfss	status,2,c
  1200  007F0A  D00A               	goto	l43
  1201  007F0C  0407               	decf	getRoadState@d,w,c
  1202  007F0E  1008               	iorwf	getRoadState@d+1,w,c
  1203  007F10  A4D8               	btfss	status,2,c
  1204  007F12  D006               	goto	l43
  1205  007F14  0409               	decf	getRoadState@e,w,c
  1206  007F16  100A               	iorwf	getRoadState@e+1,w,c
  1207  007F18  A4D8               	btfss	status,2,c
  1208  007F1A  D002               	goto	l43
  1209                           
  1210                           ;main.c: 63: return off_right_little;
  1211  007F1C  0E03               	movlw	3
  1212  007F1E  0012               	return	
  1213  007F20                     l43:
  1214                           
  1215                           ;main.c: 64: }
  1216                           ;main.c: 65: if (a == 1 && b == 1
  1217                           ;main.c: 66: && d == 0 && e == 1) {
  1218  007F20  0401               	decf	getRoadState@a,w,c
  1219  007F22  1002               	iorwf	getRoadState@a+1,w,c
  1220  007F24  A4D8               	btfss	status,2,c
  1221  007F26  D00E               	goto	l44
  1222  007F28  0403               	decf	getRoadState@b,w,c
  1223  007F2A  1004               	iorwf	getRoadState@b+1,w,c
  1224  007F2C  A4D8               	btfss	status,2,c
  1225  007F2E  D00A               	goto	l44
  1226  007F30  5007               	movf	getRoadState@d,w,c
  1227  007F32  1008               	iorwf	getRoadState@d+1,w,c
  1228  007F34  A4D8               	btfss	status,2,c
  1229  007F36  D006               	goto	l44
  1230  007F38  0409               	decf	getRoadState@e,w,c
  1231  007F3A  100A               	iorwf	getRoadState@e+1,w,c
  1232  007F3C  A4D8               	btfss	status,2,c
  1233  007F3E  D002               	goto	l44
  1234                           
  1235                           ;main.c: 67: return off_left_little;
  1236  007F40  0E05               	movlw	5
  1237  007F42  0012               	return	
  1238  007F44                     l44:
  1239                           
  1240                           ;main.c: 68: }
  1241                           ;main.c: 69: if (a == 0 && c == 1 && e == 1) {
  1242  007F44  5001               	movf	getRoadState@a,w,c
  1243  007F46  1002               	iorwf	getRoadState@a+1,w,c
  1244  007F48  A4D8               	btfss	status,2,c
  1245  007F4A  D00A               	goto	l45
  1246  007F4C  0405               	decf	getRoadState@c,w,c
  1247  007F4E  1006               	iorwf	getRoadState@c+1,w,c
  1248  007F50  A4D8               	btfss	status,2,c
  1249  007F52  D006               	goto	l45
  1250  007F54  0409               	decf	getRoadState@e,w,c
  1251  007F56  100A               	iorwf	getRoadState@e+1,w,c
  1252  007F58  A4D8               	btfss	status,2,c
  1253  007F5A  D002               	goto	l45
  1254                           
  1255                           ;main.c: 70: return off_right;
  1256  007F5C  0E04               	movlw	4
  1257  007F5E  0012               	return	
  1258  007F60                     l45:
  1259                           
  1260                           ;main.c: 71: }
  1261                           ;main.c: 72: if (a == 1 && c == 1 && e == 0) {
  1262  007F60  0401               	decf	getRoadState@a,w,c
  1263  007F62  1002               	iorwf	getRoadState@a+1,w,c
  1264  007F64  A4D8               	btfss	status,2,c
  1265  007F66  D00A               	goto	l46
  1266  007F68  0405               	decf	getRoadState@c,w,c
  1267  007F6A  1006               	iorwf	getRoadState@c+1,w,c
  1268  007F6C  A4D8               	btfss	status,2,c
  1269  007F6E  D006               	goto	l46
  1270  007F70  5009               	movf	getRoadState@e,w,c
  1271  007F72  100A               	iorwf	getRoadState@e+1,w,c
  1272  007F74  A4D8               	btfss	status,2,c
  1273  007F76  D002               	goto	l46
  1274                           
  1275                           ;main.c: 73: return off_left;
  1276  007F78  0E06               	movlw	6
  1277  007F7A  0012               	return	
  1278  007F7C                     l46:
  1279                           
  1280                           ;main.c: 74: }
  1281                           ;main.c: 77: if (a == 0 && b == 1
  1282                           ;main.c: 78: && d == 0 && e == 0) {
  1283  007F7C  5001               	movf	getRoadState@a,w,c
  1284  007F7E  1002               	iorwf	getRoadState@a+1,w,c
  1285  007F80  A4D8               	btfss	status,2,c
  1286  007F82  D00E               	goto	l47
  1287  007F84  0403               	decf	getRoadState@b,w,c
  1288  007F86  1004               	iorwf	getRoadState@b+1,w,c
  1289  007F88  A4D8               	btfss	status,2,c
  1290  007F8A  D00A               	goto	l47
  1291  007F8C  5007               	movf	getRoadState@d,w,c
  1292  007F8E  1008               	iorwf	getRoadState@d+1,w,c
  1293  007F90  A4D8               	btfss	status,2,c
  1294  007F92  D006               	goto	l47
  1295  007F94  5009               	movf	getRoadState@e,w,c
  1296  007F96  100A               	iorwf	getRoadState@e+1,w,c
  1297  007F98  A4D8               	btfss	status,2,c
  1298  007F9A  D002               	goto	l47
  1299                           
  1300                           ;main.c: 79: return off_right_little;
  1301  007F9C  0E03               	movlw	3
  1302  007F9E  0012               	return	
  1303  007FA0                     l47:
  1304                           
  1305                           ;main.c: 80: }
  1306                           ;main.c: 81: if (a == 0 && b == 0
  1307                           ;main.c: 82: && d == 1 && e == 0) {
  1308  007FA0  5001               	movf	getRoadState@a,w,c
  1309  007FA2  1002               	iorwf	getRoadState@a+1,w,c
  1310  007FA4  A4D8               	btfss	status,2,c
  1311  007FA6  D00E               	goto	l48
  1312  007FA8  5003               	movf	getRoadState@b,w,c
  1313  007FAA  1004               	iorwf	getRoadState@b+1,w,c
  1314  007FAC  A4D8               	btfss	status,2,c
  1315  007FAE  D00A               	goto	l48
  1316  007FB0  0407               	decf	getRoadState@d,w,c
  1317  007FB2  1008               	iorwf	getRoadState@d+1,w,c
  1318  007FB4  A4D8               	btfss	status,2,c
  1319  007FB6  D006               	goto	l48
  1320  007FB8  5009               	movf	getRoadState@e,w,c
  1321  007FBA  100A               	iorwf	getRoadState@e+1,w,c
  1322  007FBC  A4D8               	btfss	status,2,c
  1323  007FBE  D002               	goto	l48
  1324                           
  1325                           ;main.c: 83: return off_left_little;
  1326  007FC0  0E05               	movlw	5
  1327  007FC2  0012               	return	
  1328  007FC4                     l48:
  1329                           
  1330                           ;main.c: 84: }
  1331                           ;main.c: 85: if (a == 1 && c == 0 && e == 0) {
  1332  007FC4  0401               	decf	getRoadState@a,w,c
  1333  007FC6  1002               	iorwf	getRoadState@a+1,w,c
  1334  007FC8  A4D8               	btfss	status,2,c
  1335  007FCA  D00A               	goto	l49
  1336  007FCC  5005               	movf	getRoadState@c,w,c
  1337  007FCE  1006               	iorwf	getRoadState@c+1,w,c
  1338  007FD0  A4D8               	btfss	status,2,c
  1339  007FD2  D006               	goto	l49
  1340  007FD4  5009               	movf	getRoadState@e,w,c
  1341  007FD6  100A               	iorwf	getRoadState@e+1,w,c
  1342  007FD8  A4D8               	btfss	status,2,c
  1343  007FDA  D002               	goto	l49
  1344                           
  1345                           ;main.c: 86: return off_right;
  1346  007FDC  0E04               	movlw	4
  1347  007FDE  0012               	return	
  1348  007FE0                     l49:
  1349                           
  1350                           ;main.c: 87: }
  1351                           ;main.c: 88: if (a == 0 && c == 0 && e == 1) {
  1352  007FE0  5001               	movf	getRoadState@a,w,c
  1353  007FE2  1002               	iorwf	getRoadState@a+1,w,c
  1354  007FE4  A4D8               	btfss	status,2,c
  1355  007FE6  D00A               	goto	l50
  1356  007FE8  5005               	movf	getRoadState@c,w,c
  1357  007FEA  1006               	iorwf	getRoadState@c+1,w,c
  1358  007FEC  A4D8               	btfss	status,2,c
  1359  007FEE  D006               	goto	l50
  1360  007FF0  0409               	decf	getRoadState@e,w,c
  1361  007FF2  100A               	iorwf	getRoadState@e+1,w,c
  1362  007FF4  A4D8               	btfss	status,2,c
  1363  007FF6  D002               	goto	l50
  1364                           
  1365                           ;main.c: 89: return off_left;
  1366  007FF8  0E06               	movlw	6
  1367  007FFA  0012               	return	
  1368  007FFC                     l50:
  1369                           
  1370                           ;main.c: 90: }
  1371                           ;main.c: 92: return on_track;
  1372  007FFC  0E00               	movlw	0
  1373  007FFE  0012               	return	
  1374  008000                     __end_of_getRoadState:
  1375                           	opt stack 0
  1376                           tblptru	equ	0xFF8
  1377                           indf2	equ	0xFDF
  1378                           postinc2	equ	0xFDE
  1379                           fsr2h	equ	0xFDA
  1380                           fsr2l	equ	0xFD9
  1381                           status	equ	0xFD8
  1382                           
  1383 ;; *************** function _accelerate *****************
  1384 ;; Defined at:
  1385 ;;		line 143 in file "main.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  2   67[None  ] int 
  1392 ;; Registers used:
  1393 ;;		wreg, status,2, status,0, cstack
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1399 ;;      Params:         0       0       0       0       0       0       0       0       0
  1400 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1401 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1402 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1403 ;;Total ram usage:        0 bytes
  1404 ;; Hardware stack levels used:    1
  1405 ;; Hardware stack levels required when called:    1
  1406 ;; This function calls:
  1407 ;;		_wait00
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text9
  1414  007AF8                     __ptext9:
  1415                           	opt stack 0
  1416  007AF8                     _accelerate:
  1417                           	opt stack 29
  1418                           
  1419                           ;main.c: 144: PORTC=0x03;
  1420                           
  1421                           ;incstack = 0
  1422  007AF8  0E03               	movlw	3
  1423  007AFA  6E82               	movwf	3970,c	;volatile
  1424                           
  1425                           ;main.c: 145: wait00(48);
  1426  007AFC  0E00               	movlw	0
  1427  007AFE  6E02               	movwf	wait00@k+1,c
  1428  007B00  0E30               	movlw	48
  1429  007B02  6E01               	movwf	wait00@k,c
  1430  007B04  ECFA  F03D         	call	_wait00	;wreg free
  1431                           
  1432                           ;main.c: 146: PORTC=0x02;
  1433  007B08  0E02               	movlw	2
  1434  007B0A  6E82               	movwf	3970,c	;volatile
  1435                           
  1436                           ;main.c: 147: wait00(4);
  1437  007B0C  0E00               	movlw	0
  1438  007B0E  6E02               	movwf	wait00@k+1,c
  1439  007B10  0E04               	movlw	4
  1440  007B12  6E01               	movwf	wait00@k,c
  1441  007B14  ECFA  F03D         	call	_wait00	;wreg free
  1442                           
  1443                           ;main.c: 148: PORTC=0x00;
  1444  007B18  0E00               	movlw	0
  1445  007B1A  6E82               	movwf	3970,c	;volatile
  1446                           
  1447                           ;main.c: 149: wait00(15);
  1448  007B1C  0E00               	movlw	0
  1449  007B1E  6E02               	movwf	wait00@k+1,c
  1450  007B20  0E0F               	movlw	15
  1451  007B22  6E01               	movwf	wait00@k,c
  1452  007B24  ECFA  F03D         	call	_wait00	;wreg free
  1453  007B28  0012               	return		;funcret
  1454  007B2A                     __end_of_accelerate:
  1455                           	opt stack 0
  1456                           tblptru	equ	0xFF8
  1457                           indf2	equ	0xFDF
  1458                           postinc2	equ	0xFDE
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           
  1463 ;; *************** function _wait00 *****************
  1464 ;; Defined at:
  1465 ;;		line 12 in file "main.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  k               2    0[COMRAM] short 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  i               2    5[COMRAM] short 
  1470 ;;  j               2    3[COMRAM] short 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2    0[COMRAM] int 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1480 ;;      Params:         2       0       0       0       0       0       0       0       0
  1481 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1482 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1483 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1484 ;;Total ram usage:        7 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_turnLeft
  1490 ;;		_turnRight
  1491 ;;		_turnLeftSmall
  1492 ;;		_turnRightSmall
  1493 ;;		_straight
  1494 ;;		_accelerate
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text10
  1499  007BF4                     __ptext10:
  1500                           	opt stack 0
  1501  007BF4                     _wait00:
  1502                           	opt stack 29
  1503                           
  1504                           ;main.c: 15: short i;
  1505                           ;main.c: 16: short j;
  1506                           ;main.c: 17: for(j=0;j<k;j++){
  1507                           
  1508                           ;incstack = 0
  1509  007BF4  0E00               	movlw	0
  1510  007BF6  6E05               	movwf	wait00@j+1,c
  1511  007BF8  0E00               	movlw	0
  1512  007BFA  6E04               	movwf	wait00@j,c
  1513  007BFC  D011               	goto	l21
  1514  007BFE                     
  1515                           ;main.c: 18: for(i=0;i<300;i++){
  1516  007BFE  0E00               	movlw	0
  1517  007C00  6E07               	movwf	wait00@i+1,c
  1518  007C02  0E00               	movlw	0
  1519  007C04  6E06               	movwf	wait00@i,c
  1520  007C06                     l1034:
  1521  007C06  BE07               	btfsc	wait00@i+1,7,c
  1522  007C08  D006               	goto	l23
  1523  007C0A  0E2C               	movlw	44
  1524  007C0C  5C06               	subwf	wait00@i,w,c
  1525  007C0E  0E01               	movlw	1
  1526  007C10  5807               	subwfb	wait00@i+1,w,c
  1527  007C12  B0D8               	btfsc	status,0,c
  1528  007C14  D003               	goto	u760
  1529  007C16                     l23:
  1530  007C16  4A06               	infsnz	wait00@i,f,c
  1531  007C18  2A07               	incf	wait00@i+1,f,c
  1532  007C1A  D7F5               	goto	l1034
  1533  007C1C                     u760:
  1534  007C1C  4A04               	infsnz	wait00@j,f,c
  1535  007C1E  2A05               	incf	wait00@j+1,f,c
  1536  007C20                     l21:
  1537  007C20  5001               	movf	wait00@k,w,c
  1538  007C22  5C04               	subwf	wait00@j,w,c
  1539  007C24  5005               	movf	wait00@j+1,w,c
  1540  007C26  0A80               	xorlw	128
  1541  007C28  6E03               	movwf	??_wait00& (0+255),c
  1542  007C2A  5002               	movf	wait00@k+1,w,c
  1543  007C2C  0A80               	xorlw	128
  1544  007C2E  5803               	subwfb	??_wait00& (0+255),w,c
  1545  007C30  B0D8               	btfsc	status,0,c
  1546  007C32  0012               	return	
  1547  007C34  D7E4               	goto	l22
  1548  007C36                     __end_of_wait00:
  1549                           	opt stack 0
  1550                           tblptru	equ	0xFF8
  1551                           indf2	equ	0xFDF
  1552                           postinc2	equ	0xFDE
  1553                           fsr2h	equ	0xFDA
  1554                           fsr2l	equ	0xFD9
  1555                           status	equ	0xFD8
  1556                           
  1557 ;; *************** function ___awmod *****************
  1558 ;; Defined at:
  1559 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  dividend        2    0[COMRAM] int 
  1562 ;;  divisor         2    2[COMRAM] int 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  sign            1    5[COMRAM] unsigned char 
  1565 ;;  counter         1    4[COMRAM] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  2    0[COMRAM] int 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1575 ;;      Params:         4       0       0       0       0       0       0       0       0
  1576 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1578 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1579 ;;Total ram usage:        6 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text11
  1589  007C8E                     __ptext11:
  1590                           	opt stack 0
  1591  007C8E                     ___awmod:
  1592                           	opt stack 30
  1593                           
  1594                           ;incstack = 0
  1595  007C8E  0E00               	movlw	0
  1596  007C90  6E06               	movwf	___awmod@sign,c
  1597  007C92  AE02               	btfss	___awmod@dividend+1,7,c
  1598  007C94  D006               	goto	l277
  1599  007C96  6C01               	negf	___awmod@dividend,c
  1600  007C98  1E02               	comf	___awmod@dividend+1,f,c
  1601  007C9A  B0D8               	btfsc	status,0,c
  1602  007C9C  2A02               	incf	___awmod@dividend+1,f,c
  1603  007C9E  0E01               	movlw	1
  1604  007CA0  6E06               	movwf	___awmod@sign,c
  1605  007CA2                     l277:
  1606  007CA2  AE04               	btfss	___awmod@divisor+1,7,c
  1607  007CA4  D004               	goto	l278
  1608  007CA6  6C03               	negf	___awmod@divisor,c
  1609  007CA8  1E04               	comf	___awmod@divisor+1,f,c
  1610  007CAA  B0D8               	btfsc	status,0,c
  1611  007CAC  2A04               	incf	___awmod@divisor+1,f,c
  1612  007CAE                     l278:
  1613  007CAE  5003               	movf	___awmod@divisor,w,c
  1614  007CB0  1004               	iorwf	___awmod@divisor+1,w,c
  1615  007CB2  B4D8               	btfsc	status,2,c
  1616  007CB4  D018               	goto	l285
  1617  007CB6  0E01               	movlw	1
  1618  007CB8  6E05               	movwf	___awmod@counter,c
  1619  007CBA  D004               	goto	l280
  1620  007CBC  90D8               	bcf	status,0,c
  1621  007CBE  3603               	rlcf	___awmod@divisor,f,c
  1622  007CC0  3604               	rlcf	___awmod@divisor+1,f,c
  1623  007CC2  2A05               	incf	___awmod@counter,f,c
  1624  007CC4                     l280:
  1625  007CC4  AE04               	btfss	___awmod@divisor+1,7,c
  1626  007CC6  D7FA               	goto	l281
  1627  007CC8                     u1330:
  1628  007CC8  5003               	movf	___awmod@divisor,w,c
  1629  007CCA  5C01               	subwf	___awmod@dividend,w,c
  1630  007CCC  5004               	movf	___awmod@divisor+1,w,c
  1631  007CCE  5802               	subwfb	___awmod@dividend+1,w,c
  1632  007CD0  A0D8               	btfss	status,0,c
  1633  007CD2  D004               	goto	l284
  1634  007CD4  5003               	movf	___awmod@divisor,w,c
  1635  007CD6  5E01               	subwf	___awmod@dividend,f,c
  1636  007CD8  5004               	movf	___awmod@divisor+1,w,c
  1637  007CDA  5A02               	subwfb	___awmod@dividend+1,f,c
  1638  007CDC                     l284:
  1639  007CDC  90D8               	bcf	status,0,c
  1640  007CDE  3204               	rrcf	___awmod@divisor+1,f,c
  1641  007CE0  3203               	rrcf	___awmod@divisor,f,c
  1642  007CE2  2E05               	decfsz	___awmod@counter,f,c
  1643  007CE4  D7F1               	goto	u1330
  1644  007CE6                     l285:
  1645  007CE6  5006               	movf	___awmod@sign,w,c
  1646  007CE8  B4D8               	btfsc	status,2,c
  1647  007CEA  D004               	goto	l286
  1648  007CEC  6C01               	negf	___awmod@dividend,c
  1649  007CEE  1E02               	comf	___awmod@dividend+1,f,c
  1650  007CF0  B0D8               	btfsc	status,0,c
  1651  007CF2  2A02               	incf	___awmod@dividend+1,f,c
  1652  007CF4                     l286:
  1653  007CF4  C001  F001         	movff	___awmod@dividend,?___awmod
  1654  007CF8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1655  007CFC  0012               	return	
  1656  007CFE                     __end_of___awmod:
  1657                           	opt stack 0
  1658  0000                     tblptru	equ	0xFF8
  1659                           indf2	equ	0xFDF
  1660                           postinc2	equ	0xFDE
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           tblptru	equ	0xFF8
  1665                           indf2	equ	0xFDF
  1666                           postinc2	equ	0xFDE
  1667                           fsr2h	equ	0xFDA
  1668                           fsr2l	equ	0xFD9
  1669                           status	equ	0xFD8
  1670                           
  1671                           	psect	rparam
  1672  0000                     tblptru	equ	0xFF8
  1673                           indf2	equ	0xFDF
  1674                           postinc2	equ	0xFDE
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      23
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    isAllStraight@states	PTR enum E3329 size(2) Largest target is 5
		 -> main@states(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_getRoadState
    _turnRightSmall->_wait00
    _turnRight->_wait00
    _turnLeftSmall->_wait00
    _turnLeft->_wait00
    _straight->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   10302
                                             10 COMRAM    13    13      0
                            ___awmod
                         _accelerate
                       _getRoadState
                      _isAllStraight
                           _led_sens
                           _straight
                           _turnLeft
                      _turnLeftSmall
                          _turnRight
                     _turnRightSmall
 ---------------------------------------------------------------------------------
 (1) _turnRightSmall                                       0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeftSmall                                        0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _isAllStraight                                        5     3      2     210
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _getRoadState                                        10     0     10    1436
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1308
                             _wait00
 ---------------------------------------------------------------------------------
 (2) _wait00                                               7     5      2    1308
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _accelerate
     _wait00
   _getRoadState
   _isAllStraight
   _led_sens
   _straight
     _wait00
   _turnLeft
     _wait00
   _turnLeftSmall
     _wait00
   _turnRight
     _wait00
   _turnRightSmall
     _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     17      17       1       24.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 13:38:05 2018

                     l21 7C20                       l22 7BFE                       l23 7C16  
                     l32 7EA8                       l50 7FFC                       l43 7F20  
                     l44 7F44                       l45 7F60                       l46 7F7C  
                     l38 7EFC                       l47 7FA0                       l71 7C4E  
                     l48 7FC4                       l80 7D1A                       l49 7FE0  
                     l73 7C7E                       l90 7E14                       l82 7D2A  
                     l91 7E1A                       l83 7DBC                       l84 7E2C  
                     l92 7E20                       l93 7E26                       l85 7DEE  
                     l86 7E08                       l79 7D1E                       l89 7E0E  
                     u45 7BC8                       u55 7BD2                       u47 7BCA  
                     u65 7BDC                       u57 7BD4                       u75 7BE6  
                     u67 7BDE                       u85 7BF0                       u77 7BE8  
                     u87 7BF2                      l280 7CC4                      l281 7CBC  
                    l284 7CDC                      l285 7CE6                      l277 7CA2  
                    l286 7CF4                      l278 7CAE                      u820 7E7C  
                    u760 7C1C                      u920 7ED0                      u870 7EA4  
                    u970 7EF8             ___awmod@sign 0006         ??_turnRightSmall 0008  
                   l1034 7C06                     l1240 7C3E                     l1256 7C84  
                   u1400 7D6E                     u1330 7CC8                     u1410 7D80  
                   u1408 7D70                     u1290 7C84                     u1418 7D82  
                   u1370 7D38                     u1380 7D4A                     u1390 7D5C  
                   u1378 7D3A                     u1388 7D4C                     u1398 7D5E  
            main@current 0015                     _main 7CFE                     indf2 000FDF  
                   fsr2l 000FD9                     start 2000             ___param_bank 000000  
                  ?_main 0001          __end_of___awmod 7CFE                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    status 000FD8  
        __initialization 2008             __end_of_main 7E54                   ??_main 000B  
          __activetblptr 000002     __end_of_getRoadState 8000                   _ADCON1 000FC1  
 __size_of_turnLeftSmall 0032         __end_of_led_sens 7BF4                ??___awmod 0005  
                 _wait00 7BF4          ___awmod@divisor 0003          ___awmod@counter 0005  
                 tblptru 000FF8         __end_of_straight 7B5C         __end_of_turnLeft 7AD6  
             __accesstop 0060  __end_of__initialization 2008            ___rparam_used 000001  
         __pcstackCOMRAM 0001               _accelerate 7AF8    __end_of_isAllStraight 7C8E  
          _turnLeftSmall 7B5C                  ?_wait00 0001    __size_of_getRoadState 01AC  
         ?_turnLeftSmall 0001                ?_led_sens 0001       __size_of_turnRight 0022  
                __Hparam 0000                  __Lparam 0000             _getRoadState 7E54  
                ___awmod 7C8E              ?_accelerate 0001                ?_straight 0001  
                __pcinit 2008                  __ramtop 0800          __size_of_wait00 0042  
              ?_turnLeft 0001                  __ptext0 7CFE                  __ptext1 7B8E  
                __ptext2 7AD6                  __ptext3 7B5C                  __ptext4 7AB4  
                __ptext5 7B2A                  __ptext6 7BC0                  __ptext7 7C36  
                __ptext8 7E54                  __ptext9 7AF8         ___awmod@dividend 0001  
         main@road_state 0017      isAllStraight@states 0001     end_of_initialization 2008  
             ??_led_sens 0001            __Lmediumconst 0000                  wait00@i 0006  
                wait00@j 0004                  wait00@k 0001  __size_of_turnRightSmall 0032  
                postinc2 000FDE               ??_straight 0008               ??_turnLeft 0008  
        ??_turnLeftSmall 0008                _PORTAbits 000F80                _PORTBbits 000F81  
      __end_of_turnRight 7AF8      __size_of_accelerate 0032               main@states 0010  
         isAllStraight@i 0004           __end_of_wait00 7C36      start_initialization 2008  
               ??_wait00 0003   __size_of_isAllStraight 0058        __size_of_led_sens 0034  
         _turnRightSmall 7B8E                 ?___awmod 0001             ??_accelerate 0008  
      __size_of_straight 0032        __size_of_turnLeft 0022       __end_of_accelerate 7B2A  
 __end_of_turnRightSmall 7BC0            _isAllStraight 7C36                _turnRight 7AD6  
        ?_turnRightSmall 0001                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awmod 0070           ?_isAllStraight 0001    __end_of_turnLeftSmall 7B8E  
             ?_turnRight 0001                 __ptext10 7BF4                 __ptext11 7C8E  
               _led_sens 7BC0            __size_of_main 0156            getRoadState@a 0001  
          getRoadState@b 0003            getRoadState@c 0005            getRoadState@d 0007  
          getRoadState@e 0009                 _straight 7B2A                 _turnLeft 7AB4  
          ?_getRoadState 0001          ??_isAllStraight 0003              ??_turnRight 0008  
         ??_getRoadState 000B  
