

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 21 10:19:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2553
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.45
    21                           ; Generated 16/11/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2553 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _PORTB	set	3969
    55  0000                     _PORTA	set	3968
    56  0000                     _TRISC	set	3988
    57  0000                     _TRISB	set	3987
    58  0000                     _TRISA	set	3986
    59  0000                     _ADCON1	set	4033
    60  0000                     _PORTC	set	3970
    61  0000                     _PORTBbits	set	3969
    62  0000                     _PORTAbits	set	3968
    63                           
    64                           ; #config settings
    65                           
    66                           	psect	cinit
    67  002008                     __pcinit:
    68                           	opt stack 0
    69  002008                     start_initialization:
    70                           	opt stack 0
    71  002008                     __initialization:
    72                           	opt stack 0
    73  002008                     end_of_initialization:
    74                           	opt stack 0
    75  002008                     __end_of__initialization:
    76                           	opt stack 0
    77  002008  0E00               	movlw	low (__Lmediumconst shr (0+16))
    78  00200A  6EF8               	movwf	tblptru,c
    79  00200C  0100               	movlb	0
    80  00200E  EFB0  F03E         	goto	_main	;jump to C main() function
    81                           tblptru	equ	0xFF8
    82                           
    83                           	psect	cstackCOMRAM
    84  000001                     __pcstackCOMRAM:
    85                           	opt stack 0
    86  000001                     wait00@k:
    87                           	opt stack 0
    88  000001                     getRoadState@a:
    89                           	opt stack 0
    90                           
    91                           ; 2 bytes @ 0x0
    92  000001                     	ds	2
    93  000003                     ??_wait00:
    94  000003                     getRoadState@b:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x2
    98  000003                     	ds	1
    99  000004                     wait00@j:
   100                           	opt stack 0
   101                           
   102                           ; 2 bytes @ 0x3
   103  000004                     	ds	1
   104  000005                     getRoadState@c:
   105                           	opt stack 0
   106                           
   107                           ; 2 bytes @ 0x4
   108  000005                     	ds	1
   109  000006                     wait00@i:
   110                           	opt stack 0
   111                           
   112                           ; 2 bytes @ 0x5
   113  000006                     	ds	1
   114  000007                     getRoadState@d:
   115                           	opt stack 0
   116                           
   117                           ; 2 bytes @ 0x6
   118  000007                     	ds	1
   119  000008                     
   120                           ; 1 bytes @ 0x7
   121  000008                     	ds	1
   122  000009                     getRoadState@e:
   123                           	opt stack 0
   124                           
   125                           ; 2 bytes @ 0x8
   126  000009                     	ds	2
   127  00000B                     ??_main:
   128                           
   129                           ; 1 bytes @ 0xA
   130  00000B                     	ds	5
   131  000010                     main@previous_road_state:
   132                           	opt stack 0
   133                           
   134                           ; 1 bytes @ 0xF
   135  000010                     	ds	1
   136  000011                     main@road_state:
   137                           	opt stack 0
   138                           
   139                           ; 1 bytes @ 0x10
   140  000011                     	ds	1
   141                           tblptru	equ	0xFF8
   142                           
   143 ;;
   144 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   145 ;;
   146 ;; *************** function _main *****************
   147 ;; Defined at:
   148 ;;		line 151 in file "main.c"
   149 ;; Parameters:    Size  Location     Type
   150 ;;		None
   151 ;; Auto vars:     Size  Location     Type
   152 ;;  road_state      1   16[COMRAM] enum E3329
   153 ;;  previous_roa    1   15[COMRAM] enum E3329
   154 ;; Return value:  Size  Location     Type
   155 ;;                  2   72[None  ] int 
   156 ;; Registers used:
   157 ;;		wreg, status,2, status,0, cstack
   158 ;; Tracked objects:
   159 ;;		On entry : 0/0
   160 ;;		On exit  : 0/0
   161 ;;		Unchanged: 0/0
   162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   163 ;;      Params:         0       0       0       0       0       0       0       0       0
   164 ;;      Locals:         2       0       0       0       0       0       0       0       0
   165 ;;      Temps:          5       0       0       0       0       0       0       0       0
   166 ;;      Totals:         7       0       0       0       0       0       0       0       0
   167 ;;Total ram usage:        7 bytes
   168 ;; Hardware stack levels required when called:    2
   169 ;; This function calls:
   170 ;;		_accelerate
   171 ;;		_getRoadState
   172 ;;		_led_sens
   173 ;;		_straight
   174 ;;		_turnLeft
   175 ;;		_turnLeftWide
   176 ;;		_turnRight
   177 ;;		_turnRightWide
   178 ;;		_wait00
   179 ;; This function is called by:
   180 ;;		Startup code after reset
   181 ;; This function uses a non-reentrant model
   182 ;;
   183                           
   184                           	psect	text0
   185  007D60                     __ptext0:
   186                           	opt stack 0
   187  007D60                     _main:
   188                           	opt stack 29
   189                           
   190                           ;main.c: 154: ADCON1 = 0x0F;
   191                           
   192                           ;incstack = 0
   193  007D60  0E0F               	movlw	15
   194  007D62  6EC1               	movwf	4033,c	;volatile
   195                           
   196                           ;main.c: 157: TRISA = 0x20;
   197  007D64  0E20               	movlw	32
   198  007D66  6E92               	movwf	3986,c	;volatile
   199                           
   200                           ;main.c: 158: TRISB = 0xFF;
   201  007D68  6893               	setf	3987,c	;volatile
   202                           
   203                           ;main.c: 159: TRISC = 0x00;
   204  007D6A  0E00               	movlw	0
   205  007D6C  6E94               	movwf	3988,c	;volatile
   206                           
   207                           ;main.c: 162: PORTA = 0x00;
   208  007D6E  0E00               	movlw	0
   209  007D70  6E80               	movwf	3968,c	;volatile
   210                           
   211                           ;main.c: 163: PORTB = 0x00;
   212  007D72  0E00               	movlw	0
   213  007D74  6E81               	movwf	3969,c	;volatile
   214                           
   215                           ;main.c: 164: PORTC = 0x00;
   216  007D76  0E00               	movlw	0
   217  007D78  6E82               	movwf	3970,c	;volatile
   218                           
   219                           ;main.c: 167: while(PORTAbits.RA5==1){
   220  007D7A  D002               	goto	l73
   221  007D7C                     
   222                           ;main.c: 168: led_sens();
   223  007D7C  EC75  F03E         	call	_led_sens	;wreg free
   224  007D80                     l73:
   225  007D80  BA80               	btfsc	3968,5,c	;volatile
   226  007D82  D7FC               	goto	l74
   227                           
   228                           ;main.c: 169: }
   229                           ;main.c: 171: enum road_state_codes road_state = on_track;
   230  007D84  0E00               	movlw	0
   231  007D86  6E11               	movwf	main@road_state,c
   232                           
   233                           ;main.c: 172: enum road_state_codes previous_road_state;
   234                           ;main.c: 175: wait00(500);
   235  007D88  0E01               	movlw	1
   236  007D8A  6E02               	movwf	wait00@k+1,c
   237  007D8C  0EF4               	movlw	244
   238  007D8E  6E01               	movwf	wait00@k,c
   239  007D90  EC8F  F03E         	call	_wait00	;wreg free
   240  007D94                     
   241                           ;main.c: 177: led_sens();
   242  007D94  EC75  F03E         	call	_led_sens	;wreg free
   243                           
   244                           ;main.c: 179: previous_road_state = road_state;
   245  007D98  C011  F010         	movff	main@road_state,main@previous_road_state
   246                           
   247                           ;main.c: 180: road_state = getRoadState(
   248                           ;main.c: 181: PORTBbits.RB0, PORTBbits.RB1, PORTBbits.RB2,
   249                           ;main.c: 182: PORTBbits.RB3, PORTBbits.RB4
   250                           ;main.c: 183: );
   251  007D9C  A081               	btfss	3969,0,c	;volatile
   252  007D9E  D003               	goto	u1160
   253  007DA0  6A0B               	clrf	??_main& (0+255),c
   254  007DA2  2A0B               	incf	??_main& (0+255),f,c
   255  007DA4  D001               	goto	u1168
   256  007DA6                     u1160:
   257  007DA6  6A0B               	clrf	??_main& (0+255),c
   258  007DA8                     u1168:
   259  007DA8  500B               	movf	??_main,w,c
   260  007DAA  6E01               	movwf	getRoadState@a,c
   261  007DAC  6A02               	clrf	getRoadState@a+1,c
   262  007DAE  A281               	btfss	3969,1,c	;volatile
   263  007DB0  D003               	goto	u1170
   264  007DB2  6A0C               	clrf	(??_main+1)& (0+255),c
   265  007DB4  2A0C               	incf	(??_main+1)& (0+255),f,c
   266  007DB6  D001               	goto	u1178
   267  007DB8                     u1170:
   268  007DB8  6A0C               	clrf	(??_main+1)& (0+255),c
   269  007DBA                     u1178:
   270  007DBA  500C               	movf	??_main+1,w,c
   271  007DBC  6E03               	movwf	getRoadState@b,c
   272  007DBE  6A04               	clrf	getRoadState@b+1,c
   273  007DC0  A481               	btfss	3969,2,c	;volatile
   274  007DC2  D003               	goto	u1180
   275  007DC4  6A0D               	clrf	(??_main+2)& (0+255),c
   276  007DC6  2A0D               	incf	(??_main+2)& (0+255),f,c
   277  007DC8  D001               	goto	u1188
   278  007DCA                     u1180:
   279  007DCA  6A0D               	clrf	(??_main+2)& (0+255),c
   280  007DCC                     u1188:
   281  007DCC  500D               	movf	??_main+2,w,c
   282  007DCE  6E05               	movwf	getRoadState@c,c
   283  007DD0  6A06               	clrf	getRoadState@c+1,c
   284  007DD2  A681               	btfss	3969,3,c	;volatile
   285  007DD4  D003               	goto	u1190
   286  007DD6  6A0E               	clrf	(??_main+3)& (0+255),c
   287  007DD8  2A0E               	incf	(??_main+3)& (0+255),f,c
   288  007DDA  D001               	goto	u1198
   289  007DDC                     u1190:
   290  007DDC  6A0E               	clrf	(??_main+3)& (0+255),c
   291  007DDE                     u1198:
   292  007DDE  500E               	movf	??_main+3,w,c
   293  007DE0  6E07               	movwf	getRoadState@d,c
   294  007DE2  6A08               	clrf	getRoadState@d+1,c
   295  007DE4  A881               	btfss	3969,4,c	;volatile
   296  007DE6  D003               	goto	u1200
   297  007DE8  6A0F               	clrf	(??_main+4)& (0+255),c
   298  007DEA  2A0F               	incf	(??_main+4)& (0+255),f,c
   299  007DEC  D001               	goto	u1208
   300  007DEE                     u1200:
   301  007DEE  6A0F               	clrf	(??_main+4)& (0+255),c
   302  007DF0                     u1208:
   303  007DF0  500F               	movf	??_main+4,w,c
   304  007DF2  6E09               	movwf	getRoadState@e,c
   305  007DF4  6A0A               	clrf	getRoadState@e+1,c
   306  007DF6  EC2A  F03F         	call	_getRoadState	;wreg free
   307  007DFA  6E11               	movwf	main@road_state,c
   308                           
   309                           ;main.c: 185: if (road_state == off_track)
   310  007DFC  0411               	decf	main@road_state,w,c
   311  007DFE  A4D8               	btfss	status,2,c
   312  007E00  D015               	goto	l78
   313                           
   314                           ;main.c: 186: road_state = previous_road_state;
   315  007E02  C010  F011         	movff	main@previous_road_state,main@road_state
   316                           
   317                           ;main.c: 188: switch (road_state) {
   318  007E06  D012               	goto	l78
   319  007E08                     
   320                           ;main.c: 190: accelerate();
   321  007E08  EC11  F03E         	call	_accelerate	;wreg free
   322                           
   323                           ;main.c: 191: break;
   324  007E0C  D7C3               	goto	l76
   325  007E0E                     
   326                           ;main.c: 193: turnRightWide();
   327  007E0E  EC5C  F03E         	call	_turnRightWide	;wreg free
   328                           
   329                           ;main.c: 194: break;
   330  007E12  D7C0               	goto	l76
   331  007E14                     
   332                           ;main.c: 196: turnLeftWide();
   333  007E14  EC43  F03E         	call	_turnLeftWide	;wreg free
   334                           
   335                           ;main.c: 197: break;
   336  007E18  D7BD               	goto	l76
   337  007E1A                     
   338                           ;main.c: 199: turnRight();
   339  007E1A  EC00  F03E         	call	_turnRight	;wreg free
   340                           
   341                           ;main.c: 200: break;
   342  007E1E  D7BA               	goto	l76
   343  007E20                     
   344                           ;main.c: 202: turnLeft();
   345  007E20  ECEF  F03D         	call	_turnLeft	;wreg free
   346                           
   347                           ;main.c: 203: break;
   348  007E24  D7B7               	goto	l76
   349  007E26                     
   350                           ;main.c: 205: straight();
   351  007E26  EC2A  F03E         	call	_straight	;wreg free
   352                           
   353                           ;main.c: 207: }
   354                           
   355                           ;main.c: 206: break;
   356  007E2A  D7B4               	goto	l76
   357  007E2C                     l78:
   358  007E2C  5011               	movf	main@road_state,w,c
   359                           
   360                           ; Switch size 1, requested type "space"
   361                           ; Number of cases is 6, Range of values is 0 to 6
   362                           ; switch strategies available:
   363                           ; Name         Instructions Cycles
   364                           ; simple_byte           19    10 (average)
   365                           ;	Chosen strategy is simple_byte
   366  007E2E  0A00               	xorlw	0	; case 0
   367  007E30  B4D8               	btfsc	status,2,c
   368  007E32  D7F9               	goto	l85
   369  007E34  0A02               	xorlw	2	; case 2
   370  007E36  B4D8               	btfsc	status,2,c
   371  007E38  D7E7               	goto	l79
   372  007E3A  0A01               	xorlw	1	; case 3
   373  007E3C  B4D8               	btfsc	status,2,c
   374  007E3E  D7EA               	goto	l82
   375  007E40  0A07               	xorlw	7	; case 4
   376  007E42  B4D8               	btfsc	status,2,c
   377  007E44  D7ED               	goto	l84
   378  007E46  0A01               	xorlw	1	; case 5
   379  007E48  B4D8               	btfsc	status,2,c
   380  007E4A  D7E1               	goto	l81
   381  007E4C  0A03               	xorlw	3	; case 6
   382  007E4E  B4D8               	btfsc	status,2,c
   383  007E50  D7E4               	goto	l83
   384  007E52  D7A0               	goto	l76
   385  007E54                     __end_of_main:
   386                           	opt stack 0
   387                           tblptru	equ	0xFF8
   388                           status	equ	0xFD8
   389                           
   390 ;; *************** function _turnRightWide *****************
   391 ;; Defined at:
   392 ;;		line 122 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;		None
   397 ;; Return value:  Size  Location     Type
   398 ;;                  2   61[None  ] int 
   399 ;; Registers used:
   400 ;;		wreg, status,2, status,0, cstack
   401 ;; Tracked objects:
   402 ;;		On entry : 0/0
   403 ;;		On exit  : 0/0
   404 ;;		Unchanged: 0/0
   405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   406 ;;      Params:         0       0       0       0       0       0       0       0       0
   407 ;;      Locals:         0       0       0       0       0       0       0       0       0
   408 ;;      Temps:          0       0       0       0       0       0       0       0       0
   409 ;;      Totals:         0       0       0       0       0       0       0       0       0
   410 ;;Total ram usage:        0 bytes
   411 ;; Hardware stack levels used:    1
   412 ;; Hardware stack levels required when called:    1
   413 ;; This function calls:
   414 ;;		_wait00
   415 ;; This function is called by:
   416 ;;		_main
   417 ;; This function uses a non-reentrant model
   418 ;;
   419                           
   420                           	psect	text1
   421  007CB8                     __ptext1:
   422                           	opt stack 0
   423  007CB8                     _turnRightWide:
   424                           	opt stack 29
   425                           
   426                           ;main.c: 123: PORTC=0x03;
   427                           
   428                           ;incstack = 0
   429  007CB8  0E03               	movlw	3
   430  007CBA  6E82               	movwf	3970,c	;volatile
   431                           
   432                           ;main.c: 124: wait00(1);
   433  007CBC  0E00               	movlw	0
   434  007CBE  6E02               	movwf	wait00@k+1,c
   435  007CC0  0E01               	movlw	1
   436  007CC2  6E01               	movwf	wait00@k,c
   437  007CC4  EC8F  F03E         	call	_wait00	;wreg free
   438                           
   439                           ;main.c: 125: PORTC=0x01;
   440  007CC8  0E01               	movlw	1
   441  007CCA  6E82               	movwf	3970,c	;volatile
   442                           
   443                           ;main.c: 126: wait00(8.5);
   444  007CCC  0E00               	movlw	0
   445  007CCE  6E02               	movwf	wait00@k+1,c
   446  007CD0  0E08               	movlw	8
   447  007CD2  6E01               	movwf	wait00@k,c
   448  007CD4  EC8F  F03E         	call	_wait00	;wreg free
   449                           
   450                           ;main.c: 127: PORTC = 0x00;
   451  007CD8  0E00               	movlw	0
   452  007CDA  6E82               	movwf	3970,c	;volatile
   453                           
   454                           ;main.c: 128: wait00(5);
   455  007CDC  0E00               	movlw	0
   456  007CDE  6E02               	movwf	wait00@k+1,c
   457  007CE0  0E05               	movlw	5
   458  007CE2  6E01               	movwf	wait00@k,c
   459  007CE4  EC8F  F03E         	call	_wait00	;wreg free
   460  007CE8  0012               	return		;funcret
   461  007CEA                     __end_of_turnRightWide:
   462                           	opt stack 0
   463                           tblptru	equ	0xFF8
   464                           status	equ	0xFD8
   465                           
   466 ;; *************** function _turnRight *****************
   467 ;; Defined at:
   468 ;;		line 105 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  2   55[None  ] int 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   482 ;;      Params:         0       0       0       0       0       0       0       0       0
   483 ;;      Locals:         0       0       0       0       0       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0       0       0       0       0
   485 ;;      Totals:         0       0       0       0       0       0       0       0       0
   486 ;;Total ram usage:        0 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; Hardware stack levels required when called:    1
   489 ;; This function calls:
   490 ;;		_wait00
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text2
   497  007C00                     __ptext2:
   498                           	opt stack 0
   499  007C00                     _turnRight:
   500                           	opt stack 29
   501                           
   502                           ;main.c: 106: PORTC=0x01;
   503                           
   504                           ;incstack = 0
   505  007C00  0E01               	movlw	1
   506  007C02  6E82               	movwf	3970,c	;volatile
   507                           
   508                           ;main.c: 107: wait00(8.5);
   509  007C04  0E00               	movlw	0
   510  007C06  6E02               	movwf	wait00@k+1,c
   511  007C08  0E08               	movlw	8
   512  007C0A  6E01               	movwf	wait00@k,c
   513  007C0C  EC8F  F03E         	call	_wait00	;wreg free
   514                           
   515                           ;main.c: 108: PORTC = 0x00;
   516  007C10  0E00               	movlw	0
   517  007C12  6E82               	movwf	3970,c	;volatile
   518                           
   519                           ;main.c: 109: wait00(5);
   520  007C14  0E00               	movlw	0
   521  007C16  6E02               	movwf	wait00@k+1,c
   522  007C18  0E05               	movlw	5
   523  007C1A  6E01               	movwf	wait00@k,c
   524  007C1C  EC8F  F03E         	call	_wait00	;wreg free
   525  007C20  0012               	return		;funcret
   526  007C22                     __end_of_turnRight:
   527                           	opt stack 0
   528                           tblptru	equ	0xFF8
   529                           status	equ	0xFD8
   530                           
   531 ;; *************** function _turnLeftWide *****************
   532 ;; Defined at:
   533 ;;		line 113 in file "main.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;		None
   538 ;; Return value:  Size  Location     Type
   539 ;;                  2   58[None  ] int 
   540 ;; Registers used:
   541 ;;		wreg, status,2, status,0, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   547 ;;      Params:         0       0       0       0       0       0       0       0       0
   548 ;;      Locals:         0       0       0       0       0       0       0       0       0
   549 ;;      Temps:          0       0       0       0       0       0       0       0       0
   550 ;;      Totals:         0       0       0       0       0       0       0       0       0
   551 ;;Total ram usage:        0 bytes
   552 ;; Hardware stack levels used:    1
   553 ;; Hardware stack levels required when called:    1
   554 ;; This function calls:
   555 ;;		_wait00
   556 ;; This function is called by:
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text3
   562  007C86                     __ptext3:
   563                           	opt stack 0
   564  007C86                     _turnLeftWide:
   565                           	opt stack 29
   566                           
   567                           ;main.c: 114: PORTC=0x03;
   568                           
   569                           ;incstack = 0
   570  007C86  0E03               	movlw	3
   571  007C88  6E82               	movwf	3970,c	;volatile
   572                           
   573                           ;main.c: 115: wait00(1);
   574  007C8A  0E00               	movlw	0
   575  007C8C  6E02               	movwf	wait00@k+1,c
   576  007C8E  0E01               	movlw	1
   577  007C90  6E01               	movwf	wait00@k,c
   578  007C92  EC8F  F03E         	call	_wait00	;wreg free
   579                           
   580                           ;main.c: 116: PORTC=0x02;
   581  007C96  0E02               	movlw	2
   582  007C98  6E82               	movwf	3970,c	;volatile
   583                           
   584                           ;main.c: 117: wait00(10);
   585  007C9A  0E00               	movlw	0
   586  007C9C  6E02               	movwf	wait00@k+1,c
   587  007C9E  0E0A               	movlw	10
   588  007CA0  6E01               	movwf	wait00@k,c
   589  007CA2  EC8F  F03E         	call	_wait00	;wreg free
   590                           
   591                           ;main.c: 118: PORTC = 0x00;
   592  007CA6  0E00               	movlw	0
   593  007CA8  6E82               	movwf	3970,c	;volatile
   594                           
   595                           ;main.c: 119: wait00(5);
   596  007CAA  0E00               	movlw	0
   597  007CAC  6E02               	movwf	wait00@k+1,c
   598  007CAE  0E05               	movlw	5
   599  007CB0  6E01               	movwf	wait00@k,c
   600  007CB2  EC8F  F03E         	call	_wait00	;wreg free
   601  007CB6  0012               	return		;funcret
   602  007CB8                     __end_of_turnLeftWide:
   603                           	opt stack 0
   604                           tblptru	equ	0xFF8
   605                           status	equ	0xFD8
   606                           
   607 ;; *************** function _turnLeft *****************
   608 ;; Defined at:
   609 ;;		line 98 in file "main.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  2   52[None  ] int 
   616 ;; Registers used:
   617 ;;		wreg, status,2, status,0, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   623 ;;      Params:         0       0       0       0       0       0       0       0       0
   624 ;;      Locals:         0       0       0       0       0       0       0       0       0
   625 ;;      Temps:          0       0       0       0       0       0       0       0       0
   626 ;;      Totals:         0       0       0       0       0       0       0       0       0
   627 ;;Total ram usage:        0 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; Hardware stack levels required when called:    1
   630 ;; This function calls:
   631 ;;		_wait00
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text4
   638  007BDE                     __ptext4:
   639                           	opt stack 0
   640  007BDE                     _turnLeft:
   641                           	opt stack 29
   642                           
   643                           ;main.c: 99: PORTC=0x02;
   644                           
   645                           ;incstack = 0
   646  007BDE  0E02               	movlw	2
   647  007BE0  6E82               	movwf	3970,c	;volatile
   648                           
   649                           ;main.c: 100: wait00(10);
   650  007BE2  0E00               	movlw	0
   651  007BE4  6E02               	movwf	wait00@k+1,c
   652  007BE6  0E0A               	movlw	10
   653  007BE8  6E01               	movwf	wait00@k,c
   654  007BEA  EC8F  F03E         	call	_wait00	;wreg free
   655                           
   656                           ;main.c: 101: PORTC = 0x00;
   657  007BEE  0E00               	movlw	0
   658  007BF0  6E82               	movwf	3970,c	;volatile
   659                           
   660                           ;main.c: 102: wait00(5);
   661  007BF2  0E00               	movlw	0
   662  007BF4  6E02               	movwf	wait00@k+1,c
   663  007BF6  0E05               	movlw	5
   664  007BF8  6E01               	movwf	wait00@k,c
   665  007BFA  EC8F  F03E         	call	_wait00	;wreg free
   666  007BFE  0012               	return		;funcret
   667  007C00                     __end_of_turnLeft:
   668                           	opt stack 0
   669                           tblptru	equ	0xFF8
   670                           status	equ	0xFD8
   671                           
   672 ;; *************** function _straight *****************
   673 ;; Defined at:
   674 ;;		line 132 in file "main.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  2   64[None  ] int 
   681 ;; Registers used:
   682 ;;		wreg, status,2, status,0, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   688 ;;      Params:         0       0       0       0       0       0       0       0       0
   689 ;;      Locals:         0       0       0       0       0       0       0       0       0
   690 ;;      Temps:          0       0       0       0       0       0       0       0       0
   691 ;;      Totals:         0       0       0       0       0       0       0       0       0
   692 ;;Total ram usage:        0 bytes
   693 ;; Hardware stack levels used:    1
   694 ;; Hardware stack levels required when called:    1
   695 ;; This function calls:
   696 ;;		_wait00
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text5
   703  007C54                     __ptext5:
   704                           	opt stack 0
   705  007C54                     _straight:
   706                           	opt stack 29
   707                           
   708                           ;main.c: 133: PORTC=0x03;
   709                           
   710                           ;incstack = 0
   711  007C54  0E03               	movlw	3
   712  007C56  6E82               	movwf	3970,c	;volatile
   713                           
   714                           ;main.c: 134: wait00(8);
   715  007C58  0E00               	movlw	0
   716  007C5A  6E02               	movwf	wait00@k+1,c
   717  007C5C  0E08               	movlw	8
   718  007C5E  6E01               	movwf	wait00@k,c
   719  007C60  EC8F  F03E         	call	_wait00	;wreg free
   720                           
   721                           ;main.c: 135: PORTC=0x02;
   722  007C64  0E02               	movlw	2
   723  007C66  6E82               	movwf	3970,c	;volatile
   724                           
   725                           ;main.c: 136: wait00(0.5);
   726  007C68  0E00               	movlw	0
   727  007C6A  6E02               	movwf	wait00@k+1,c
   728  007C6C  0E00               	movlw	0
   729  007C6E  6E01               	movwf	wait00@k,c
   730  007C70  EC8F  F03E         	call	_wait00	;wreg free
   731                           
   732                           ;main.c: 137: PORTC=0x00;
   733  007C74  0E00               	movlw	0
   734  007C76  6E82               	movwf	3970,c	;volatile
   735                           
   736                           ;main.c: 138: wait00(10);
   737  007C78  0E00               	movlw	0
   738  007C7A  6E02               	movwf	wait00@k+1,c
   739  007C7C  0E0A               	movlw	10
   740  007C7E  6E01               	movwf	wait00@k,c
   741  007C80  EC8F  F03E         	call	_wait00	;wreg free
   742  007C84  0012               	return		;funcret
   743  007C86                     __end_of_straight:
   744                           	opt stack 0
   745                           tblptru	equ	0xFF8
   746                           status	equ	0xFD8
   747                           
   748 ;; *************** function _led_sens *****************
   749 ;; Defined at:
   750 ;;		line 21 in file "main.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;		None
   753 ;; Auto vars:     Size  Location     Type
   754 ;;		None
   755 ;; Return value:  Size  Location     Type
   756 ;;                  2   28[None  ] int 
   757 ;; Registers used:
   758 ;;		None
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   764 ;;      Params:         0       0       0       0       0       0       0       0       0
   765 ;;      Locals:         0       0       0       0       0       0       0       0       0
   766 ;;      Temps:          0       0       0       0       0       0       0       0       0
   767 ;;      Totals:         0       0       0       0       0       0       0       0       0
   768 ;;Total ram usage:        0 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; This function calls:
   771 ;;		Nothing
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text6
   778  007CEA                     __ptext6:
   779                           	opt stack 0
   780  007CEA                     _led_sens:
   781                           	opt stack 30
   782                           
   783                           ;main.c: 23: PORTAbits.RA0 = PORTBbits.RB0;
   784                           
   785                           ;incstack = 0
   786  007CEA  A081               	btfss	3969,0,c	;volatile
   787  007CEC  D002               	bra	u45
   788  007CEE  8080               	bsf	3968,0,c	;volatile
   789  007CF0  D001               	bra	u47
   790  007CF2                     u45:
   791  007CF2  9080               	bcf	3968,0,c	;volatile
   792  007CF4                     u47:
   793                           
   794                           ;main.c: 24: PORTAbits.RA1 = PORTBbits.RB1;
   795  007CF4  A281               	btfss	3969,1,c	;volatile
   796  007CF6  D002               	bra	u55
   797  007CF8  8280               	bsf	3968,1,c	;volatile
   798  007CFA  D001               	bra	u57
   799  007CFC                     u55:
   800  007CFC  9280               	bcf	3968,1,c	;volatile
   801  007CFE                     u57:
   802                           
   803                           ;main.c: 25: PORTAbits.RA2 = PORTBbits.RB2;
   804  007CFE  A481               	btfss	3969,2,c	;volatile
   805  007D00  D002               	bra	u65
   806  007D02  8480               	bsf	3968,2,c	;volatile
   807  007D04  D001               	bra	u67
   808  007D06                     u65:
   809  007D06  9480               	bcf	3968,2,c	;volatile
   810  007D08                     u67:
   811                           
   812                           ;main.c: 26: PORTAbits.RA3 = PORTBbits.RB3;
   813  007D08  A681               	btfss	3969,3,c	;volatile
   814  007D0A  D002               	bra	u75
   815  007D0C  8680               	bsf	3968,3,c	;volatile
   816  007D0E  D001               	bra	u77
   817  007D10                     u75:
   818  007D10  9680               	bcf	3968,3,c	;volatile
   819  007D12                     u77:
   820                           
   821                           ;main.c: 27: PORTAbits.RA4 = PORTBbits.RB4;
   822  007D12  A881               	btfss	3969,4,c	;volatile
   823  007D14  D002               	bra	u85
   824  007D16  8880               	bsf	3968,4,c	;volatile
   825  007D18  D001               	bra	u87
   826  007D1A                     u85:
   827  007D1A  9880               	bcf	3968,4,c	;volatile
   828  007D1C                     u87:
   829  007D1C  0012               	return		;funcret
   830  007D1E                     __end_of_led_sens:
   831                           	opt stack 0
   832                           tblptru	equ	0xFF8
   833                           status	equ	0xFD8
   834                           
   835 ;; *************** function _getRoadState *****************
   836 ;; Defined at:
   837 ;;		line 41 in file "main.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  a               2    0[COMRAM] short 
   840 ;;  b               2    2[COMRAM] short 
   841 ;;  c               2    4[COMRAM] short 
   842 ;;  d               2    6[COMRAM] short 
   843 ;;  e               2    8[COMRAM] short 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;		None
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      enum E3329
   848 ;; Registers used:
   849 ;;		wreg, status,2, status,0
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   855 ;;      Params:        10       0       0       0       0       0       0       0       0
   856 ;;      Locals:         0       0       0       0       0       0       0       0       0
   857 ;;      Temps:          0       0       0       0       0       0       0       0       0
   858 ;;      Totals:        10       0       0       0       0       0       0       0       0
   859 ;;Total ram usage:       10 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text7
   869  007E54                     __ptext7:
   870                           	opt stack 0
   871  007E54                     _getRoadState:
   872                           	opt stack 30
   873                           
   874                           ;main.c: 42: if ( (a == 1 && b == 1 && c == 1
   875                           ;main.c: 43: && d == 1 && e == 1)
   876                           ;main.c: 44: || (a == 0 && b == 0 && c == 0
   877                           ;main.c: 45: && d == 0 && e == 0)) {
   878                           
   879                           ;incstack = 0
   880  007E54  0401               	decf	getRoadState@a,w,c
   881  007E56  1002               	iorwf	getRoadState@a+1,w,c
   882  007E58  A4D8               	btfss	status,2,c
   883  007E5A  D010               	goto	u710
   884  007E5C  0403               	decf	getRoadState@b,w,c
   885  007E5E  1004               	iorwf	getRoadState@b+1,w,c
   886  007E60  A4D8               	btfss	status,2,c
   887  007E62  D00C               	goto	u710
   888  007E64  0405               	decf	getRoadState@c,w,c
   889  007E66  1006               	iorwf	getRoadState@c+1,w,c
   890  007E68  A4D8               	btfss	status,2,c
   891  007E6A  D008               	goto	u710
   892  007E6C  0407               	decf	getRoadState@d,w,c
   893  007E6E  1008               	iorwf	getRoadState@d+1,w,c
   894  007E70  A4D8               	btfss	status,2,c
   895  007E72  D004               	goto	u710
   896  007E74  0409               	decf	getRoadState@e,w,c
   897  007E76  100A               	iorwf	getRoadState@e+1,w,c
   898  007E78  B4D8               	btfsc	status,2,c
   899  007E7A  D014               	goto	u760
   900  007E7C                     u710:
   901  007E7C  5001               	movf	getRoadState@a,w,c
   902  007E7E  1002               	iorwf	getRoadState@a+1,w,c
   903  007E80  A4D8               	btfss	status,2,c
   904  007E82  D012               	goto	l32
   905  007E84  5003               	movf	getRoadState@b,w,c
   906  007E86  1004               	iorwf	getRoadState@b+1,w,c
   907  007E88  A4D8               	btfss	status,2,c
   908  007E8A  D00E               	goto	l32
   909  007E8C  5005               	movf	getRoadState@c,w,c
   910  007E8E  1006               	iorwf	getRoadState@c+1,w,c
   911  007E90  A4D8               	btfss	status,2,c
   912  007E92  D00A               	goto	l32
   913  007E94  5007               	movf	getRoadState@d,w,c
   914  007E96  1008               	iorwf	getRoadState@d+1,w,c
   915  007E98  A4D8               	btfss	status,2,c
   916  007E9A  D006               	goto	l32
   917  007E9C  5009               	movf	getRoadState@e,w,c
   918  007E9E  100A               	iorwf	getRoadState@e+1,w,c
   919  007EA0  A4D8               	btfss	status,2,c
   920  007EA2  D002               	goto	l32
   921  007EA4                     u760:
   922                           
   923                           ;main.c: 46: return off_track;
   924  007EA4  0E01               	movlw	1
   925  007EA6  0012               	return	
   926  007EA8                     l32:
   927                           
   928                           ;main.c: 47: }
   929                           ;main.c: 49: if ( (c == 0
   930                           ;main.c: 50: && a == 1 && b == 1
   931                           ;main.c: 51: && d == 1 && e == 1)
   932                           ;main.c: 52: || (c == 1
   933                           ;main.c: 53: && a == 0 && b == 0
   934                           ;main.c: 54: && d == 0 && e == 0)) {
   935  007EA8  5005               	movf	getRoadState@c,w,c
   936  007EAA  1006               	iorwf	getRoadState@c+1,w,c
   937  007EAC  A4D8               	btfss	status,2,c
   938  007EAE  D010               	goto	u810
   939  007EB0  0401               	decf	getRoadState@a,w,c
   940  007EB2  1002               	iorwf	getRoadState@a+1,w,c
   941  007EB4  A4D8               	btfss	status,2,c
   942  007EB6  D00C               	goto	u810
   943  007EB8  0403               	decf	getRoadState@b,w,c
   944  007EBA  1004               	iorwf	getRoadState@b+1,w,c
   945  007EBC  A4D8               	btfss	status,2,c
   946  007EBE  D008               	goto	u810
   947  007EC0  0407               	decf	getRoadState@d,w,c
   948  007EC2  1008               	iorwf	getRoadState@d+1,w,c
   949  007EC4  A4D8               	btfss	status,2,c
   950  007EC6  D004               	goto	u810
   951  007EC8  0409               	decf	getRoadState@e,w,c
   952  007ECA  100A               	iorwf	getRoadState@e+1,w,c
   953  007ECC  B4D8               	btfsc	status,2,c
   954  007ECE  D014               	goto	u860
   955  007ED0                     u810:
   956  007ED0  0405               	decf	getRoadState@c,w,c
   957  007ED2  1006               	iorwf	getRoadState@c+1,w,c
   958  007ED4  A4D8               	btfss	status,2,c
   959  007ED6  D012               	goto	l38
   960  007ED8  5001               	movf	getRoadState@a,w,c
   961  007EDA  1002               	iorwf	getRoadState@a+1,w,c
   962  007EDC  A4D8               	btfss	status,2,c
   963  007EDE  D00E               	goto	l38
   964  007EE0  5003               	movf	getRoadState@b,w,c
   965  007EE2  1004               	iorwf	getRoadState@b+1,w,c
   966  007EE4  A4D8               	btfss	status,2,c
   967  007EE6  D00A               	goto	l38
   968  007EE8  5007               	movf	getRoadState@d,w,c
   969  007EEA  1008               	iorwf	getRoadState@d+1,w,c
   970  007EEC  A4D8               	btfss	status,2,c
   971  007EEE  D006               	goto	l38
   972  007EF0  5009               	movf	getRoadState@e,w,c
   973  007EF2  100A               	iorwf	getRoadState@e+1,w,c
   974  007EF4  A4D8               	btfss	status,2,c
   975  007EF6  D002               	goto	l38
   976  007EF8                     u860:
   977                           
   978                           ;main.c: 55: return straight_line;
   979  007EF8  0E02               	movlw	2
   980  007EFA  0012               	return	
   981  007EFC                     l38:
   982                           
   983                           ;main.c: 56: }
   984                           ;main.c: 59: if (a == 1 && b == 0
   985                           ;main.c: 60: && d == 1 && e == 1) {
   986  007EFC  0401               	decf	getRoadState@a,w,c
   987  007EFE  1002               	iorwf	getRoadState@a+1,w,c
   988  007F00  A4D8               	btfss	status,2,c
   989  007F02  D00E               	goto	l43
   990  007F04  5003               	movf	getRoadState@b,w,c
   991  007F06  1004               	iorwf	getRoadState@b+1,w,c
   992  007F08  A4D8               	btfss	status,2,c
   993  007F0A  D00A               	goto	l43
   994  007F0C  0407               	decf	getRoadState@d,w,c
   995  007F0E  1008               	iorwf	getRoadState@d+1,w,c
   996  007F10  A4D8               	btfss	status,2,c
   997  007F12  D006               	goto	l43
   998  007F14  0409               	decf	getRoadState@e,w,c
   999  007F16  100A               	iorwf	getRoadState@e+1,w,c
  1000  007F18  A4D8               	btfss	status,2,c
  1001  007F1A  D002               	goto	l43
  1002                           
  1003                           ;main.c: 61: return off_right_little;
  1004  007F1C  0E03               	movlw	3
  1005  007F1E  0012               	return	
  1006  007F20                     l43:
  1007                           
  1008                           ;main.c: 62: }
  1009                           ;main.c: 63: if (a == 1 && b == 1
  1010                           ;main.c: 64: && d == 0 && e == 1) {
  1011  007F20  0401               	decf	getRoadState@a,w,c
  1012  007F22  1002               	iorwf	getRoadState@a+1,w,c
  1013  007F24  A4D8               	btfss	status,2,c
  1014  007F26  D00E               	goto	l44
  1015  007F28  0403               	decf	getRoadState@b,w,c
  1016  007F2A  1004               	iorwf	getRoadState@b+1,w,c
  1017  007F2C  A4D8               	btfss	status,2,c
  1018  007F2E  D00A               	goto	l44
  1019  007F30  5007               	movf	getRoadState@d,w,c
  1020  007F32  1008               	iorwf	getRoadState@d+1,w,c
  1021  007F34  A4D8               	btfss	status,2,c
  1022  007F36  D006               	goto	l44
  1023  007F38  0409               	decf	getRoadState@e,w,c
  1024  007F3A  100A               	iorwf	getRoadState@e+1,w,c
  1025  007F3C  A4D8               	btfss	status,2,c
  1026  007F3E  D002               	goto	l44
  1027                           
  1028                           ;main.c: 65: return off_left_little;
  1029  007F40  0E05               	movlw	5
  1030  007F42  0012               	return	
  1031  007F44                     l44:
  1032                           
  1033                           ;main.c: 66: }
  1034                           ;main.c: 67: if (a == 0 && c == 1 && e == 1) {
  1035  007F44  5001               	movf	getRoadState@a,w,c
  1036  007F46  1002               	iorwf	getRoadState@a+1,w,c
  1037  007F48  A4D8               	btfss	status,2,c
  1038  007F4A  D00A               	goto	l45
  1039  007F4C  0405               	decf	getRoadState@c,w,c
  1040  007F4E  1006               	iorwf	getRoadState@c+1,w,c
  1041  007F50  A4D8               	btfss	status,2,c
  1042  007F52  D006               	goto	l45
  1043  007F54  0409               	decf	getRoadState@e,w,c
  1044  007F56  100A               	iorwf	getRoadState@e+1,w,c
  1045  007F58  A4D8               	btfss	status,2,c
  1046  007F5A  D002               	goto	l45
  1047                           
  1048                           ;main.c: 68: return off_right;
  1049  007F5C  0E04               	movlw	4
  1050  007F5E  0012               	return	
  1051  007F60                     l45:
  1052                           
  1053                           ;main.c: 69: }
  1054                           ;main.c: 70: if (a == 1 && c == 1 && e == 0) {
  1055  007F60  0401               	decf	getRoadState@a,w,c
  1056  007F62  1002               	iorwf	getRoadState@a+1,w,c
  1057  007F64  A4D8               	btfss	status,2,c
  1058  007F66  D00A               	goto	l46
  1059  007F68  0405               	decf	getRoadState@c,w,c
  1060  007F6A  1006               	iorwf	getRoadState@c+1,w,c
  1061  007F6C  A4D8               	btfss	status,2,c
  1062  007F6E  D006               	goto	l46
  1063  007F70  5009               	movf	getRoadState@e,w,c
  1064  007F72  100A               	iorwf	getRoadState@e+1,w,c
  1065  007F74  A4D8               	btfss	status,2,c
  1066  007F76  D002               	goto	l46
  1067                           
  1068                           ;main.c: 71: return off_left;
  1069  007F78  0E06               	movlw	6
  1070  007F7A  0012               	return	
  1071  007F7C                     l46:
  1072                           
  1073                           ;main.c: 72: }
  1074                           ;main.c: 75: if (a == 0 && b == 1
  1075                           ;main.c: 76: && d == 0 && e == 0) {
  1076  007F7C  5001               	movf	getRoadState@a,w,c
  1077  007F7E  1002               	iorwf	getRoadState@a+1,w,c
  1078  007F80  A4D8               	btfss	status,2,c
  1079  007F82  D00E               	goto	l47
  1080  007F84  0403               	decf	getRoadState@b,w,c
  1081  007F86  1004               	iorwf	getRoadState@b+1,w,c
  1082  007F88  A4D8               	btfss	status,2,c
  1083  007F8A  D00A               	goto	l47
  1084  007F8C  5007               	movf	getRoadState@d,w,c
  1085  007F8E  1008               	iorwf	getRoadState@d+1,w,c
  1086  007F90  A4D8               	btfss	status,2,c
  1087  007F92  D006               	goto	l47
  1088  007F94  5009               	movf	getRoadState@e,w,c
  1089  007F96  100A               	iorwf	getRoadState@e+1,w,c
  1090  007F98  A4D8               	btfss	status,2,c
  1091  007F9A  D002               	goto	l47
  1092                           
  1093                           ;main.c: 77: return off_right_little;
  1094  007F9C  0E03               	movlw	3
  1095  007F9E  0012               	return	
  1096  007FA0                     l47:
  1097                           
  1098                           ;main.c: 78: }
  1099                           ;main.c: 79: if (a == 0 && b == 0
  1100                           ;main.c: 80: && d == 1 && e == 0) {
  1101  007FA0  5001               	movf	getRoadState@a,w,c
  1102  007FA2  1002               	iorwf	getRoadState@a+1,w,c
  1103  007FA4  A4D8               	btfss	status,2,c
  1104  007FA6  D00E               	goto	l48
  1105  007FA8  5003               	movf	getRoadState@b,w,c
  1106  007FAA  1004               	iorwf	getRoadState@b+1,w,c
  1107  007FAC  A4D8               	btfss	status,2,c
  1108  007FAE  D00A               	goto	l48
  1109  007FB0  0407               	decf	getRoadState@d,w,c
  1110  007FB2  1008               	iorwf	getRoadState@d+1,w,c
  1111  007FB4  A4D8               	btfss	status,2,c
  1112  007FB6  D006               	goto	l48
  1113  007FB8  5009               	movf	getRoadState@e,w,c
  1114  007FBA  100A               	iorwf	getRoadState@e+1,w,c
  1115  007FBC  A4D8               	btfss	status,2,c
  1116  007FBE  D002               	goto	l48
  1117                           
  1118                           ;main.c: 81: return off_left_little;
  1119  007FC0  0E05               	movlw	5
  1120  007FC2  0012               	return	
  1121  007FC4                     l48:
  1122                           
  1123                           ;main.c: 82: }
  1124                           ;main.c: 83: if (a == 1 && c == 0 && e == 0) {
  1125  007FC4  0401               	decf	getRoadState@a,w,c
  1126  007FC6  1002               	iorwf	getRoadState@a+1,w,c
  1127  007FC8  A4D8               	btfss	status,2,c
  1128  007FCA  D00A               	goto	l49
  1129  007FCC  5005               	movf	getRoadState@c,w,c
  1130  007FCE  1006               	iorwf	getRoadState@c+1,w,c
  1131  007FD0  A4D8               	btfss	status,2,c
  1132  007FD2  D006               	goto	l49
  1133  007FD4  5009               	movf	getRoadState@e,w,c
  1134  007FD6  100A               	iorwf	getRoadState@e+1,w,c
  1135  007FD8  A4D8               	btfss	status,2,c
  1136  007FDA  D002               	goto	l49
  1137                           
  1138                           ;main.c: 84: return off_right;
  1139  007FDC  0E04               	movlw	4
  1140  007FDE  0012               	return	
  1141  007FE0                     l49:
  1142                           
  1143                           ;main.c: 85: }
  1144                           ;main.c: 86: if (a == 0 && c == 0 && e == 1) {
  1145  007FE0  5001               	movf	getRoadState@a,w,c
  1146  007FE2  1002               	iorwf	getRoadState@a+1,w,c
  1147  007FE4  A4D8               	btfss	status,2,c
  1148  007FE6  D00A               	goto	l50
  1149  007FE8  5005               	movf	getRoadState@c,w,c
  1150  007FEA  1006               	iorwf	getRoadState@c+1,w,c
  1151  007FEC  A4D8               	btfss	status,2,c
  1152  007FEE  D006               	goto	l50
  1153  007FF0  0409               	decf	getRoadState@e,w,c
  1154  007FF2  100A               	iorwf	getRoadState@e+1,w,c
  1155  007FF4  A4D8               	btfss	status,2,c
  1156  007FF6  D002               	goto	l50
  1157                           
  1158                           ;main.c: 87: return off_left;
  1159  007FF8  0E06               	movlw	6
  1160  007FFA  0012               	return	
  1161  007FFC                     l50:
  1162                           
  1163                           ;main.c: 88: }
  1164                           ;main.c: 90: return on_track;
  1165  007FFC  0E00               	movlw	0
  1166  007FFE  0012               	return	
  1167  008000                     __end_of_getRoadState:
  1168                           	opt stack 0
  1169                           tblptru	equ	0xFF8
  1170                           status	equ	0xFD8
  1171                           
  1172 ;; *************** function _accelerate *****************
  1173 ;; Defined at:
  1174 ;;		line 141 in file "main.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;		None
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  2   67[None  ] int 
  1181 ;; Registers used:
  1182 ;;		wreg, status,2, status,0, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1188 ;;      Params:         0       0       0       0       0       0       0       0       0
  1189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1192 ;;Total ram usage:        0 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    1
  1195 ;; This function calls:
  1196 ;;		_wait00
  1197 ;; This function is called by:
  1198 ;;		_main
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text8
  1203  007C22                     __ptext8:
  1204                           	opt stack 0
  1205  007C22                     _accelerate:
  1206                           	opt stack 29
  1207                           
  1208                           ;main.c: 142: PORTC=0x03;
  1209                           
  1210                           ;incstack = 0
  1211  007C22  0E03               	movlw	3
  1212  007C24  6E82               	movwf	3970,c	;volatile
  1213                           
  1214                           ;main.c: 143: wait00(12);
  1215  007C26  0E00               	movlw	0
  1216  007C28  6E02               	movwf	wait00@k+1,c
  1217  007C2A  0E0C               	movlw	12
  1218  007C2C  6E01               	movwf	wait00@k,c
  1219  007C2E  EC8F  F03E         	call	_wait00	;wreg free
  1220                           
  1221                           ;main.c: 144: PORTC=0x02;
  1222  007C32  0E02               	movlw	2
  1223  007C34  6E82               	movwf	3970,c	;volatile
  1224                           
  1225                           ;main.c: 145: wait00(0.5);
  1226  007C36  0E00               	movlw	0
  1227  007C38  6E02               	movwf	wait00@k+1,c
  1228  007C3A  0E00               	movlw	0
  1229  007C3C  6E01               	movwf	wait00@k,c
  1230  007C3E  EC8F  F03E         	call	_wait00	;wreg free
  1231                           
  1232                           ;main.c: 146: PORTC=0x00;
  1233  007C42  0E00               	movlw	0
  1234  007C44  6E82               	movwf	3970,c	;volatile
  1235                           
  1236                           ;main.c: 147: wait00(4);
  1237  007C46  0E00               	movlw	0
  1238  007C48  6E02               	movwf	wait00@k+1,c
  1239  007C4A  0E04               	movlw	4
  1240  007C4C  6E01               	movwf	wait00@k,c
  1241  007C4E  EC8F  F03E         	call	_wait00	;wreg free
  1242  007C52  0012               	return		;funcret
  1243  007C54                     __end_of_accelerate:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function _wait00 *****************
  1249 ;; Defined at:
  1250 ;;		line 10 in file "main.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  k               2    0[COMRAM] short 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  i               2    5[COMRAM] short 
  1255 ;;  j               2    3[COMRAM] short 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  2    0[COMRAM] int 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2, status,0
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1265 ;;      Params:         2       0       0       0       0       0       0       0       0
  1266 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1267 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1268 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1269 ;;Total ram usage:        7 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_turnLeft
  1275 ;;		_turnRight
  1276 ;;		_turnLeftWide
  1277 ;;		_turnRightWide
  1278 ;;		_straight
  1279 ;;		_accelerate
  1280 ;;		_main
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text9
  1285  007D1E                     __ptext9:
  1286                           	opt stack 0
  1287  007D1E                     _wait00:
  1288                           	opt stack 30
  1289                           
  1290                           ;main.c: 13: short i;
  1291                           ;main.c: 14: short j;
  1292                           ;main.c: 15: for(j=0;j<k;j++){
  1293                           
  1294                           ;incstack = 0
  1295  007D1E  0E00               	movlw	0
  1296  007D20  6E05               	movwf	wait00@j+1,c
  1297  007D22  0E00               	movlw	0
  1298  007D24  6E04               	movwf	wait00@j,c
  1299  007D26  D011               	goto	l21
  1300  007D28                     
  1301                           ;main.c: 16: for(i=0;i<3000;i++){
  1302  007D28  0E00               	movlw	0
  1303  007D2A  6E07               	movwf	wait00@i+1,c
  1304  007D2C  0E00               	movlw	0
  1305  007D2E  6E06               	movwf	wait00@i,c
  1306  007D30                     l962:
  1307  007D30  BE07               	btfsc	wait00@i+1,7,c
  1308  007D32  D006               	goto	l23
  1309  007D34  0EB8               	movlw	184
  1310  007D36  5C06               	subwf	wait00@i,w,c
  1311  007D38  0E0B               	movlw	11
  1312  007D3A  5807               	subwfb	wait00@i+1,w,c
  1313  007D3C  B0D8               	btfsc	status,0,c
  1314  007D3E  D003               	goto	u650
  1315  007D40                     l23:
  1316  007D40  4A06               	infsnz	wait00@i,f,c
  1317  007D42  2A07               	incf	wait00@i+1,f,c
  1318  007D44  D7F5               	goto	l962
  1319  007D46                     u650:
  1320  007D46  4A04               	infsnz	wait00@j,f,c
  1321  007D48  2A05               	incf	wait00@j+1,f,c
  1322  007D4A                     l21:
  1323  007D4A  5001               	movf	wait00@k,w,c
  1324  007D4C  5C04               	subwf	wait00@j,w,c
  1325  007D4E  5005               	movf	wait00@j+1,w,c
  1326  007D50  0A80               	xorlw	128
  1327  007D52  6E03               	movwf	??_wait00& (0+255),c
  1328  007D54  5002               	movf	wait00@k+1,w,c
  1329  007D56  0A80               	xorlw	128
  1330  007D58  5803               	subwfb	??_wait00& (0+255),w,c
  1331  007D5A  B0D8               	btfsc	status,0,c
  1332  007D5C  0012               	return	
  1333  007D5E  D7E4               	goto	l22
  1334  007D60                     __end_of_wait00:
  1335                           	opt stack 0
  1336  0000                     tblptru	equ	0xFF8
  1337                           status	equ	0xFD8
  1338                           tblptru	equ	0xFF8
  1339                           status	equ	0xFD8
  1340                           
  1341                           	psect	rparam
  1342  0000                     tblptru	equ	0xFF8
  1343                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_getRoadState
    _turnRightWide->_wait00
    _turnRight->_wait00
    _turnLeftWide->_wait00
    _turnLeft->_wait00
    _straight->_wait00
    _accelerate->_wait00

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   11216
                                             10 COMRAM     7     7      0
                         _accelerate
                       _getRoadState
                           _led_sens
                           _straight
                           _turnLeft
                       _turnLeftWide
                          _turnRight
                      _turnRightWide
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRightWide                                        0     0      0    1384
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            0     0      0    1384
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeftWide                                         0     0      0    1384
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             0     0      0    1384
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _straight                                             0     0      0    1384
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _led_sens                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getRoadState                                        10     0     10    1436
                                              0 COMRAM    10     0     10
 ---------------------------------------------------------------------------------
 (1) _accelerate                                           0     0      0    1384
                             _wait00
 ---------------------------------------------------------------------------------
 (1) _wait00                                               7     5      2    1384
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _accelerate
     _wait00
   _getRoadState
   _led_sens
   _straight
     _wait00
   _turnLeft
     _wait00
   _turnLeftWide
     _wait00
   _turnRight
     _wait00
   _turnRightWide
     _wait00
   _wait00

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 21 10:19:49 2018

                     l21 7D4A                       l22 7D28                       l23 7D40  
                     l32 7EA8                       l50 7FFC                       l43 7F20  
                     l44 7F44                       l45 7F60                       l46 7F7C  
                     l38 7EFC                       l47 7FA0                       l48 7FC4  
                     l49 7FE0                       l81 7E0E                       l73 7D80  
                     l82 7E14                       l74 7D7C                       l83 7E1A  
                     l84 7E20                       l76 7D94                       l85 7E26  
                     l78 7E2C                       l79 7E08                       u45 7CF2  
                     u55 7CFC                       u47 7CF4                       u65 7D06  
                     u57 7CFE                       u75 7D10                       u67 7D08  
                     u85 7D1A                       u77 7D12                       u87 7D1C  
                    l962 7D30                      u710 7E7C                      u650 7D46  
                    u810 7ED0                      u760 7EA4                      u860 7EF8  
                   u1200 7DEE                     u1208 7DF0                     u1160 7DA6  
                   u1170 7DB8                     u1180 7DCA                     u1190 7DDC  
                   u1168 7DA8                     u1178 7DBA                     u1188 7DCC  
                   u1198 7DDE                     _main 7D60                     start 2000  
           ___param_bank 000000                    ?_main 0001                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94    __size_of_turnLeftWide 0032  
                  status 000FD8          __initialization 2008             __end_of_main 7E54  
           _turnLeftWide 7C86                   ??_main 000B            __activetblptr 000002  
   __end_of_getRoadState 8000                   _ADCON1 000FC1         __end_of_led_sens 7D1E  
                 _wait00 7D1E   __size_of_turnRightWide 0032                   tblptru 000FF8  
       __end_of_straight 7C86         __end_of_turnLeft 7C00               __accesstop 0060  
__end_of__initialization 2008            ___rparam_used 000001           __pcstackCOMRAM 0001  
             _accelerate 7C22            _turnRightWide 7CB8                  ?_wait00 0001  
  __size_of_getRoadState 01AC                ?_led_sens 0001       __size_of_turnRight 0022  
         ?_turnRightWide 0001                  __Hparam 0000                  __Lparam 0000  
           _getRoadState 7E54              ?_accelerate 0001                ?_straight 0001  
                __pcinit 2008                  __ramtop 0800          __size_of_wait00 0042  
              ?_turnLeft 0001                  __ptext0 7D60                  __ptext1 7CB8  
                __ptext2 7C00                  __ptext3 7C86                  __ptext4 7BDE  
                __ptext5 7C54                  __ptext6 7CEA                  __ptext7 7E54  
                __ptext8 7C22                  __ptext9 7D1E           main@road_state 0011  
   end_of_initialization 2008               ??_led_sens 0001            __Lmediumconst 0000  
                wait00@i 0006                  wait00@j 0004                  wait00@k 0001  
             ??_straight 0008               ??_turnLeft 0008                _PORTAbits 000F80  
              _PORTBbits 000F81        __end_of_turnRight 7C22      __size_of_accelerate 0032  
        ??_turnRightWide 0008           __end_of_wait00 7D60      start_initialization 2008  
main@previous_road_state 0010                 ??_wait00 0003        __size_of_led_sens 0034  
           ??_accelerate 0008            ?_turnLeftWide 0001        __size_of_straight 0032  
      __size_of_turnLeft 0022       __end_of_accelerate 7C54           ??_turnLeftWide 0008  
              _turnRight 7C00                 __Hrparam 0000                 __Lrparam 0000  
             ?_turnRight 0001                 _led_sens 7CEA            __size_of_main 00F4  
  __end_of_turnRightWide 7CEA            getRoadState@a 0001            getRoadState@b 0003  
          getRoadState@c 0005            getRoadState@d 0007            getRoadState@e 0009  
               _straight 7C54                 _turnLeft 7BDE     __end_of_turnLeftWide 7CB8  
          ?_getRoadState 0001              ??_turnRight 0008           ??_getRoadState 000B  
